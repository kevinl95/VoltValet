
/home/mrmemory/.var/app/cc.arduino.IDE2/cache/arduino/sketches/CE084DAF20DA8712C87201E265DE9C13/anomalydetector.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	f9 c5       	rjmp	.+3058   	; 0xbf4 <__dtors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	35 c6       	rjmp	.+3178   	; 0xc70 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	33 c6       	rjmp	.+3174   	; 0xc70 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	31 c6       	rjmp	.+3170   	; 0xc70 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	2f c6       	rjmp	.+3166   	; 0xc70 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	2d c6       	rjmp	.+3162   	; 0xc70 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0c 94 0d 21 	jmp	0x421a	; 0x421a <__vector_6>
../../../../crt1/gcrt1.S:73
      1c:	29 c6       	rjmp	.+3154   	; 0xc70 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__vector_8>
../../../../crt1/gcrt1.S:75
      24:	25 c6       	rjmp	.+3146   	; 0xc70 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	23 c6       	rjmp	.+3142   	; 0xc70 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	21 c6       	rjmp	.+3138   	; 0xc70 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	1f c6       	rjmp	.+3134   	; 0xc70 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	1d c6       	rjmp	.+3130   	; 0xc70 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	1b c6       	rjmp	.+3126   	; 0xc70 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	19 c6       	rjmp	.+3122   	; 0xc70 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	17 c6       	rjmp	.+3118   	; 0xc70 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	15 c6       	rjmp	.+3114   	; 0xc70 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	11 c6       	rjmp	.+3106   	; 0xc70 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	0f c6       	rjmp	.+3102   	; 0xc70 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	0d c6       	rjmp	.+3098   	; 0xc70 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	0b c6       	rjmp	.+3094   	; 0xc70 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	09 c6       	rjmp	.+3090   	; 0xc70 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	05 c6       	rjmp	.+3082   	; 0xc70 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	03 c6       	rjmp	.+3078   	; 0xc70 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	01 c6       	rjmp	.+3074   	; 0xc70 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	ff c5       	rjmp	.+3070   	; 0xc70 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	fd c5       	rjmp	.+3066   	; 0xc70 <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__vector_30>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 ee 1d 	jmp	0x3bdc	; 0x3bdc <__vector_31>
../../../../crt1/gcrt1.S:98
      80:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_32>
../../../../crt1/gcrt1.S:99
      84:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__vector_33>
../../../../crt1/gcrt1.S:100
      88:	f3 c5       	rjmp	.+3046   	; 0xc70 <__bad_interrupt>
      8a:	00 00       	nop
../../../../crt1/gcrt1.S:101
      8c:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__vector_35>
../../../../crt1/gcrt1.S:102
      90:	ef c5       	rjmp	.+3038   	; 0xc70 <__bad_interrupt>
      92:	00 00       	nop
../../../../crt1/gcrt1.S:103
      94:	ed c5       	rjmp	.+3034   	; 0xc70 <__bad_interrupt>
      96:	00 00       	nop
../../../../crt1/gcrt1.S:104
      98:	eb c5       	rjmp	.+3030   	; 0xc70 <__bad_interrupt>
      9a:	00 00       	nop
../../../../crt1/gcrt1.S:105
      9c:	e9 c5       	rjmp	.+3026   	; 0xc70 <__bad_interrupt>
      9e:	00 00       	nop
../../../../crt1/gcrt1.S:106
      a0:	e7 c5       	rjmp	.+3022   	; 0xc70 <__bad_interrupt>
      a2:	00 00       	nop
../../../../crt1/gcrt1.S:107
      a4:	e5 c5       	rjmp	.+3018   	; 0xc70 <__bad_interrupt>
      a6:	00 00       	nop
../../../../crt1/gcrt1.S:108
      a8:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__vector_42>
../../../../crt1/gcrt1.S:109
      ac:	e1 c5       	rjmp	.+3010   	; 0xc70 <__bad_interrupt>
      ae:	00 00       	nop
../../../../crt1/gcrt1.S:110
      b0:	df c5       	rjmp	.+3006   	; 0xc70 <__bad_interrupt>
      b2:	00 00       	nop
../../../../crt1/gcrt1.S:111
      b4:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__vector_45>
../../../../crt1/gcrt1.S:112
      b8:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__vector_46>
../../../../crt1/gcrt1.S:113
      bc:	d9 c5       	rjmp	.+2994   	; 0xc70 <__bad_interrupt>
      be:	00 00       	nop
../../../../crt1/gcrt1.S:114
      c0:	d7 c5       	rjmp	.+2990   	; 0xc70 <__bad_interrupt>
      c2:	00 00       	nop
../../../../crt1/gcrt1.S:115
      c4:	d5 c5       	rjmp	.+2986   	; 0xc70 <__bad_interrupt>
      c6:	00 00       	nop
../../../../crt1/gcrt1.S:116
      c8:	d3 c5       	rjmp	.+2982   	; 0xc70 <__bad_interrupt>
      ca:	00 00       	nop
../../../../crt1/gcrt1.S:117
      cc:	d1 c5       	rjmp	.+2978   	; 0xc70 <__bad_interrupt>
      ce:	00 00       	nop
../../../../crt1/gcrt1.S:118
      d0:	cf c5       	rjmp	.+2974   	; 0xc70 <__bad_interrupt>
      d2:	00 00       	nop
../../../../crt1/gcrt1.S:119
      d4:	0c 94 6d 1e 	jmp	0x3cda	; 0x3cda <__vector_53>
../../../../crt1/gcrt1.S:120
      d8:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__vector_54>
../../../../crt1/gcrt1.S:121
      dc:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <__vector_55>
../../../../crt1/gcrt1.S:122
      e0:	c7 c5       	rjmp	.+2958   	; 0xc70 <__bad_interrupt>
      e2:	00 00       	nop
../../../../crt1/gcrt1.S:123
      e4:	c5 c5       	rjmp	.+2954   	; 0xc70 <__bad_interrupt>
      e6:	00 00       	nop
../../../../crt1/gcrt1.S:124
      e8:	c3 c5       	rjmp	.+2950   	; 0xc70 <__bad_interrupt>
      ea:	00 00       	nop
../../../../crt1/gcrt1.S:125
      ec:	c1 c5       	rjmp	.+2946   	; 0xc70 <__bad_interrupt>
      ee:	00 00       	nop
../../../../crt1/gcrt1.S:126
      f0:	bf c5       	rjmp	.+2942   	; 0xc70 <__bad_interrupt>
	...

000000f4 <__trampolines_end>:
__trampolines_start():
      f4:	6e 61       	ori	r22, 0x1E	; 30
      f6:	6e 00       	.word	0x006e	; ????

000000f8 <__c.2228>:
      f8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     108:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     118:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     128:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     138:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     148:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     158:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     168:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     178:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     188:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     198:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1a8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1b8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1c8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1d8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1e8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001f6 <__c.2370>:
     1f6:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000202 <DEBUG_LOG_LEVEL>:
     202:	5b 44 45 42 55 47 5d 20 00                          [DEBUG] .

0000020b <INFO_LOG_LEVEL>:
     20b:	5b 49 4e 46 4f 5d 20 00                             [INFO] .

00000213 <WARN_LOG_LEVEL>:
     213:	5b 57 41 52 4e 5d 20 00                             [WARN] .

0000021b <ERROR_LOG_LEVEL>:
     21b:	5b 45 52 52 4f 52 5d 20 00                          [ERROR] .

00000224 <SequansControllerClass::begin()::__c>:
     224:	54 69 6d 65 64 20 6f 75 74 20 77 61 69 74 69 6e     Timed out waitin
     234:	67 20 66 6f 72 20 63 65 6c 6c 75 6c 61 72 20 6d     g for cellular m
     244:	6f 64 65 6d 20 74 6f 20 73 74 61 72 74 20 75 70     odem to start up
     254:	0d 0a 00                                            ...

00000257 <SequansControllerClass::begin()::__c>:
     257:	53 59 53 53 54 41 52 54 00                          SYSSTART.

00000260 <_ZZN8LteClass5beginEmbE3__c__21_>:
     260:	44 69 64 20 6e 6f 74 20 67 65 74 20 4e 54 50 20     Did not get NTP 
     270:	73 79 6e 63 20 77 69 74 68 69 6e 20 74 69 6d 65     sync within time
     280:	6f 75 74 20 6f 66 20 25 6c 75 20 6d 73 2e 20 43     out of %lu ms. C
     290:	6f 6e 73 69 64 65 72 20 69 6e 63 72 65 61 73 69     onsider increasi
     2a0:	6e 67 20 74 69 6d 65 6f 75 74 20 66 6f 72 20 4c     ng timeout for L
     2b0:	74 65 2e 62 65 67 69 6e 28 29 0d 0a 00              te.begin()...

000002bd <_ZZN8LteClass5beginEmbE3__c__20_>:
     2bd:	47 6f 74 20 4e 54 50 20 73 79 6e 63 21 00           Got NTP sync!.

000002cb <_ZZN8LteClass5beginEmbE3__c__19_>:
     2cb:	53 51 4e 4e 54 50 00                                SQNNTP.

000002d2 <_ZZN8LteClass5beginEmbE3__c__18_>:
     2d2:	41 54 2b 53 51 4e 4e 54 50 3d 32 2c 22 74 69 6d     AT+SQNNTP=2,"tim
     2e2:	65 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 2c 74 69 6d     e.google.com,tim
     2f2:	65 2e 77 69 6e 64 6f 77 73 2e 63 6f 6d 2c 70 6f     e.windows.com,po
     302:	6f 6c 2e 6e 74 70 2e 6f 72 67 22 2c 31 00           ol.ntp.org",1.

00000310 <_ZZN8LteClass5beginEmbE3__c__17_>:
     310:	47 6f 74 20 64 69 73 63 6f 6e 6e 65 63 74 65 64     Got disconnected
     320:	20 66 72 6f 6d 20 6e 65 74 77 6f 72 6b 20 77 68      from network wh
     330:	69 6c 73 74 20 64 6f 69 6e 67 20 4e 54 50 20 73     ilst doing NTP s
     340:	79 6e 63 00                                         ync.

00000344 <_ZZN8LteClass5beginEmbE3__c__16_>:
     344:	44 69 64 20 6e 6f 74 20 67 65 74 20 74 69 6d 65     Did not get time
     354:	20 66 72 6f 6d 20 6f 70 65 72 61 74 6f 72 2c 20      from operator, 
     364:	64 6f 69 6e 67 20 4e 54 50 20 73 79 6e 63 2e 20     doing NTP sync. 
     374:	54 68 69 73 20 63 61 6e 20 74 61 6b 65 20 73 6f     This can take so
     384:	6d 65 20 74 69 6d 65 2e 2e 2e 00                    me time....

0000038f <_ZZN8LteClass5beginEmbE3__c__15_>:
     38f:	46 61 69 6c 65 64 20 74 6f 20 72 65 74 72 69 65     Failed to retrie
     39f:	76 65 20 74 69 6d 65 20 66 72 6f 6d 20 6d 6f 64     ve time from mod
     3af:	65 6d 00                                            em.

000003b2 <_ZZN8LteClass5beginEmbE3__c__14_>:
     3b2:	43 6f 6d 6d 61 6e 64 20 66 6f 72 20 72 65 74 72     Command for retr
     3c2:	69 65 76 69 6e 67 20 6d 6f 64 65 6d 20 74 69 6d     ieving modem tim
     3d2:	65 20 66 61 69 6c 65 64 00                          e failed.

000003db <_ZZN8LteClass5beginEmbE3__c__13_>:
     3db:	41 54 2b 43 43 4c 4b 3f 00                          AT+CCLK?.

000003e4 <_ZZN8LteClass5beginEmbE3__c__10_>:
     3e4:	57 61 73 20 6e 6f 74 20 61 62 6c 65 20 74 6f 20     Was not able to 
     3f4:	63 6f 6e 6e 65 63 74 20 74 6f 20 74 68 65 20 6e     connect to the n
     404:	65 74 77 6f 72 6b 20 77 69 74 68 69 6e 20 74 68     etwork within th
     414:	65 20 74 69 6d 65 6f 75 74 20 6f 66 20 25 64 20     e timeout of %d 
     424:	6d 73 2e 20 43 6f 6e 73 69 64 65 72 20 69 6e 63     ms. Consider inc
     434:	72 65 61 73 69 6e 67 20 74 68 65 20 74 69 6d 65     reasing the time
     444:	6f 75 74 20 6f 72 20 63 68 65 63 6b 69 6e 67 20     out or checking 
     454:	79 6f 75 72 20 63 65 6c 6c 75 6c 61 72 20 63 6f     your cellular co
     464:	76 65 72 61 67 65 2e 0d 0a 00                       verage....

0000046e <_ZZN8LteClass5beginEmbE3__c__11_>:
     46e:	20 45 52 52 4f 52 3a 20 25 53 0d 0a 00               ERROR: %S...

0000047b <LteClass::begin(unsigned long, bool)::__c>:
     47b:	2e 00                                               ..

0000047d <LteClass::begin(unsigned long, bool)::__c>:
     47d:	43 6f 6e 6e 65 63 74 69 6e 67 20 74 6f 20 6f 70     Connecting to op
     48d:	65 72 61 74 6f 72 00                                erator.

00000494 <LteClass::begin(unsigned long, bool)::__c>:
     494:	53 49 4d 20 63 61 72 64 20 69 73 20 6e 6f 74 20     SIM card is not 
     4a4:	72 65 61 64 79 2c 20 73 74 61 74 75 73 3a 20 25     ready, status: %
     4b4:	73 2e 00                                            s..

000004b7 <LteClass::begin(unsigned long, bool)::__c>:
     4b7:	52 45 41 44 59 00                                   READY.

000004bd <LteClass::begin(unsigned long, bool)::__c>:
     4bd:	46 61 69 6c 65 64 20 74 6f 20 72 65 74 72 69 65     Failed to retrie
     4cd:	76 65 20 53 49 4d 20 73 74 61 74 75 73 2e 00        ve SIM status..

000004dc <LteClass::begin(unsigned long, bool)::__c>:
     4dc:	43 68 65 63 6b 69 6e 67 20 53 49 4d 20 63 61 72     Checking SIM car
     4ec:	64 20 66 61 69 6c 65 64 2c 20 69 73 20 69 74 20     d failed, is it 
     4fc:	69 6e 73 65 72 74 65 64 3f 00                       inserted?.

00000506 <LteClass::begin(unsigned long, bool)::__c>:
     506:	41 54 2b 43 50 49 4e 3f 00                          AT+CPIN?.

0000050f <LteClass::begin(unsigned long, bool)::__c>:
     50f:	41 54 2b 43 46 55 4e 3d 31 00                       AT+CFUN=1.

00000519 <LteClass::begin(unsigned long, bool)::__c>:
     519:	41 54 2b 43 45 52 45 47 3d 35 00                    AT+CEREG=5.

00000524 <LteClass::begin(unsigned long, bool)::__c>:
     524:	41 54 2b 43 54 5a 52 3d 31 00                       AT+CTZR=1.

0000052e <LteClass::begin(unsigned long, bool)::__c>:
     52e:	41 54 2b 43 54 5a 55 3d 31 00                       AT+CTZU=1.

00000538 <LteClass::getOperator()::__c>:
     538:	4e 4f 54 5f 41 56 41 49 4c 41 42 4c 45 00           NOT_AVAILABLE.

00000546 <LteClass::getOperator()::__c>:
     546:	46 61 69 6c 65 64 20 74 6f 20 72 65 74 72 69 65     Failed to retrie
     556:	76 65 20 74 68 65 20 6f 70 65 72 61 74 6f 72 20     ve the operator 
     566:	6e 61 6d 65 2e 00                                   name..

0000056c <LteClass::getOperator()::__c>:
     56c:	41 54 2b 43 4f 50 53 3f 00                          AT+COPS?.

00000575 <LteClass::getOperator()::__c>:
     575:	41 54 2b 43 4f 50 53 3d 33 2c 30 00                 AT+COPS=3,0.

00000581 <HttpClientClass::configure(char const*, unsigned int, bool)::__c>:
     581:	53 65 63 75 72 69 74 79 20 70 72 6f 66 69 6c 65     Security profile
     591:	20 6e 6f 74 20 73 65 74 20 75 70 20 66 6f 72 20      not set up for 
     5a1:	48 54 54 50 53 2e 20 52 75 6e 20 74 68 65 20 27     HTTPS. Run the '
     5b1:	70 72 6f 76 69 73 69 6f 6e 27 20 41 72 64 75 69     provision' Ardui
     5c1:	6e 6f 20 73 6b 65 74 63 68 20 65 78 61 6d 70 6c     no sketch exampl
     5d1:	65 20 74 6f 20 73 65 74 20 74 68 69 73 20 75 70     e to set this up
     5e1:	2e 00                                               ..

000005e3 <SecurityProfileClass::profileExists(unsigned char)::__c>:
     5e3:	46 61 69 6c 65 64 20 74 6f 20 71 75 65 72 79 20     Failed to query 
     5f3:	73 65 63 75 72 69 74 79 20 70 72 6f 66 69 6c 65     security profile
	...

00000604 <SecurityProfileClass::profileExists(unsigned char)::__c>:
     604:	41 54 2b 53 51 4e 53 50 43 46 47 00                 AT+SQNSPCFG.

00000610 <HttpClientClass::configure(char const*, unsigned int, bool)::__c>:
     610:	41 54 2b 53 51 4e 48 54 54 50 43 46 47 3d 30 2c     AT+SQNHTTPCFG=0,
     620:	22 25 73 22 2c 25 75 2c 30 2c 22 22 2c 22 22 2c     "%s",%u,0,"","",
     630:	25 75 2c 31 32 30 2c 2c 33 00                       %u,120,,3.

0000063a <HttpClientClass::readBody(char*, unsigned long)::__c>:
     63a:	57 61 73 20 6e 6f 74 20 61 62 6c 65 20 74 6f 20     Was not able to 
     64a:	77 72 69 74 65 20 48 54 54 50 20 72 65 61 64 20     write HTTP read 
     65a:	62 6f 64 79 20 41 54 20 63 6f 6d 6d 61 6e 64 0d     body AT command.
     66a:	0a 00                                               ..

0000066c <HttpClientClass::readBody(char*, unsigned long)::__c>:
     66c:	41 54 2b 53 51 4e 48 54 54 50 52 43 56 3d 30 2c     AT+SQNHTTPRCV=0,
     67c:	25 6c 75 00                                         %lu.

00000680 <HttpClientClass::readBody(char*, unsigned long)::__c>:
     680:	41 54 00                                            AT.

00000683 <setup::__c>:
     683:	42 6f 64 79 3a 20 25 73 0d 0a 00                    Body: %s...

0000068e <setup::__c>:
     68e:	50 4f 53 54 20 2d 20 48 54 54 50 20 73 74 61 74     POST - HTTP stat
     69e:	75 73 20 63 6f 64 65 3a 20 25 75 2c 20 64 61 74     us code: %u, dat
     6ae:	61 20 73 69 7a 65 3a 20 25 75 0d 0a 00              a size: %u...

000006bb <setup::__c>:
     6bb:	46 61 69 6c 65 64 20 74 6f 20 63 6f 6e 66 69 67     Failed to config
     6cb:	75 72 65 20 48 54 54 50 53 20 66 6f 72 20 74 68     ure HTTPS for th
     6db:	65 20 64 6f 6d 61 69 6e 20 25 73 0d 0a 00           e domain %s...

000006e9 <setup::__c>:
     6e9:	43 6f 6e 6e 65 63 74 65 64 20 74 6f 20 6f 70 65     Connected to ope
     6f9:	72 61 74 6f 72 3a 20 25 73 0d 0a 00                 rator: %s...

00000705 <setup::__c>:
     705:	46 61 69 6c 65 64 20 74 6f 20 63 6f 6e 6e 65 63     Failed to connec
     715:	74 20 74 6f 20 6f 70 65 72 61 74 6f 72 00           t to operator.

00000723 <loop::__c>:
     723:	50 4f 53 54 20 2d 20 48 54 54 50 20 73 74 61 74     POST - HTTP stat
     733:	75 73 20 63 6f 64 65 3a 20 25 75 2c 20 64 61 74     us code: %u, dat
     743:	61 20 73 69 7a 65 3a 20 25 75 0d 0a 00              a size: %u...

00000750 <loop::__c>:
     750:	50 4f 53 54 20 2d 20 48 54 54 50 20 73 74 61 74     POST - HTTP stat
     760:	75 73 20 63 6f 64 65 3a 20 25 75 2c 20 64 61 74     us code: %u, dat
     770:	61 20 73 69 7a 65 3a 20 25 75 0d 0a 00              a size: %u...

0000077d <loop::__c>:
     77d:	50 4f 53 54 20 2d 20 48 54 54 50 20 73 74 61 74     POST - HTTP stat
     78d:	75 73 20 63 6f 64 65 3a 20 25 75 2c 20 64 61 74     us code: %u, dat
     79d:	61 20 73 69 7a 65 3a 20 25 75 0d 0a 00              a size: %u...

000007aa <CEREG_CALLBACK>:
     7aa:	43 45 52 45 47 00                                   CEREG.

000007b0 <AT_DISCONNECT>:
     7b0:	41 54 2b 43 46 55 4e 3d 30 00                       AT+CFUN=0.

000007ba <TIMEZONE_CALLBACK>:
     7ba:	43 54 5a 56 00                                      CTZV.

000007bf <MQTT_DISCONNECT>:
     7bf:	41 54 2b 53 51 4e 53 4d 51 54 54 44 49 53 43 4f     AT+SQNSMQTTDISCO
     7cf:	4e 4e 45 43 54 3d 30 00                             NNECT=0.

000007d7 <MQTT_ON_DISCONNECT_URC>:
     7d7:	53 51 4e 53 4d 51 54 54 4f 4e 44 49 53 43 4f 4e     SQNSMQTTONDISCON
     7e7:	4e 45 43 54 00                                      NECT.

000007ec <MQTT_ON_MESSAGE_URC>:
     7ec:	53 51 4e 53 4d 51 54 54 4f 4e 4d 45 53 53 41 47     SQNSMQTTONMESSAG
     7fc:	45 00                                               E.

000007fe <waitForResponse(unsigned long)::__c>:
     7fe:	48 54 54 50 20 72 65 71 75 65 73 74 20 66 61 69     HTTP request fai
     80e:	6c 65 64 20 77 69 74 68 20 63 75 72 6c 20 65 72     led with curl er
     81e:	72 6f 72 20 63 6f 64 65 3a 20 25 64 2e 20 50 6c     ror code: %d. Pl
     82e:	65 61 73 65 20 72 65 66 65 72 20 74 6f 20 6c 69     ease refer to li
     83e:	62 63 75 72 6c 27 73 20 65 72 72 6f 72 20 63 6f     bcurl's error co
     84e:	64 65 73 20 66 6f 72 20 6d 6f 72 65 20 69 6e 66     des for more inf
     85e:	6f 72 6d 61 74 69 6f 6e 2e 0d 0a 00                 ormation....

0000086a <waitForResponse(unsigned long)::__c>:
     86a:	44 69 64 20 6e 6f 74 20 67 65 74 20 48 54 54 50     Did not get HTTP
     87a:	20 72 65 73 70 6f 6e 73 65 20 62 65 66 6f 72 65      response before
     88a:	20 74 69 6d 65 6f 75 74 20 6f 6e 20 25 64 20 6d      timeout on %d m
     89a:	73 2e 20 43 6f 6e 73 69 64 65 72 20 69 6e 63 72     s. Consider incr
     8aa:	65 61 73 69 6e 67 20 74 68 65 20 74 69 6d 65 6f     easing the timeo
     8ba:	75 74 2e 0d 0a 00                                   ut....

000008c0 <HTTP_RING_URC>:
     8c0:	53 51 4e 48 54 54 50 52 49 4e 47 00                 SQNHTTPRING.

000008cc <HTTP_SHUTDOWN_URC>:
     8cc:	53 51 4e 48 54 54 50 53 48 00                       SQNHTTPSH.

000008d6 <sendData(char const*, unsigned char const*, unsigned long, unsigned char, char const*, char const*, unsigned long)::__c>:
     8d6:	54 69 6d 65 64 20 6f 75 74 20 77 68 69 6c 73 74     Timed out whilst
     8e6:	20 77 61 69 74 69 6e 67 20 6f 6e 20 64 65 6c 69      waiting on deli
     8f6:	76 65 72 69 6e 67 20 74 68 65 20 48 54 54 50 20     vering the HTTP 
     906:	70 61 79 6c 6f 61 64 2e 20 49 73 20 74 68 65 20     payload. Is the 
     916:	73 65 72 76 65 72 20 6f 6e 6c 69 6e 65 3f 20 49     server online? I
     926:	66 20 79 6f 75 27 72 65 20 75 73 69 6e 67 20 48     f you're using H
     936:	54 54 50 53 2c 20 79 6f 75 20 6d 69 67 68 74 20     TTPS, you might 
     946:	6e 65 65 64 20 74 6f 20 70 72 6f 76 69 73 69 6f     need to provisio
     956:	6e 20 77 69 74 68 20 61 20 64 69 66 66 65 72 65     n with a differe
     966:	6e 74 20 43 41 20 63 65 72 74 69 66 69 63 61 74     nt CA certificat
     976:	65 2e 00                                            e..

00000979 <sendData(char const*, unsigned char const*, unsigned long, unsigned char, char const*, char const*, unsigned long)::__c>:
     979:	57 61 73 20 6e 6f 74 20 61 62 6c 65 20 74 6f 20     Was not able to 
     989:	77 72 69 74 65 20 48 54 54 50 20 41 54 20 63 6f     write HTTP AT co
     999:	6d 6d 61 6e 64 0d 0a 00                             mmand...

000009a1 <sendData(char const*, unsigned char const*, unsigned long, unsigned char, char const*, char const*, unsigned long)::__c>:
     9a1:	41 54 2b 53 51 4e 48 54 54 50 53 4e 44 3d 30 2c     AT+SQNHTTPSND=0,
     9b1:	25 75 2c 22 25 73 22 2c 25 6c 75 2c 22 25 73 22     %u,"%s",%lu,"%s"
     9c1:	2c 22 25 73 22 00                                   ,"%s".

000009c7 <sendData(char const*, unsigned char const*, unsigned long, unsigned char, char const*, char const*, unsigned long)::__c>:
     9c7:	41 54 00                                            AT.

000009ca <HTTP_CONTENT_TYPE_TEXT_PLAIN>:
     9ca:	31 00                                               1.

000009cc <HTTP_CONTENT_TYPE_APPLICATION_APPLICATION_JSON>:
     9cc:	34 00                                               4.

000009ce <HTTP_CONTENT_TYPE_APPLICATION_MULTIPART_FORM_DATA>:
     9ce:	33 00                                               3.

000009d0 <HTTP_CONTENT_TYPE_APPLICATION_OCTET_STREAM>:
     9d0:	32 00                                               2.

000009d2 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool)::__c>:
     9d2:	4d 61 78 20 61 6d 6f 75 6e 74 20 6f 66 20 55 52     Max amount of UR
     9e2:	43 20 63 61 6c 6c 62 61 63 6b 73 20 66 6f 72 20     C callbacks for 
     9f2:	53 65 71 75 61 6e 73 43 6f 6e 74 72 6f 6c 6c 65     SequansControlle
     a02:	72 20 72 65 61 63 68 65 64 00                       r reached.

00000a0c <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool)::__c>:
     a0c:	20 77 69 74 68 20 6c 65 6e 67 74 68 20 67 72 65      with length gre
     a1c:	61 74 65 72 20 74 68 61 6e 20 74 68 65 20 6d 61     ater than the ma
     a2c:	78 69 6d 75 6d 20 6c 65 6e 67 74 68 20 61 6c 6c     ximum length all
     a3c:	6f 77 65 64 20 66 6f 72 20 55 52 43 73 20 28 25     owed for URCs (%
     a4c:	64 2f 25 64 29 0d 0a 00                             d/%d)...

00000a54 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool)::__c>:
     a54:	25 73 00                                            %s.

00000a57 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool)::__c>:
     a57:	25 53 00                                            %S.

00000a5a <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool)::__c>:
     a5a:	41 74 74 65 6d 70 74 65 64 20 74 6f 20 72 65 67     Attempted to reg
     a6a:	69 73 74 65 72 20 55 52 43 20 00                    ister URC .

00000a75 <SequansControllerClass::unregisterCallback(char const*, bool)::__c>:
     a75:	20 77 69 74 68 20 6c 65 6e 67 74 68 20 67 72 65      with length gre
     a85:	61 74 65 72 20 74 68 61 6e 20 74 68 65 20 6d 61     ater than the ma
     a95:	78 69 6d 75 6d 20 6c 65 6e 67 74 68 20 61 6c 6c     ximum length all
     aa5:	6f 77 65 64 20 66 6f 72 20 55 52 43 73 20 28 25     owed for URCs (%
     ab5:	64 2f 25 64 29 0d 0a 00                             d/%d)...

00000abd <SequansControllerClass::unregisterCallback(char const*, bool)::__c>:
     abd:	25 53 00                                            %S.

00000ac0 <SequansControllerClass::unregisterCallback(char const*, bool)::__c>:
     ac0:	41 74 74 65 6d 70 74 65 64 20 74 6f 20 64 65 2d     Attempted to de-
     ad0:	72 65 67 69 73 74 65 72 20 55 52 43 20 00           register URC .

00000ade <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     ade:	4e 4f 4e 45 00                                      NONE.

00000ae3 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     ae3:	53 45 52 49 41 4c 5f 57 52 49 54 45 5f 45 52 52     SERIAL_WRITE_ERR
     af3:	4f 52 00                                            OR.

00000af6 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     af6:	53 45 52 49 41 4c 5f 52 45 41 44 5f 45 52 52 4f     SERIAL_READ_ERRO
     b06:	52 00                                               R.

00000b08 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     b08:	54 49 4d 45 4f 55 54 00                             TIMEOUT.

00000b10 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     b10:	42 55 46 46 45 52 5f 4f 56 45 52 46 4c 4f 57 00     BUFFER_OVERFLOW.

00000b20 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     b20:	45 52 52 4f 52 00                                   ERROR.

00000b26 <SequansControllerClass::responseResultToString(ResponseResult, char*)::__c>:
     b26:	4f 4b 00                                            OK.

00000b29 <SequansControllerClass::writeCommand(char const*, char*, unsigned int, bool, void*)::__c>:
     b29:	20 2d 3e 20 25 73 0d 0a 00                           -> %s...

00000b32 <SequansControllerClass::writeCommand(char const*, char*, unsigned int, bool, void*)::__c>:
     b32:	53 65 71 75 61 6e 73 43 6f 6e 74 72 6f 6c 6c 65     SequansControlle
     b42:	72 2e 77 72 69 74 65 43 6f 6d 6d 61 6e 64 28 29     r.writeCommand()
     b52:	20 63 61 6c 6c 65 64 20 77 69 74 68 20 62 75 66      called with buf
     b62:	66 65 72 20 77 68 69 63 68 20 69 73 20 74 6f 6f     fer which is too
     b72:	20 73 6d 61 6c 6c 20 66 6f 72 20 74 68 65 20 72      small for the r
     b82:	65 73 70 6f 6e 73 65 2e 20 49 6e 63 72 65 61 73     esponse. Increas
     b92:	65 20 72 65 73 70 6f 6e 73 65 20 62 75 66 66 65     e response buffe
     ba2:	72 20 73 69 7a 65 2e 00                             r size..

00000baa <SequansControllerClass::writeCommand(char const*, char*, unsigned int, bool, void*)::__c>:
	...

00000bab <SequansControllerClass::writeCommand(char const*, char*, unsigned int, bool, void*)::__c>:
     bab:	53 65 6e 64 69 6e 67 20 41 54 20 63 6f 6d 6d 61     Sending AT comma
     bbb:	6e 64 3a 20 00                                      nd: .

00000bc0 <SequansControllerClass::writeString(char const*, bool, bool, void*)::__c>:
     bc0:	0d 0a 00                                            ...

00000bc3 <SequansControllerClass::writeString(char const*, bool, bool, void*)::__c>:
     bc3:	57 72 69 74 69 6e 67 20 73 74 72 69 6e 67 3a 20     Writing string: 
	...

00000bd4 <SequansControllerClass::readResponse(char*, unsigned int)::__c>:
     bd4:	0d 0a 45 52 52 4f 52 0d 0a 00                       ..ERROR...

00000bde <SequansControllerClass::readResponse(char*, unsigned int)::__c>:
     bde:	0d 0a 4f 4b 0d 0a 00                                ..OK...

00000be5 <NONE_LOG_LEVEL>:
	...

00000be6 <_usart3_pins>:
     be6:	00 08 0a 40 0c ff c0 00 c0 00                       ...@......

00000bf0 <__ctors_start>:
__ctors_start():
     bf0:	e8 24       	eor	r14, r8

00000bf2 <__ctors_end>:
__dtors_start():
     bf2:	8d 27       	eor	r24, r29

00000bf4 <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     bf4:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     bf6:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     bf8:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     bfa:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     bfc:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
     bfe:	de bf       	out	0x3e, r29	; 62

00000c00 <_initThreeStuff()>:
init_reset_flags():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:139

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     c00:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:140
    RSTCTRL.RSTFR = flags;
     c04:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:141
    if (flags == 0) {
     c08:	81 11       	cpse	r24, r1
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <_initThreeStuff()+0x16>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:142
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     c0c:	98 ed       	ldi	r25, 0xD8	; 216
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	94 bf       	out	0x34, r25	; 52
     c12:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <__TEXT_REGION_LENGTH__+0x7e0041>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:144
    }
    GPIOR0 = flags;
     c16:	8c bb       	out	0x1c, r24	; 28
doFLMAP():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:67
      #pragma message("PROGMEM_MAPPED points to section 0 of the flash")
    #else
      #warning "no FLMAP section defined, yet LOCK_FLMAP IS!"
      temp = 0x30; // should always end up as the highest up to 3.
    #endif
    NVMCTRL.CTRLB = temp;
     c18:	80 e3       	ldi	r24, 0x30	; 48
     c1a:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <__TEXT_REGION_LENGTH__+0x7e1001>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/main.cpp:69
    temp |= 0x80;
    _PROTECTED_WRITE(NVMCTRL_CTRLB, temp);
     c1e:	88 ed       	ldi	r24, 0xD8	; 216
     c20:	90 eb       	ldi	r25, 0xB0	; 176
     c22:	84 bf       	out	0x34, r24	; 52
     c24:	90 93 01 10 	sts	0x1001, r25	; 0x801001 <__TEXT_REGION_LENGTH__+0x7e1001>

00000c28 <__do_clear_bss>:
__do_clear_bss():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     c28:	2e e4       	ldi	r18, 0x4E	; 78
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     c2a:	a2 ee       	ldi	r26, 0xE2	; 226
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     c2c:	b2 e4       	ldi	r27, 0x42	; 66
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <.do_clear_bss_start>

00000c30 <.do_clear_bss_loop>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     c30:	1d 92       	st	X+, r1

00000c32 <.do_clear_bss_start>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     c32:	a1 3e       	cpi	r26, 0xE1	; 225
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     c34:	b2 07       	cpc	r27, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     c36:	e1 f7       	brne	.-8      	; 0xc30 <.do_clear_bss_loop>

00000c38 <__do_copy_data>:
__do_copy_data():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     c38:	12 e4       	ldi	r17, 0x42	; 66
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     c3c:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     c3e:	e4 e4       	ldi	r30, 0x44	; 68
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     c40:	f3 e6       	ldi	r31, 0x63	; 99
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     c42:	00 e0       	ldi	r16, 0x00	; 0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     c44:	0b bf       	out	0x3b, r16	; 59
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <__do_copy_data+0x14>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     c48:	07 90       	elpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     c4a:	0d 92       	st	X+, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     c4c:	a2 3e       	cpi	r26, 0xE2	; 226
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     c4e:	b1 07       	cpc	r27, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     c50:	d9 f7       	brne	.-10     	; 0xc48 <__do_copy_data+0x10>

00000c52 <__do_global_ctors>:
__do_global_ctors():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     c52:	15 e0       	ldi	r17, 0x05	; 5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     c54:	c9 ef       	ldi	r28, 0xF9	; 249
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     c56:	d5 e0       	ldi	r29, 0x05	; 5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__do_global_ctors+0x10>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     c5a:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     c5c:	fe 01       	movw	r30, r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     c5e:	0e 94 07 2c 	call	0x580e	; 0x580e <__tablejump2__>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     c62:	c8 3f       	cpi	r28, 0xF8	; 248
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     c64:	d1 07       	cpc	r29, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     c66:	c9 f7       	brne	.-14     	; 0xc5a <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     c68:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <main>
../../../../crt1/gcrt1.S:315
     c6c:	0c 94 96 31 	jmp	0x632c	; 0x632c <__do_global_dtors>

00000c70 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     c70:	c7 c9       	rjmp	.-3186   	; 0x0 <__vectors>

00000c72 <fdev_putchar(char, __file*)>:
fdev_putchar():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:44
 * @brief We have to declare this outside the class scope for interoperability
 * with fdev_setup_stream. This is safe as we won't ever come into a situation
 * where this is not called atomically.
 */
static int16_t fdev_putchar(char data, FILE* file) {
    ((class Print*)(fdev_get_udata(file)))->write((uint8_t)data);
     c72:	fb 01       	movw	r30, r22
     c74:	a4 85       	ldd	r26, Z+12	; 0x0c
     c76:	b5 85       	ldd	r27, Z+13	; 0x0d
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	01 90       	ld	r0, Z+
     c80:	f0 81       	ld	r31, Z
     c82:	e0 2d       	mov	r30, r0
     c84:	68 2f       	mov	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	09 95       	icall
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:46
    return 0;
}
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <micros>:
micros():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:449
      #else /* TCA */
        uint8_t ticks;
      #endif
      uint8_t flags;
      /* Save current state and disable interrupts */
      uint8_t oldSREG = SREG;
     c90:	9f b7       	in	r25, 0x3f	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:450
      cli(); /* INTERRUPTS OFF */
     c92:	f8 94       	cli
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:466
        while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
        flags = TCD0.INTFLAGS;
        ticks = TCD0.CAPTUREA;
        */
      #else /* = defined(MILLIS_USE_TCB) */
        ticks = _timer->CNT;
     c94:	e0 91 2a 0b 	lds	r30, 0x0B2A	; 0x800b2a <__TEXT_REGION_LENGTH__+0x7e0b2a>
     c98:	f0 91 2b 0b 	lds	r31, 0x0B2B	; 0x800b2b <__TEXT_REGION_LENGTH__+0x7e0b2b>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:467
        flags = _timer->INTFLAGS;
     c9c:	80 91 26 0b 	lds	r24, 0x0B26	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:475
       * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
       * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
       * doesn't matter.
       * Get current number of overflows and timer count */
      #if defined(MILLIS_USE_TCB)
        overflows = timingStruct.timer_millis;
     ca0:	20 91 c6 49 	lds	r18, 0x49C6	; 0x8049c6 <timingStruct>
     ca4:	30 91 c7 49 	lds	r19, 0x49C7	; 0x8049c7 <timingStruct+0x1>
     ca8:	40 91 c8 49 	lds	r20, 0x49C8	; 0x8049c8 <timingStruct+0x2>
     cac:	50 91 c9 49 	lds	r21, 0x49C9	; 0x8049c9 <timingStruct+0x3>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:480
      #else
        overflows = timingStruct.timer_overflow_count;
      #endif
      /* Turn interrupts back on, assuming they were on when micros was called. */
      SREG = oldSREG; /* INTERRUPTS ON */
     cb0:	9f bf       	out	0x3f, r25	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:490
      */
      #if defined(MILLIS_USE_TCA)
        ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
        if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x03)) {
      #else /* = defined(MILLIS_USE_TCB) */
        if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
     cb2:	80 ff       	sbrs	r24, 0
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <micros+0x36>
     cb6:	cf 01       	movw	r24, r30
     cb8:	88 27       	eor	r24, r24
     cba:	89 2b       	or	r24, r25
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <micros+0x36>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:495
      #endif
      #if (defined(MILLIS_USE_TCB) && (F_CPU <= 2000000UL))
        overflows += 2;
      #else
        overflows++;
     cbe:	2f 5f       	subi	r18, 0xFF	; 255
     cc0:	3f 4f       	sbci	r19, 0xFF	; 255
     cc2:	4f 4f       	sbci	r20, 0xFF	; 255
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:785
            : "+r" (ticks));        // Do the rest in C. ticks is a read/write operand.
          microseconds = overflows * 1000 + ticks; // nice and clean.

        #elif (F_CPU == 48000000UL || F_CPU == 24000000UL || F_CPU == 12000000UL || F_CPU == 6000000UL || F_CPU == 3000000UL)
          // The terrible twelves!
            __asm__ __volatile__(
     cc6:	0f 01       	movw	r0, r30
     cc8:	16 94       	lsr	r1
     cca:	07 94       	ror	r0
     ccc:	16 94       	lsr	r1
     cce:	07 94       	ror	r0
     cd0:	16 94       	lsr	r1
     cd2:	07 94       	ror	r0
     cd4:	16 94       	lsr	r1
     cd6:	07 94       	ror	r0
     cd8:	f0 01       	movw	r30, r0
     cda:	16 94       	lsr	r1
     cdc:	07 94       	ror	r0
     cde:	e0 0d       	add	r30, r0
     ce0:	f1 1d       	adc	r31, r1
     ce2:	16 94       	lsr	r1
     ce4:	07 94       	ror	r0
     ce6:	10 2c       	mov	r1, r0
     ce8:	16 94       	lsr	r1
     cea:	01 18       	sub	r0, r1
     cec:	16 94       	lsr	r1
     cee:	01 0c       	add	r0, r1
     cf0:	16 94       	lsr	r1
     cf2:	01 18       	sub	r0, r1
     cf4:	16 94       	lsr	r1
     cf6:	01 0c       	add	r0, r1
     cf8:	16 94       	lsr	r1
     cfa:	01 18       	sub	r0, r1
     cfc:	16 94       	lsr	r1
     cfe:	16 94       	lsr	r1
     d00:	01 0c       	add	r0, r1
     d02:	11 24       	eor	r1, r1
     d04:	e0 19       	sub	r30, r0
     d06:	f1 09       	sbc	r31, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:830
          "add r0,r1"     "\n\t"  // + ticks >> 9
          "eor r1,r1"     "\n\t"  // clear out r1
          "sub %A0,r0"    "\n\t"  // Add the sum of terms that fit in a byte to what was ticks in old code.
          "sbc %B0,r1"    "\n"    // carry - see,this is why AVR needs a known zero.
          : "+r" (ticks));        // Do the rest in C. ticks is a read/write operand.
        microseconds = overflows * 1000 + ticks;
     d08:	a8 ee       	ldi	r26, 0xE8	; 232
     d0a:	b3 e0       	ldi	r27, 0x03	; 3
     d0c:	0e 94 10 2b 	call	0x5620	; 0x5620 <__muluhisi3>
     d10:	6e 0f       	add	r22, r30
     d12:	7f 1f       	adc	r23, r31
     d14:	81 1d       	adc	r24, r1
     d16:	91 1d       	adc	r25, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1039
          microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                        + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
        #endif
      #endif // end of timer-specific part of micros calculations
      return microseconds;
    }
     d18:	08 95       	ret

00000d1a <delay>:
delay():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1101

#if (!(defined(MILLIS_USE_TIMERNONE) || defined(MILLIS_USE_TIMERRTC) || (F_CPU == 7000000L || F_CPU == 14000000)))
  // delay implementation when we do have micros() - we know it won't work at 7 or 14, and those can be generated
  // from internal, and switch logic is in even though micros isn't.
  void delay(unsigned long ms)
  {
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	6b 01       	movw	r12, r22
     d28:	7c 01       	movw	r14, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1102
    uint16_t start = (uint16_t)micros();
     d2a:	b2 df       	rcall	.-156    	; 0xc90 <micros>
     d2c:	eb 01       	movw	r28, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1106
    while (true) {
      if (ms == 0) break;
      yield();
      uint16_t us_passed = (uint16_t)micros() - start;
     d2e:	b0 df       	rcall	.-160    	; 0xc90 <micros>
     d30:	6c 1b       	sub	r22, r28
     d32:	7d 0b       	sbc	r23, r29
     d34:	68 3e       	cpi	r22, 0xE8	; 232
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1107
      if (us_passed >= 1000) {
     d36:	73 40       	sbci	r23, 0x03	; 3
     d38:	d0 f3       	brcs	.-12     	; 0xd2e <delay+0x14>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1108
        ms--;
     d3c:	c8 1a       	sub	r12, r24
     d3e:	d1 08       	sbc	r13, r1
     d40:	e1 08       	sbc	r14, r1
     d42:	f1 08       	sbc	r15, r1
     d44:	c8 51       	subi	r28, 0x18	; 24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1109
        start += 1000;
     d46:	dc 4f       	sbci	r29, 0xFC	; 252
     d48:	c1 14       	cp	r12, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1104
  // from internal, and switch logic is in even though micros isn't.
  void delay(unsigned long ms)
  {
    uint16_t start = (uint16_t)micros();
    while (true) {
      if (ms == 0) break;
     d4a:	d1 04       	cpc	r13, r1
     d4c:	e1 04       	cpc	r14, r1
     d4e:	f1 04       	cpc	r15, r1
     d50:	71 f7       	brne	.-36     	; 0xd2e <delay+0x14>
     d52:	df 91       	pop	r29
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:1112
      if (us_passed >= 1000) {
        ms--;
        start += 1000;
      }
    }
  }
     d54:	cf 91       	pop	r28
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	08 95       	ret

00000d60 <Print::print(__FlashStringHelper const*)>:
print():
     d60:	ef 92       	push	r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:41
    }
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh) {
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	8c 01       	movw	r16, r24
     d6e:	7b 01       	movw	r14, r22
     d70:	d0 e0       	ldi	r29, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:44
  #if defined(__AVR__)
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	f7 01       	movw	r30, r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:46
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     d76:	ec 0f       	add	r30, r28
     d78:	fd 1f       	adc	r31, r29
     d7a:	64 91       	lpm	r22, Z
     d7c:	66 23       	and	r22, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:47
    if (c == 0) {
     d7e:	61 f0       	breq	.+24     	; 0xd98 <Print::print(__FlashStringHelper const*)+0x38>
     d80:	d8 01       	movw	r26, r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:50
      break;
    }
    if (write(c)) {
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	01 90       	ld	r0, Z+
     d88:	f0 81       	ld	r31, Z
     d8a:	e0 2d       	mov	r30, r0
     d8c:	c8 01       	movw	r24, r16
     d8e:	09 95       	icall
     d90:	89 2b       	or	r24, r25
     d92:	11 f0       	breq	.+4      	; 0xd98 <Print::print(__FlashStringHelper const*)+0x38>
     d94:	21 96       	adiw	r28, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:51
      n++;
     d96:	ee cf       	rjmp	.-36     	; 0xd74 <Print::print(__FlashStringHelper const*)+0x14>
     d98:	ce 01       	movw	r24, r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:60
  }
  return n;
  #else
  return print(reinterpret_cast<const char *>(ifsh));
  #endif
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	08 95       	ret

00000da8 <Print::write(unsigned char const*, unsigned int)>:
write():
     da8:	af 92       	push	r10
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	6c 01       	movw	r12, r24
     dbe:	7b 01       	movw	r14, r22
     dc0:	8b 01       	movw	r16, r22
     dc2:	04 0f       	add	r16, r20
     dc4:	15 1f       	adc	r17, r21
     dc6:	eb 01       	movw	r28, r22
     dc8:	5e 01       	movw	r10, r28
     dca:	ae 18       	sub	r10, r14
     dcc:	bf 08       	sbc	r11, r15
     dce:	c0 17       	cp	r28, r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     dd0:	d1 07       	cpc	r29, r17
     dd2:	59 f0       	breq	.+22     	; 0xdea <Print::write(unsigned char const*, unsigned int)+0x42>
     dd4:	69 91       	ld	r22, Y+
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:32
    if (write(*buffer++)) {
     dd6:	d6 01       	movw	r26, r12
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	01 90       	ld	r0, Z+
     dde:	f0 81       	ld	r31, Z
     de0:	e0 2d       	mov	r30, r0
     de2:	c6 01       	movw	r24, r12
     de4:	09 95       	icall
     de6:	89 2b       	or	r24, r25
     de8:	79 f7       	brne	.-34     	; 0xdc8 <Print::write(unsigned char const*, unsigned int)+0x20>
     dea:	c5 01       	movw	r24, r10
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	df 90       	pop	r13
     dfa:	cf 90       	pop	r12
     dfc:	bf 90       	pop	r11
     dfe:	af 90       	pop	r10
     e00:	08 95       	ret

00000e02 <detachInterrupt.part.1>:
detachInterrupt.part.1():
     e02:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:323
#endif


  void detachInterrupt(uint8_t pin) {
    /* Get bit position and check pin validity */
    uint8_t bitpos = digitalPinToBitPosition(pin);
     e04:	fc 01       	movw	r30, r24
     e06:	e0 54       	subi	r30, 0x40	; 64
     e08:	ff 4b       	sbci	r31, 0xBF	; 191
     e0a:	20 81       	ld	r18, Z
     e0c:	2f 3f       	cpi	r18, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:324
    if (bitpos == NOT_A_PIN) {
     e0e:	69 f1       	breq	.+90     	; 0xe6a <detachInterrupt.part.1+0x68>
     e10:	89 56       	subi	r24, 0x69	; 105
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:327
      return;
    }
    uint8_t port = digitalPinToPort(pin);
     e12:	9f 4b       	sbci	r25, 0xBF	; 191
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	e8 2f       	mov	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:328
    uint8_t p = (port << 5) + bitpos;
     e1a:	e2 95       	swap	r30
     e1c:	ee 0f       	add	r30, r30
     e1e:	e0 7e       	andi	r30, 0xE0	; 224
     e20:	e2 0f       	add	r30, r18
     e22:	f0 e0       	ldi	r31, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:329
    *(((volatile uint8_t*) &PORTA_PIN0CTRL) + p) &= 0xF1; // int off....
     e24:	e0 5f       	subi	r30, 0xF0	; 240
     e26:	fb 4f       	sbci	r31, 0xFB	; 251
     e28:	90 81       	ld	r25, Z
     e2a:	91 7f       	andi	r25, 0xF1	; 241
     e2c:	90 83       	st	Z, r25
     e2e:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:330
    *((volatile uint8_t*) ((uint16_t)((port << 4) + 3)))  = (1 << bitpos);// flag clear
     e30:	fc 01       	movw	r30, r24
     e32:	34 e0       	ldi	r19, 0x04	; 4
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	3a 95       	dec	r19
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <detachInterrupt.part.1+0x32>
     e3c:	42 2f       	mov	r20, r18
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <detachInterrupt.part.1+0x46>
     e46:	66 0f       	add	r22, r22
     e48:	2a 95       	dec	r18
     e4a:	ea f7       	brpl	.-6      	; 0xe46 <detachInterrupt.part.1+0x44>
     e4c:	63 83       	std	Z+3, r22	; 0x03
     e4e:	88 0f       	add	r24, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:331
    intFunc[port][bitpos] = 0; // clear pointer
     e50:	99 1f       	adc	r25, r25
     e52:	fc 01       	movw	r30, r24
     e54:	ee 5f       	subi	r30, 0xFE	; 254
     e56:	ff 4b       	sbci	r31, 0xBF	; 191
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	e4 0f       	add	r30, r20
     e64:	f5 1f       	adc	r31, r21
     e66:	10 82       	st	Z, r1
     e68:	11 82       	std	Z+1, r1	; 0x01
     e6a:	08 95       	ret

00000e6c <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/WInterrupts.c:332
  }
     e6c:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:728
      int HardwareSerial::availableForWrite(void) {
        tx_buffer_index_t head;
        tx_buffer_index_t tail;

        TX_BUFFER_ATOMIC {
          head = _tx_buffer_head;
     e6e:	51 89       	ldd	r21, Z+17	; 0x11
     e70:	42 89       	ldd	r20, Z+18	; 0x12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:729
          tail = _tx_buffer_tail;
     e72:	25 2f       	mov	r18, r21
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	84 2f       	mov	r24, r20
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	82 1b       	sub	r24, r18
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:732
        }
        if (head >= tail) {
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e7c:	93 0b       	sbc	r25, r19
     e7e:	54 17       	cp	r21, r20
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:731

        TX_BUFFER_ATOMIC {
          head = _tx_buffer_head;
          tail = _tx_buffer_tail;
        }
        if (head >= tail) {
     e80:	10 f0       	brcs	.+4      	; 0xe86 <HardwareSerial::availableForWrite()+0x1a>
     e82:	cf 96       	adiw	r24, 0x3f	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:732
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     e84:	08 95       	ret
     e86:	01 97       	sbiw	r24, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:734
        }
        return tail - head - 1;
     e88:	08 95       	ret

00000e8a <HardwareSerial::read()>:
read():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:735
      }
     e8a:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:712
      } else {
        return _rx_buffer[_rx_buffer_tail];
      }
    }

    int HardwareSerial::read(void) {
     e8c:	97 85       	ldd	r25, Z+15	; 0x0f
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:714
      // if the head isn't ahead of the tail, we don't have any characters
      if (_rx_buffer_head == _rx_buffer_tail) {
     e8e:	80 89       	ldd	r24, Z+16	; 0x10
     e90:	98 17       	cp	r25, r24
     e92:	61 f0       	breq	.+24     	; 0xeac <HardwareSerial::read()+0x22>
     e94:	a0 89       	ldd	r26, Z+16	; 0x10
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:717
        return -1;
      } else {
        unsigned char c = _rx_buffer[_rx_buffer_tail];
     e96:	ae 0f       	add	r26, r30
     e98:	bf 2f       	mov	r27, r31
     e9a:	b1 1d       	adc	r27, r1
     e9c:	53 96       	adiw	r26, 0x13	; 19
     e9e:	8c 91       	ld	r24, X
     ea0:	90 89       	ldd	r25, Z+16	; 0x10
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:718
        _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	9f 73       	andi	r25, 0x3F	; 63
     ea6:	90 8b       	std	Z+16, r25	; 0x10
     ea8:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:719
        return c;
     eaa:	08 95       	ret
     eac:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:715
    }

    int HardwareSerial::read(void) {
      // if the head isn't ahead of the tail, we don't have any characters
      if (_rx_buffer_head == _rx_buffer_tail) {
        return -1;
     eae:	9f ef       	ldi	r25, 0xFF	; 255
     eb0:	08 95       	ret

00000eb2 <HardwareSerial::peek()>:
peek():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:721
      } else {
        unsigned char c = _rx_buffer[_rx_buffer_tail];
        _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1);   // % SERIAL_RX_BUFFER_SIZE;
        return c;
      }
    }
     eb2:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:704

    int HardwareSerial::available(void) {
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
    }

    int HardwareSerial::peek(void) {
     eb4:	97 85       	ldd	r25, Z+15	; 0x0f
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:705
      if (_rx_buffer_head == _rx_buffer_tail) {
     eb6:	80 89       	ldd	r24, Z+16	; 0x10
     eb8:	98 17       	cp	r25, r24
     eba:	31 f0       	breq	.+12     	; 0xec8 <HardwareSerial::peek()+0x16>
     ebc:	80 89       	ldd	r24, Z+16	; 0x10
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:708
        return -1;
      } else {
        return _rx_buffer[_rx_buffer_tail];
     ebe:	e8 0f       	add	r30, r24
     ec0:	f1 1d       	adc	r31, r1
     ec2:	83 89       	ldd	r24, Z+19	; 0x13
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	08 95       	ret
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:706
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
    }

    int HardwareSerial::peek(void) {
      if (_rx_buffer_head == _rx_buffer_tail) {
        return -1;
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	08 95       	ret

00000ece <HardwareSerial::available()>:
available():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:710
      } else {
        return _rx_buffer[_rx_buffer_tail];
      }
    }
     ece:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:700
      // Note: Does not change output pins
      // though the datasheetsays turning the TX module sets it to input.
      _state = 0;
    }

    int HardwareSerial::available(void) {
     ed0:	97 85       	ldd	r25, Z+15	; 0x0f
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:701
      return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1);   //% SERIAL_RX_BUFFER_SIZE;
     ed2:	20 89       	ldd	r18, Z+16	; 0x10
     ed4:	89 2f       	mov	r24, r25
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	80 5c       	subi	r24, 0xC0	; 192
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	82 1b       	sub	r24, r18
     ede:	91 09       	sbc	r25, r1
     ee0:	8f 73       	andi	r24, 0x3F	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:702
    }
     ee2:	99 27       	eor	r25, r25
     ee4:	08 95       	ret

00000ee6 <HardwareSerial::_poll_tx_data_empty()>:
_poll_tx_data_empty():
     ee6:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:427
        HardwareSerial._tx_buffer_tail = txTail;
      }
    #endif

    // To invoke data empty "interrupt" via a call, use this method
    void HardwareSerial::_poll_tx_data_empty(void) {
     ee8:	0f b6       	in	r0, 0x3f	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:428
      if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     eea:	07 fe       	sbrs	r0, 7
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <HardwareSerial::_poll_tx_data_empty()+0x10>
     eee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     ef2:	88 23       	and	r24, r24
     ef4:	a9 f0       	breq	.+42     	; 0xf20 <_poll_dre_done>
     ef6:	a0 85       	ldd	r26, Z+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:445
        // so we'll have to poll the "data register empty" flag ourselves.
        // If it is set, pretend an interrupt has happened and call the handler
        // to free up space for us.
        // -Spence 10/23/20
        // Invoke interrupt handler only if conditions data register is empty
        if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     ef8:	b1 85       	ldd	r27, Z+9	; 0x09
     efa:	14 96       	adiw	r26, 0x04	; 4
     efc:	8c 91       	ld	r24, X
     efe:	14 97       	sbiw	r26, 0x04	; 4
     f00:	85 ff       	sbrs	r24, 5
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <_poll_dre_done>
     f04:	91 89       	ldd	r25, Z+17	; 0x11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:446
          if (_tx_buffer_head == _tx_buffer_tail) {
     f06:	82 89       	ldd	r24, Z+18	; 0x12
     f08:	98 13       	cpse	r25, r24
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <HardwareSerial::_poll_tx_data_empty()+0x34>
     f0c:	15 96       	adiw	r26, 0x05	; 5
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:448
            // Buffer empty, so disable "data register empty" interrupt
            (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     f0e:	8c 91       	ld	r24, X
     f10:	15 97       	sbiw	r26, 0x05	; 5
     f12:	8f 7d       	andi	r24, 0xDF	; 223
     f14:	15 96       	adiw	r26, 0x05	; 5
     f16:	8c 93       	st	X, r24
     f18:	08 95       	ret
     f1a:	e8 94       	clt
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:466
      #else
                    "rjmp _poll_dre"    "\n\t"
      #endif
                    "_poll_dre_done:"    "\n"
                    ::"z"((uint16_t)thisSerial)
                    : "r18","r19","r24","r25","r26","r27"); // these got saved and restored in the ISR context, but here we don't need top and in many cases no action is needed.
     f1c:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <_poll_dre>

00000f20 <_poll_dre_done>:
     f20:	08 95       	ret

00000f22 <HardwareSerial::write(unsigned char)>:
write():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:475
        }
      }
      // In case interrupts are enabled, the interrupt routine will be invoked by itself
      // Note that this currently does not handle cases where the DRE interruopt becomes
      // disabled, yet you are actually attempting to send. I don't think it can happen.
    }
     f22:	0f 93       	push	r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:768
        // When we get here, nothing is queued anymore (DREIE is disabled) and
        // the hardware finished transmission (TXCIF is set).
      }


      size_t HardwareSerial::write(uint8_t c) {
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:769
        _state |= 1; // Record that we have written to serial since it was begun.
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	99 89       	ldd	r25, Y+17	; 0x11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:774
        // If the buffer and the data register is empty, just write the byte
        // to the data register and be done. This shortcut helps
        // significantly improve the effective data rate at high (>
        // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
        if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     f34:	8a 89       	ldd	r24, Y+18	; 0x12
     f36:	98 13       	cpse	r25, r24
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <HardwareSerial::write(unsigned char)+0x2e>
     f3a:	e8 85       	ldd	r30, Y+8	; 0x08
     f3c:	f9 85       	ldd	r31, Y+9	; 0x09
     f3e:	84 81       	ldd	r24, Z+4	; 0x04
     f40:	85 ff       	sbrs	r24, 5
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <HardwareSerial::write(unsigned char)+0x2e>
     f44:	8e 85       	ldd	r24, Y+14	; 0x0e
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:775
          if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     f46:	81 fd       	sbrc	r24, 1
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <HardwareSerial::write(unsigned char)+0x42>
     f4a:	80 e4       	ldi	r24, 0x40	; 64
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:782
            ctrla &= ~USART_RXCIE_bm;
            ctrla |=  USART_TXCIE_bm;
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
            (*_hwserial_module).CTRLA = ctrla;
          } else {
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
     f4c:	84 83       	std	Z+4, r24	; 0x04
     f4e:	12 c0       	rjmp	.+36     	; 0xf74 <HardwareSerial::write(unsigned char)+0x52>
     f50:	06 2f       	mov	r16, r22
     f52:	19 89       	ldd	r17, Y+17	; 0x11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:803
           * // that the interrupt handler is called in this situation
           * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
           */
          return 1;
        }
        tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     f54:	1f 5f       	subi	r17, 0xFF	; 255
     f56:	1f 73       	andi	r17, 0x3F	; 63
     f58:	8a 89       	ldd	r24, Y+18	; 0x12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:807

        // If the output buffer is full, there's nothing we can do other than to
        // wait for the interrupt handler to empty it a bit (or emulate interrupts)
        while (i == _tx_buffer_tail) {
     f5a:	81 13       	cpse	r24, r17
     f5c:	15 c0       	rjmp	.+42     	; 0xf88 <HardwareSerial::write(unsigned char)+0x66>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:808
          _poll_tx_data_empty();
     f5e:	ce 01       	movw	r24, r28
     f60:	c2 df       	rcall	.-124    	; 0xee6 <HardwareSerial::_poll_tx_data_empty()>
     f62:	fa cf       	rjmp	.-12     	; 0xf58 <HardwareSerial::write(unsigned char)+0x36>
     f64:	85 81       	ldd	r24, Z+5	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:776
        // to the data register and be done. This shortcut helps
        // significantly improve the effective data rate at high (>
        // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
        if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
          if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
            uint8_t ctrla = (*_hwserial_module).CTRLA;
     f66:	8f 77       	andi	r24, 0x7F	; 127
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:777
            ctrla &= ~USART_RXCIE_bm;
     f68:	80 64       	ori	r24, 0x40	; 64
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:778
            ctrla |=  USART_TXCIE_bm;
     f6a:	90 e4       	ldi	r25, 0x40	; 64
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:779
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
     f6c:	94 83       	std	Z+4, r25	; 0x04
     f6e:	e8 85       	ldd	r30, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:780
            (*_hwserial_module).CTRLA = ctrla;
     f70:	f9 85       	ldd	r31, Y+9	; 0x09
     f72:	85 83       	std	Z+5, r24	; 0x05
     f74:	e8 85       	ldd	r30, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:785
          } else {
            (*_hwserial_module).STATUS = USART_TXCIF_bm;
          }
          // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
          (*_hwserial_module).TXDATAL = c;
     f76:	f9 85       	ldd	r31, Y+9	; 0x09
     f78:	62 83       	std	Z+2, r22	; 0x02
     f7a:	81 e0       	ldi	r24, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:823
        } else {
          // Enable "data register empty interrupt"
          (*_hwserial_module).CTRLA |= USART_DREIE_bm;
        }
        return 1;
      }
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	08 95       	ret
     f88:	e9 89       	ldd	r30, Y+17	; 0x11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:810
        // If the output buffer is full, there's nothing we can do other than to
        // wait for the interrupt handler to empty it a bit (or emulate interrupts)
        while (i == _tx_buffer_tail) {
          _poll_tx_data_empty();
        }
        _tx_buffer[_tx_buffer_head] = c;
     f8a:	ec 0f       	add	r30, r28
     f8c:	fd 2f       	mov	r31, r29
     f8e:	f1 1d       	adc	r31, r1
     f90:	ed 5a       	subi	r30, 0xAD	; 173
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	00 83       	st	Z, r16
     f96:	19 8b       	std	Y+17, r17	; 0x11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:811
        _tx_buffer_head = i;
     f98:	8e 85       	ldd	r24, Y+14	; 0x0e
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:812
        if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     f9a:	e8 85       	ldd	r30, Y+8	; 0x08
     f9c:	f9 85       	ldd	r31, Y+9	; 0x09
     f9e:	81 ff       	sbrs	r24, 1
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <HardwareSerial::write(unsigned char)+0x92>
     fa2:	85 81       	ldd	r24, Z+5	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:813
          uint8_t ctrla = (*_hwserial_module).CTRLA;
     fa4:	8f 77       	andi	r24, 0x7F	; 127
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:814
          ctrla &= ~USART_RXCIE_bm;
     fa6:	80 66       	ori	r24, 0x60	; 96
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:815
          ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     fa8:	90 e4       	ldi	r25, 0x40	; 64
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:816
          (*_hwserial_module).STATUS = USART_TXCIF_bm;
     faa:	94 83       	std	Z+4, r25	; 0x04
     fac:	e8 85       	ldd	r30, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:817
          (*_hwserial_module).CTRLA = ctrla;
     fae:	f9 85       	ldd	r31, Y+9	; 0x09
     fb0:	85 83       	std	Z+5, r24	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:820
        } else {
          // Enable "data register empty interrupt"
          (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     fb2:	e3 cf       	rjmp	.-58     	; 0xf7a <HardwareSerial::write(unsigned char)+0x58>
     fb4:	85 81       	ldd	r24, Z+5	; 0x05
     fb6:	80 62       	ori	r24, 0x20	; 32
     fb8:	fb cf       	rjmp	.-10     	; 0xfb0 <HardwareSerial::write(unsigned char)+0x8e>

00000fba <HardwareSerial::flush()>:
flush():
     fba:	cf 93       	push	r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:737
          return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
        }
        return tail - head - 1;
      }

      void HardwareSerial::flush() {
     fbc:	df 93       	push	r29
     fbe:	ec 01       	movw	r28, r24
     fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:741
        // If we have never written a byte, no need to flush. This special
        // case is needed since there is no way to force the TXCIF (transmit
        // complete) bit to 1 during initialization
        if (!_state & 1) {
     fc2:	88 23       	and	r24, r24
     fc4:	59 f0       	breq	.+22     	; 0xfdc <HardwareSerial::flush()+0x22>
     fc6:	e8 85       	ldd	r30, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:756
        // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
        // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
        // and in that case flush(), and write() with full buffer would just straight up hang...

        // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
        while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     fc8:	f9 85       	ldd	r31, Y+9	; 0x09
     fca:	85 81       	ldd	r24, Z+5	; 0x05
     fcc:	85 fd       	sbrc	r24, 5
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <HardwareSerial::flush()+0x1c>
     fd0:	84 81       	ldd	r24, Z+4	; 0x04
     fd2:	86 fd       	sbrc	r24, 6
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <HardwareSerial::flush()+0x22>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:761

          // If interrupts are globally disabled or the and DR empty interrupt is disabled,
          // poll the "data register empty" interrupt flag to prevent deadlock

          _poll_tx_data_empty();
     fd6:	ce 01       	movw	r24, r28
     fd8:	86 df       	rcall	.-244    	; 0xee6 <HardwareSerial::_poll_tx_data_empty()>
     fda:	f5 cf       	rjmp	.-22     	; 0xfc6 <HardwareSerial::flush()+0xc>
     fdc:	df 91       	pop	r29
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/UART.cpp:765
        }
        // When we get here, nothing is queued anymore (DREIE is disabled) and
        // the hardware finished transmission (TXCIF is set).
      }
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <popSleep>:
popSleep():
     fe2:	80 91 ef 46 	lds	r24, 0x46EF	; 0x8046ef <sleepStack>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:678
  #endif
}

void popSleep() {
  #if defined(TWI_USING_WIRE1)
    uint8_t sleepStackLoc = sleepStack;
     fe6:	88 23       	and	r24, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:679
    if (sleepStackLoc > 0) {      // only do something if sleep was enabled
     fe8:	29 f0       	breq	.+10     	; 0xff4 <popSleep+0x12>
     fea:	81 31       	cpi	r24, 0x11	; 17
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:680
      if (sleepStackLoc > 0x10) {   // only decrement if pushed once before
     fec:	20 f0       	brcs	.+8      	; 0xff6 <popSleep+0x14>
     fee:	80 51       	subi	r24, 0x10	; 16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:681
        sleepStackLoc = (sleepStackLoc - 0x10);   // upper nibble
     ff0:	80 93 ef 46 	sts	0x46EF, r24	; 0x8046ef <sleepStack>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:686
      } else {                    // at 0 we are about to put sleep back
        SLPCTRL.CTRLA = sleepStackLoc;  // restore sleep
        sleepStackLoc = 0;              // reset everything
      }
      sleepStack = sleepStackLoc;
     ff4:	08 95       	ret
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:691
    }
  #else
    SLPCTRL.CTRLA = sleepStack;
  #endif
}
     ff6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:683
    uint8_t sleepStackLoc = sleepStack;
    if (sleepStackLoc > 0) {      // only do something if sleep was enabled
      if (sleepStackLoc > 0x10) {   // only decrement if pushed once before
        sleepStackLoc = (sleepStackLoc - 0x10);   // upper nibble
      } else {                    // at 0 we are about to put sleep back
        SLPCTRL.CTRLA = sleepStackLoc;  // restore sleep
     ffa:	80 e0       	ldi	r24, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:684
        sleepStackLoc = 0;              // reset everything
     ffc:	f9 cf       	rjmp	.-14     	; 0xff0 <popSleep+0xe>

00000ffe <TWI_HandleSlaveIRQ>:
TWI_HandleSlaveIRQ():
     ffe:	1f 93       	push	r17
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:513
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     void
 */

void TWI_HandleSlaveIRQ(struct twiData *_data) {
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:521
  // used as a frame pointer and the compiler avoids using it. So, using it comes with a price of pushing/popping
  // r28/r29, as well as ldi the address of the struct into those, so it only makes sense in a few cases like this.
  // Since the Y register is not call-clobbered, it can be considered persistent in this function and has not to
  // be restored after the icall to the user callbacks, unlike Z (which is used for _module and icall).

  _fastPtr_y(_data,_data);  // force _data into Y and instruct to not change Y
    1006:	e8 81       	ld	r30, Y
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:563
  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;
  #endif

  uint8_t action = 0;
  uint8_t clientStatus = _data->_module->SSTATUS;
    1008:	f9 81       	ldd	r31, Y+1	; 0x01
    100a:	83 85       	ldd	r24, Z+11	; 0x0b
    100c:	86 ff       	sbrs	r24, 6
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:565

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
    100e:	47 c0       	rjmp	.+142    	; 0x109e <TWI_HandleSlaveIRQ+0xa0>
    1010:	80 ff       	sbrs	r24, 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:566
    if (clientStatus & TWI_AP_bm) {    // Address bit set
    1012:	35 c0       	rjmp	.+106    	; 0x107e <TWI_HandleSlaveIRQ+0x80>
    1014:	15 85       	ldd	r17, Z+13	; 0x0d
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:567
      uint8_t payload = _data->_module->SDATA;  // read address from data register
    1016:	81 ff       	sbrs	r24, 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:568
      if (clientStatus & TWI_DIR_bm) {  // Master is reading
    1018:	25 c0       	rjmp	.+74     	; 0x1064 <TWI_HandleSlaveIRQ+0x66>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:569
        if ((*rxHead) > 0) {                    // There is no way to identify a REPSTART,
    101a:	8e 81       	ldd	r24, Y+6	; 0x06
    101c:	88 23       	and	r24, r24
    101e:	41 f0       	breq	.+16     	; 0x1030 <TWI_HandleSlaveIRQ+0x32>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:570
          popSleep();                           // (have to treat REPSTART as another pop for sleep)
    1020:	e0 df       	rcall	.-64     	; 0xfe2 <popSleep>
    1022:	eb 85       	ldd	r30, Y+11	; 0x0b
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:571
          if (_data->user_onReceive != NULL) {  // so when a Master Read occurs after a Master write
    1024:	fc 85       	ldd	r31, Y+12	; 0x0c
    1026:	30 97       	sbiw	r30, 0x00	; 0
    1028:	19 f0       	breq	.+6      	; 0x1030 <TWI_HandleSlaveIRQ+0x32>
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:572
            _data->user_onReceive((*rxHead));   // issue a call to the user callback first
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	09 95       	icall
    1030:	1c 83       	std	Y+4, r17	; 0x04
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:575
          }
        }
        (*address) = payload;                   // saving address to expose to the user sketch
    1032:	1d 82       	std	Y+5, r1	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:576
        (*txHead) = 0;                          // reset buffer positions so the Master can start writing at zero.
    1034:	18 86       	std	Y+8, r1	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:577
        (*txTail) = 0;
    1036:	e9 85       	ldd	r30, Y+9	; 0x09
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:579

        if (_data->user_onRequest != NULL) {
    1038:	fa 85       	ldd	r31, Y+10	; 0x0a
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <TWI_HandleSlaveIRQ+0x42>
    103e:	09 95       	icall
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:580
          _data->user_onRequest();
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:582
        }
        if ((*txHead) == 0) {                   // If no data to transmit, send NACK
    1042:	88 23       	and	r24, r24
    1044:	99 f0       	breq	.+38     	; 0x106c <TWI_HandleSlaveIRQ+0x6e>
    1046:	83 e0       	ldi	r24, 0x03	; 3
pushSleep():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:588
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // NACK + "Wait for any Start (S/Sr) condition"
        } else {
          action = TWI_SCMD_RESPONSE_gc;        // "Execute Acknowledge Action succeeded by reception of next byte"
        }
      } else {                          // Master is writing
        action = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
    1048:	90 91 ef 46 	lds	r25, 0x46EF	; 0x8046ef <sleepStack>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:662
 *
 *@return     void
 */
void pushSleep() {
  #if defined(TWI_USING_WIRE1)
    uint8_t sleepStackLoc = sleepStack;
    104c:	99 23       	and	r25, r25
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:663
    if (sleepStackLoc > 0) {                // Increment only if sleep was enabled
    104e:	81 f0       	breq	.+32     	; 0x1070 <TWI_HandleSlaveIRQ+0x72>
    1050:	90 5f       	subi	r25, 0xF0	; 240
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:664
      sleepStackLoc = (sleepStackLoc + 0x10); // use upper nibble to count - max 15 pushes
    1052:	90 93 ef 46 	sts	0x46EF, r25	; 0x8046ef <sleepStack>
TWI_HandleSlaveIRQ():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:669
    } else {
      sleepStackLoc = SLPCTRL.CTRLA;        // save sleep settings to sleepStack
      SLPCTRL.CTRLA = sleepStackLoc & 0x01; // Set to IDLE if sleep was enabled
    }
    sleepStack = sleepStackLoc;
    1056:	e8 81       	ld	r30, Y
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:638
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
        }
      }
    }
  }
  _data->_module->SCTRLB = action;  // using local variable (register) reduces the amount of loading _module
    1058:	f9 81       	ldd	r31, Y+1	; 0x01
    105a:	82 87       	std	Z+10, r24	; 0x0a
    105c:	df 91       	pop	r29
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:642
  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x00;
  #endif
}
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	08 95       	ret
    1064:	1c 83       	std	Y+4, r17	; 0x04
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:589
        } else {
          action = TWI_SCMD_RESPONSE_gc;        // "Execute Acknowledge Action succeeded by reception of next byte"
        }
      } else {                          // Master is writing
        action = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
        (*address) = payload;           // saving address to expose to the user sketch
    1066:	1e 82       	std	Y+6, r1	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:590
        (*rxHead) = 0;                  // reset buffer positions so the Master can start writing at zero.
    1068:	1f 82       	std	Y+7, r1	; 0x07
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:591
        (*rxTail) = 0;
    106a:	ed cf       	rjmp	.-38     	; 0x1046 <TWI_HandleSlaveIRQ+0x48>
    106c:	86 e0       	ldi	r24, 0x06	; 6
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:583

        if (_data->user_onRequest != NULL) {
          _data->user_onRequest();
        }
        if ((*txHead) == 0) {                   // If no data to transmit, send NACK
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // NACK + "Wait for any Start (S/Sr) condition"
    106e:	ec cf       	rjmp	.-40     	; 0x1048 <TWI_HandleSlaveIRQ+0x4a>
pushSleep():
    1070:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:666
  #if defined(TWI_USING_WIRE1)
    uint8_t sleepStackLoc = sleepStack;
    if (sleepStackLoc > 0) {                // Increment only if sleep was enabled
      sleepStackLoc = (sleepStackLoc + 0x10); // use upper nibble to count - max 15 pushes
    } else {
      sleepStackLoc = SLPCTRL.CTRLA;        // save sleep settings to sleepStack
    1074:	29 2f       	mov	r18, r25
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:667
      SLPCTRL.CTRLA = sleepStackLoc & 0x01; // Set to IDLE if sleep was enabled
    1076:	21 70       	andi	r18, 0x01	; 1
    1078:	20 93 50 00 	sts	0x0050, r18	; 0x800050 <__TEXT_REGION_LENGTH__+0x7e0050>
    107c:	ea cf       	rjmp	.-44     	; 0x1052 <TWI_HandleSlaveIRQ+0x54>
TWI_HandleSlaveIRQ():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:595
        (*rxHead) = 0;                  // reset buffer positions so the Master can start writing at zero.
        (*rxTail) = 0;
      }
      pushSleep();
    } else {                            // Stop bit set
      popSleep();
    107e:	b1 df       	rcall	.-158    	; 0xfe2 <popSleep>
    1080:	eb 85       	ldd	r30, Y+11	; 0x0b
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:596
      if (_data->user_onReceive != NULL) {
    1082:	fc 85       	ldd	r31, Y+12	; 0x0c
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	29 f0       	breq	.+10     	; 0x1092 <TWI_HandleSlaveIRQ+0x94>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:597
        if ((*rxHead) > 0) {
    108a:	88 23       	and	r24, r24
    108c:	11 f0       	breq	.+4      	; 0x1092 <TWI_HandleSlaveIRQ+0x94>
    108e:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:598
          _data->user_onReceive((*rxHead));
    1090:	09 95       	icall
    1092:	1e 82       	std	Y+6, r1	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:602
        }
      }
      action = TWI_SCMD_COMPTRANS_gc;  // "Wait for any Start (S/Sr) condition"
      (*rxHead) = 0;
    1094:	1d 82       	std	Y+5, r1	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:603
      (*txHead) = 0;
    1096:	1f 82       	std	Y+7, r1	; 0x07
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:604
      (*rxTail) = 0;
    1098:	18 86       	std	Y+8, r1	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:605
      (*txTail) = 0;
    109a:	82 e0       	ldi	r24, 0x02	; 2
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:622
        if ((*txTail) < (*txHead)) {            // Data is available
          _data->_module->SDATA = txBuffer[(*txTail)];  // Writing to the register to send data
          (*txTail)++;                            // Increment counter for sent bytes
          action = TWI_SCMD_RESPONSE_gc;          // "Execute a byte read operation followed by Acknowledge Action"
        } else {                                // No more data available
          action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
    109c:	dc cf       	rjmp	.-72     	; 0x1056 <TWI_HandleSlaveIRQ+0x58>
    109e:	87 ff       	sbrs	r24, 7
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:607
      (*rxHead) = 0;
      (*txHead) = 0;
      (*rxTail) = 0;
      (*txTail) = 0;
    }
  } else if (clientStatus & TWI_DIF_bm) { // Data bit set
    10a0:	31 c0       	rjmp	.+98     	; 0x1104 <TWI_HandleSlaveIRQ+0x106>
    10a2:	81 ff       	sbrs	r24, 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:608
    if (clientStatus & TWI_DIR_bm) {        // Master is reading
    10a4:	1e c0       	rjmp	.+60     	; 0x10e2 <TWI_HandleSlaveIRQ+0xe4>
    10a6:	88 71       	andi	r24, 0x18	; 24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:609
      if ((clientStatus & (TWI_COLL_bm | TWI_RXACK_bm)) &&  // If a collision was detected, or RXACK bit is set AND
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <TWI_HandleSlaveIRQ+0xba>
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:610
          (true == _data->_bools._ackMatters)) {            // And we have to check for it
    10ac:	83 ff       	sbrs	r24, 3
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:609
      (*rxTail) = 0;
      (*txTail) = 0;
    }
  } else if (clientStatus & TWI_DIF_bm) { // Data bit set
    if (clientStatus & TWI_DIR_bm) {        // Master is reading
      if ((clientStatus & (TWI_COLL_bm | TWI_RXACK_bm)) &&  // If a collision was detected, or RXACK bit is set AND
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <TWI_HandleSlaveIRQ+0xba>
    10b0:	1d 82       	std	Y+5, r1	; 0x05
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:611
          (true == _data->_bools._ackMatters)) {            // And we have to check for it
        (*txHead) = 0;                          // Abort further data writes
    10b2:	87 7f       	andi	r24, 0xF7	; 247
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:612
        _data->_bools._ackMatters = false;      // stop checking for NACK
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	f1 cf       	rjmp	.-30     	; 0x109a <TWI_HandleSlaveIRQ+0x9c>
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:615
        action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
      } else {                                // RXACK bit not set, no COLL
        _data->_bytesTransmittedS++;            // increment bytes transmitted counter (for register model)
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:616
        _data->_bools._ackMatters = true;       // start checking for NACK
    10c0:	88 60       	ori	r24, 0x08	; 8
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	a8 85       	ldd	r26, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:617
        if ((*txTail) < (*txHead)) {            // Data is available
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	a8 17       	cp	r26, r24
    10ca:	38 f7       	brcc	.-50     	; 0x109a <TWI_HandleSlaveIRQ+0x9c>
    10cc:	ac 0f       	add	r26, r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:618
          _data->_module->SDATA = txBuffer[(*txTail)];  // Writing to the register to send data
    10ce:	bd 2f       	mov	r27, r29
    10d0:	b1 1d       	adc	r27, r1
    10d2:	1d 96       	adiw	r26, 0x0d	; 13
    10d4:	8c 91       	ld	r24, X
    10d6:	85 87       	std	Z+13, r24	; 0x0d
    10d8:	88 85       	ldd	r24, Y+8	; 0x08
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:619
          (*txTail)++;                            // Increment counter for sent bytes
    10da:	8f 5f       	subi	r24, 0xFF	; 255
    10dc:	88 87       	std	Y+8, r24	; 0x08
    10de:	83 e0       	ldi	r24, 0x03	; 3
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:631
      uint8_t payload = _data->_module->SDATA;      // reading SDATA will clear the DATA IRQ flag
      if ((*rxHead) < BUFFER_LENGTH) {              // make sure that we don't have a buffer overflow in case Master ignores NACK
        rxBuffer[(*rxHead)] = payload;              // save data
        (*rxHead)++;                                  // Advance Head
        if ((*rxHead) < BUFFER_LENGTH) {              // if buffer is not yet full
          action = TWI_SCMD_RESPONSE_gc;                // "Execute Acknowledge Action succeeded by reception of next byte"
    10e0:	ba cf       	rjmp	.-140    	; 0x1056 <TWI_HandleSlaveIRQ+0x58>
    10e2:	85 85       	ldd	r24, Z+13	; 0x0d
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:626
        } else {                                // No more data available
          action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
        }
      }
    } else {                                  // Master is writing
      uint8_t payload = _data->_module->SDATA;      // reading SDATA will clear the DATA IRQ flag
    10e4:	ee 81       	ldd	r30, Y+6	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:627
      if ((*rxHead) < BUFFER_LENGTH) {              // make sure that we don't have a buffer overflow in case Master ignores NACK
    10e6:	e2 38       	cpi	r30, 0x82	; 130
    10e8:	68 f4       	brcc	.+26     	; 0x1104 <TWI_HandleSlaveIRQ+0x106>
    10ea:	ec 0f       	add	r30, r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:628
        rxBuffer[(*rxHead)] = payload;              // save data
    10ec:	fd 2f       	mov	r31, r29
    10ee:	f1 1d       	adc	r31, r1
    10f0:	e1 57       	subi	r30, 0x71	; 113
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	80 83       	st	Z, r24
    10f6:	8e 81       	ldd	r24, Y+6	; 0x06
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:629
        (*rxHead)++;                                  // Advance Head
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	82 38       	cpi	r24, 0x82	; 130
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:630
        if ((*rxHead) < BUFFER_LENGTH) {              // if buffer is not yet full
    10fe:	78 f3       	brcs	.-34     	; 0x10de <TWI_HandleSlaveIRQ+0xe0>
    1100:	86 e0       	ldi	r24, 0x06	; 6
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:633
          action = TWI_SCMD_RESPONSE_gc;                // "Execute Acknowledge Action succeeded by reception of next byte"
        } else {                                      // else buffer would overflow with next byte
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
    1102:	a9 cf       	rjmp	.-174    	; 0x1056 <TWI_HandleSlaveIRQ+0x58>
    1104:	80 e0       	ldi	r24, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:562

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;
  #endif

  uint8_t action = 0;
    1106:	a7 cf       	rjmp	.-178    	; 0x1056 <TWI_HandleSlaveIRQ+0x58>

00001108 <TwoWire::flush()>:
TWI_Flush():
    1108:	dc 01       	movw	r26, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:130
 */
void TWI_Flush(struct twiData *_data) {
  #if defined(ERRATA_TWI_FLUSH)
    // badCall("The AVR DA-series parts are impacted by an errata that leaves the TWI peripheral in a non-functioning state when using flush.");
    // restarting TWI hardware by hand. Extra size shouldn't matter on DA series
    uint8_t temp_MCTRLA     = _data->_module->MCTRLA;
    110a:	18 96       	adiw	r26, 0x08	; 8
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	93 81       	ldd	r25, Z+3	; 0x03
    1112:	81 85       	ldd	r24, Z+9	; 0x09
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:131
    uint8_t temp_SCTRLA     = _data->_module->SCTRLA;
    1114:	13 82       	std	Z+3, r1	; 0x03
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:132
    _data->_module->MCTRLA  = 0x00;
    1116:	11 86       	std	Z+9, r1	; 0x09
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:133
    _data->_module->SCTRLA  = 0x00;
    1118:	93 83       	std	Z+3, r25	; 0x03
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:134
    _data->_module->MCTRLA  = temp_MCTRLA;
    111a:	91 e0       	ldi	r25, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:135
    _data->_module->MSTATUS = 0x01;  // force TWI state machine into idle state
    111c:	95 83       	std	Z+5, r25	; 0x05
    111e:	81 87       	std	Z+9, r24	; 0x09
flush():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/twi.c:136
    _data->_module->SCTRLA  = temp_SCTRLA;
    1120:	08 95       	ret

00001122 <TwoWire::peek()>:
peek():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:748
 *@return     void
 */
void TwoWire::flush(void) {
  /* Turn off and on TWI module */
  TWI_Flush(&vars);
}
    1122:	9c 01       	movw	r18, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:726
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    1124:	29 56       	subi	r18, 0x69	; 105
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	dc 01       	movw	r26, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:730
    #endif
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    112a:	1f 96       	adiw	r26, 0x0f	; 15
    112c:	ec 91       	ld	r30, X
    112e:	1f 97       	sbiw	r26, 0x0f	; 15
    1130:	1e 96       	adiw	r26, 0x0e	; 14
    1132:	8c 91       	ld	r24, X
    1134:	e8 17       	cp	r30, r24
    1136:	30 f4       	brcc	.+12     	; 0x1144 <TwoWire::peek()+0x22>
    1138:	e2 0f       	add	r30, r18
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:731
    return rxBuffer[(*rxTail)];
    113a:	f3 2f       	mov	r31, r19
    113c:	f1 1d       	adc	r31, r1
    113e:	80 81       	ld	r24, Z
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	08 95       	ret
    1144:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:733
  } else {      // No bytes to read
    return -1;
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <TwoWire::read()>:
read():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:735
  }
}
    114a:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:635
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::read(void) {
    114c:	dc 01       	movw	r26, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:653
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    114e:	a9 56       	subi	r26, 0x69	; 105
    1150:	bf 4f       	sbci	r27, 0xFF	; 255
    1152:	97 85       	ldd	r25, Z+15	; 0x0f
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:658
    #endif
  }


  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    1154:	86 85       	ldd	r24, Z+14	; 0x0e
    1156:	98 17       	cp	r25, r24
    1158:	40 f4       	brcc	.+16     	; 0x116a <TwoWire::read()+0x20>
    115a:	a9 0f       	add	r26, r25
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:659
    uint8_t c = rxBuffer[(*rxTail)];
    115c:	b1 1d       	adc	r27, r1
    115e:	2c 91       	ld	r18, X
    1160:	9f 5f       	subi	r25, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:660
    (*rxTail)++;
    1162:	97 87       	std	Z+15, r25	; 0x0f
    1164:	82 2f       	mov	r24, r18
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:661
    return c;
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	08 95       	ret
    116a:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:663
  } else {                      // No bytes to read. At this point, rxTail moved up to
    return -1;                  // rxHead. To reset both to 0, a MasterRead or AddrWrite has to be called
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	08 95       	ret

00001170 <TwoWire::available()>:
available():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:665
  }
}
    1170:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:603
 *@param      void
 *
 *@return     int
 *@retval     amount of bytes available to read from the host buffer
 */
int TwoWire::available(void) {
    1172:	86 85       	ldd	r24, Z+14	; 0x0e
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:614
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
    1174:	97 85       	ldd	r25, Z+15	; 0x0f
    1176:	89 1b       	sub	r24, r25
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:618
    #endif
  }
  return rxHead;
}
    1178:	99 0b       	sbc	r25, r25
    117a:	08 95       	ret

0000117c <TwoWire::write(unsigned char)>:
write():
    117c:	fc 01       	movw	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:536
 *
 *
 *@return     uint8_t
 *@retval     1 if successful, 0 if the buffer is full
 */
size_t TwoWire::write(uint8_t data) {
    117e:	a5 85       	ldd	r26, Z+13	; 0x0d
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:557
    #endif
  }

  /* Put byte in txBuffer */

  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
    1180:	a2 38       	cpi	r26, 0x82	; 130
    1182:	58 f4       	brcc	.+22     	; 0x119a <TwoWire::write(unsigned char)+0x1e>
    1184:	a8 0f       	add	r26, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:558
    txBuffer[(*txHead)] = data;             // Load data into the buffer
    1186:	b9 2f       	mov	r27, r25
    1188:	b1 1d       	adc	r27, r1
    118a:	55 96       	adiw	r26, 0x15	; 21
    118c:	6c 93       	st	X, r22
    118e:	85 85       	ldd	r24, Z+13	; 0x0d
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:559
    (*txHead)++;                            // advancing the head
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	85 87       	std	Z+13, r24	; 0x0d
    1194:	81 e0       	ldi	r24, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:560
    return 1;
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	08 95       	ret
    119a:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:562
  } else {
    return 0;
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 95       	ret

000011a0 <TwoWire::write(unsigned char const*, unsigned int)>:
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:564
  }
}
    11a0:	bf 92       	push	r11
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:579
 *
 *
 *@return     uint8_t
 *@retval     amount of bytes copied
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	7c 01       	movw	r14, r24
    11b4:	6a 01       	movw	r12, r20
    11b6:	b6 2e       	mov	r11, r22
    11b8:	eb 01       	movw	r28, r22
    11ba:	0c 2f       	mov	r16, r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:581
  twi_buffer_index_t i = 0;
  for (; i < quantity; i++) {
    11bc:	0b 19       	sub	r16, r11
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	0c 15       	cp	r16, r12
    11c2:	1d 05       	cpc	r17, r13
    11c4:	28 f4       	brcc	.+10     	; 0x11d0 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:582
    if (TwoWire::write(*(data++)) == 0)
    11c6:	69 91       	ld	r22, Y+
    11c8:	c7 01       	movw	r24, r14
    11ca:	d8 df       	rcall	.-80     	; 0x117c <TwoWire::write(unsigned char)>
    11cc:	89 2b       	or	r24, r25
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <TwoWire::write(unsigned char const*, unsigned int)+0x1a>
    11d0:	c8 01       	movw	r24, r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/libraries/Wire/src/Wire.cpp:587
      break;   // break if buffer full
  }

  return i;
}
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	08 95       	ret

000011e6 <Print::availableForWrite()>:
availableForWrite():
    11e6:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.h:65
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret

000011ec <KNNClassifier::~KNNClassifier()>:
__base_dtor ():
    11ec:	cf 93       	push	r28
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:33
  _inputLength(inputLength),
  _examples(NULL)
{
}

KNNClassifier::~KNNClassifier()
    11ee:	df 93       	push	r29
    11f0:	2e e4       	ldi	r18, 0x4E	; 78
    11f2:	31 e4       	ldi	r19, 0x41	; 65
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
    11f8:	31 83       	std	Z+1, r19	; 0x01
clearAllClasses():
    11fa:	a4 81       	ldd	r26, Z+4	; 0x04
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:195
  }
}

void KNNClassifier::clearAllClasses()
{
  KNNNode* node = _examples;
    11fc:	b5 81       	ldd	r27, Z+5	; 0x05
    11fe:	10 97       	sbiw	r26, 0x00	; 0
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:197

  while (node != NULL) {
    1200:	89 f0       	breq	.+34     	; 0x1224 <KNNClassifier::~KNNClassifier()+0x38>
next():
    1202:	16 96       	adiw	r26, 0x06	; 6
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/utility/KNNNode.cpp:64
  return _class;
}

KNNNode* KNNNode::next() const
{
  return _next;
    1204:	dc 91       	ld	r29, X
    1206:	16 97       	sbiw	r26, 0x06	; 6
    1208:	17 96       	adiw	r26, 0x07	; 7
    120a:	cc 91       	ld	r28, X
    120c:	17 97       	sbiw	r26, 0x07	; 7
clearAllClasses():
    120e:	ed 91       	ld	r30, X+
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:200
    KNNNode* next = node->next();

    delete node;
    1210:	fc 91       	ld	r31, X
    1212:	11 97       	sbiw	r26, 0x01	; 1
    1214:	02 80       	ldd	r0, Z+2	; 0x02
    1216:	f3 81       	ldd	r31, Z+3	; 0x03
    1218:	e0 2d       	mov	r30, r0
    121a:	cd 01       	movw	r24, r26
    121c:	09 95       	icall
__base_dtor ():
    121e:	ad 2f       	mov	r26, r29
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:202

    node = next;
    1220:	bc 2f       	mov	r27, r28
    1222:	ed cf       	rjmp	.-38     	; 0x11fe <KNNClassifier::~KNNClassifier()+0x12>
    1224:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/Arduino_KNN/src/KNNClassifier.cpp:36
}

KNNClassifier::~KNNClassifier()
{
  clearAllClasses();
}
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <TimeoutTimer::hasTimedOut() const>:
hasTimedOut():
    122a:	0f 93       	push	r16
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:9

TimeoutTimer::TimeoutTimer(const uint32_t ms) : interval_ms(ms) {
    start_ms = millis();
}

bool TimeoutTimer::hasTimedOut() const {
    122c:	1f 93       	push	r17
    122e:	fc 01       	movw	r30, r24
millis():
    1230:	8f b7       	in	r24, 0x3f	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:381
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    1232:	f8 94       	cli
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:382
    cli();
    1234:	40 91 c6 49 	lds	r20, 0x49C6	; 0x8049c6 <timingStruct>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:433
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    1238:	50 91 c7 49 	lds	r21, 0x49C7	; 0x8049c7 <timingStruct+0x1>
    123c:	60 91 c8 49 	lds	r22, 0x49C8	; 0x8049c8 <timingStruct+0x2>
    1240:	70 91 c9 49 	lds	r23, 0x49C9	; 0x8049c9 <timingStruct+0x3>
    1244:	8f bf       	out	0x3f, r24	; 63
hasTimedOut():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:434
      SREG = oldSREG;
    1246:	84 81       	ldd	r24, Z+4	; 0x04
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:10
    return millis() - start_ms > interval_ms;
    1248:	95 81       	ldd	r25, Z+5	; 0x05
    124a:	a6 81       	ldd	r26, Z+6	; 0x06
    124c:	b7 81       	ldd	r27, Z+7	; 0x07
    124e:	48 1b       	sub	r20, r24
    1250:	59 0b       	sbc	r21, r25
    1252:	6a 0b       	sbc	r22, r26
    1254:	7b 0b       	sbc	r23, r27
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	00 81       	ld	r16, Z
    125a:	11 81       	ldd	r17, Z+1	; 0x01
    125c:	22 81       	ldd	r18, Z+2	; 0x02
    125e:	33 81       	ldd	r19, Z+3	; 0x03
    1260:	04 17       	cp	r16, r20
    1262:	15 07       	cpc	r17, r21
    1264:	26 07       	cpc	r18, r22
    1266:	37 07       	cpc	r19, r23
    1268:	08 f0       	brcs	.+2      	; 0x126c <TimeoutTimer::hasTimedOut() const+0x42>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	1f 91       	pop	r17
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:11
}
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret

00001272 <TimeoutTimer::TimeoutTimer(unsigned long)>:
__base_ctor ():
    1272:	fc 01       	movw	r30, r24
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:5
#include "timeout_timer.h"

#include <Arduino.h>

TimeoutTimer::TimeoutTimer(const uint32_t ms) : interval_ms(ms) {
    1274:	40 83       	st	Z, r20
    1276:	51 83       	std	Z+1, r21	; 0x01
    1278:	62 83       	std	Z+2, r22	; 0x02
    127a:	73 83       	std	Z+3, r23	; 0x03
millis():
    127c:	2f b7       	in	r18, 0x3f	; 63
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:381
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    127e:	f8 94       	cli
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:382
    cli();
    1280:	40 91 c6 49 	lds	r20, 0x49C6	; 0x8049c6 <timingStruct>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:433
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    1284:	50 91 c7 49 	lds	r21, 0x49C7	; 0x8049c7 <timingStruct+0x1>
    1288:	60 91 c8 49 	lds	r22, 0x49C8	; 0x8049c8 <timingStruct+0x2>
    128c:	70 91 c9 49 	lds	r23, 0x49C9	; 0x8049c9 <timingStruct+0x3>
    1290:	2f bf       	out	0x3f, r18	; 63
__base_ctor ():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:434
      SREG = oldSREG;
    1292:	44 83       	std	Z+4, r20	; 0x04
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:6
    start_ms = millis();
    1294:	55 83       	std	Z+5, r21	; 0x05
    1296:	66 83       	std	Z+6, r22	; 0x06
    1298:	77 83       	std	Z+7, r23	; 0x07
    129a:	08 95       	ret

0000129c <ctsUpdate()>:
ctsUpdate():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:7
}
    129c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:274
 * falling flank is sometimes missed due to having to use Arduino's
 * attachInterrupt() system. This adds quite a lot of instructions and the CTS
 * pulse is short (some microseconds), which leads to missing the flank.
 */
static inline void ctsUpdate(void) {
    if (!(HWSERIALAT.CTRLA & USART_DREIE_bm) && !(VPORTC.IN & CTS_PIN_bm) &&
    12a0:	85 fd       	sbrc	r24, 5
    12a2:	0d c0       	rjmp	.+26     	; 0x12be <ctsUpdate()+0x22>
    12a4:	54 99       	sbic	0x0a, 4	; 10
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <ctsUpdate()+0x22>
    12a8:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:275
        tx_num_elements > 0) {
    12ac:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    12b0:	89 2b       	or	r24, r25
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:274
 * falling flank is sometimes missed due to having to use Arduino's
 * attachInterrupt() system. This adds quite a lot of instructions and the CTS
 * pulse is short (some microseconds), which leads to missing the flank.
 */
static inline void ctsUpdate(void) {
    if (!(HWSERIALAT.CTRLA & USART_DREIE_bm) && !(VPORTC.IN & CTS_PIN_bm) &&
    12b2:	29 f0       	breq	.+10     	; 0x12be <ctsUpdate()+0x22>
    12b4:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:276
        tx_num_elements > 0) {
        HWSERIALAT.CTRLA |= USART_DREIE_bm;
    12b8:	80 62       	ori	r24, 0x20	; 32
    12ba:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    12be:	08 95       	ret

000012c0 <rtsUpdate()>:
rtsUpdate():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:278
    }
}
    12c0:	80 91 45 43 	lds	r24, 0x4345	; 0x804345 <power_save_mode>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:245
 * target that no more data should be sent
 */
static inline void rtsUpdate(void) {
    // If we are in a power save mode, flow control is disabled until we get a
    // RING0 ack
    if (power_save_mode == 1) {
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	51 f0       	breq	.+20     	; 0x12dc <rtsUpdate()+0x1c>
    12c8:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:253

    if (critical_section_enabled) {
        return;
    }

    if (rx_num_elements < RX_BUFFER_ALMOST_FULL) {
    12cc:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    12d0:	8e 3f       	cpi	r24, 0xFE	; 254
    12d2:	91 40       	sbci	r25, 0x01	; 1
    12d4:	10 f4       	brcc	.+4      	; 0x12da <rtsUpdate()+0x1a>
    12d6:	4f 98       	cbi	0x09, 7	; 9
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:255
        // Space for more data, assert RTS line (active low)
        VPORTC.OUT &= (~RTS_PIN_bm);
    12d8:	08 95       	ret
    12da:	4f 9a       	sbi	0x09, 7	; 9
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:259
    } else {
        // Buffer is filling up, tell the target to stop sending data
        // for now by de-asserting RTS
        VPORTC.OUT |= RTS_PIN_bm;
    12dc:	08 95       	ret

000012de <SequansControllerClass::readByte() [clone .constprop.78]>:
readByte():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:261
    }
}
    12de:	cf 93       	push	r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:600
    sei();

    rtsUpdate();
}

int16_t SequansControllerClass::readByte(void) {
    12e0:	df 93       	push	r29
isRxReady():
    12e2:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:589

bool SequansControllerClass::isTxReady(void) {
    return tx_num_elements < TX_BUFFER_SIZE;
}

bool SequansControllerClass::isRxReady(void) { return rx_num_elements > 0; }
    12e6:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
readByte():
    12ea:	89 2b       	or	r24, r25
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:601

    rtsUpdate();
}

int16_t SequansControllerClass::readByte(void) {
    if (!isRxReady()) {
    12ec:	e9 f0       	breq	.+58     	; 0x1328 <SequansControllerClass::readByte() [clone .constprop.78]+0x4a>
    12ee:	f8 94       	cli
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:607
        return -1;
    }

    // Disable interrupts temporarily here to prevent being interleaved
    // in the middle of updating the tail index
    cli();
    12f0:	c0 91 cb 4b 	lds	r28, 0x4BCB	; 0x804bcb <rx_tail_index>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:608
    const uint16_t next_tail_index = (rx_tail_index + 1) & RX_BUFFER_MASK;
    12f4:	d0 91 cc 4b 	lds	r29, 0x4BCC	; 0x804bcc <rx_tail_index+0x1>
    12f8:	21 96       	adiw	r28, 0x01	; 1
    12fa:	d1 70       	andi	r29, 0x01	; 1
    12fc:	c0 93 cb 4b 	sts	0x4BCB, r28	; 0x804bcb <rx_tail_index>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:609
    rx_tail_index                  = next_tail_index;
    1300:	d0 93 cc 4b 	sts	0x4BCC, r29	; 0x804bcc <rx_tail_index+0x1>
    1304:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:610
    rx_num_elements--;
    1308:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	80 93 cd 4b 	sts	0x4BCD, r24	; 0x804bcd <rx_num_elements>
    1312:	90 93 ce 4b 	sts	0x4BCE, r25	; 0x804bce <rx_num_elements+0x1>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:611
    sei();
    1316:	78 94       	sei
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:613

    rtsUpdate();
    1318:	d3 df       	rcall	.-90     	; 0x12c0 <rtsUpdate()>
    131a:	c5 53       	subi	r28, 0x35	; 53
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:615

    return rx_buffer[next_tail_index];
    131c:	d6 4b       	sbci	r29, 0xB6	; 182
    131e:	88 81       	ld	r24, Y
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:616
}
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret
    1328:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:602
    rtsUpdate();
}

int16_t SequansControllerClass::readByte(void) {
    if (!isRxReady()) {
        return -1;
    132a:	9f ef       	ldi	r25, 0xFF	; 255
    132c:	fa cf       	rjmp	.-12     	; 0x1322 <SequansControllerClass::readByte() [clone .constprop.78]+0x44>

0000132e <SequansControllerClass::clearReceiveBuffer() [clone .constprop.63]>:
clearReceiveBuffer():
    132e:	f8 94       	cli
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:592
}

bool SequansControllerClass::isRxReady(void) { return rx_num_elements > 0; }

void SequansControllerClass::clearReceiveBuffer(void) {
    cli();
    1330:	10 92 cd 4b 	sts	0x4BCD, r1	; 0x804bcd <rx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:593
    rx_num_elements = 0;
    1334:	10 92 ce 4b 	sts	0x4BCE, r1	; 0x804bce <rx_num_elements+0x1>
    1338:	80 91 c4 49 	lds	r24, 0x49C4	; 0x8049c4 <rx_head_index>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:594
    rx_tail_index   = rx_head_index;
    133c:	90 91 c5 49 	lds	r25, 0x49C5	; 0x8049c5 <rx_head_index+0x1>
    1340:	80 93 cb 4b 	sts	0x4BCB, r24	; 0x804bcb <rx_tail_index>
    1344:	90 93 cc 4b 	sts	0x4BCC, r25	; 0x804bcc <rx_tail_index+0x1>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:595
    sei();
    1348:	78 94       	sei
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:597

    rtsUpdate();
    134a:	ba cf       	rjmp	.-140    	; 0x12c0 <rtsUpdate()>

0000134c <CTSInterrupt()>:
CTSInterrupt():
    134c:	5c 9b       	sbis	0x0b, 4	; 11
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:207
 */
SequansControllerClass SequansController = SequansControllerClass::instance();

void CTSInterrupt(void) {

    if (VPORTC.INTFLAGS & CTS_INT_bm) {
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <CTSInterrupt()+0x16>
    1350:	54 9b       	sbis	0x0a, 4	; 10
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:209

        if (VPORTC.IN & CTS_PIN_bm) {
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <CTSInterrupt()+0x18>
    1354:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:212
            // CTS is not asserted (active low) so disable USART data register
            // empty interrupt where the logic is to send more data
            HWSERIALAT.CTRLA &= (~USART_DREIE_bm);
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:216
        } else {
            // CTS is asserted so we enable the USART data register empty
            // interrupt so more data can be sent
            HWSERIALAT.CTRLA |= USART_DREIE_bm;
    135e:	80 e1       	ldi	r24, 0x10	; 16
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:219
        }

        VPORTC.INTFLAGS = CTS_INT_bm;
    1360:	8b b9       	out	0x0b, r24	; 11
    1362:	08 95       	ret
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:221
    }
}
    1364:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:216
            // empty interrupt where the logic is to send more data
            HWSERIALAT.CTRLA &= (~USART_DREIE_bm);
        } else {
            // CTS is asserted so we enable the USART data register empty
            // interrupt so more data can be sent
            HWSERIALAT.CTRLA |= USART_DREIE_bm;
    1368:	80 62       	ori	r24, 0x20	; 32
    136a:	f7 cf       	rjmp	.-18     	; 0x135a <CTSInterrupt()+0xe>

0000136c <timezoneCallback(char*)>:
timezoneCallback():
    136c:	81 e0       	ldi	r24, 0x01	; 1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/lte.cpp:79
        }
    }
}

static void timezoneCallback(__attribute__((unused)) char* buffer) {
    got_timezone = true;
    136e:	80 93 fa 46 	sts	0x46FA, r24	; 0x8046fa <got_timezone>
    1372:	08 95       	ret

00001374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>:
printf():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/lte.cpp:80
}
    1374:	ef 92       	push	r14
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:89
    fdev_set_udata(&file, this->uart);
    vfprintf(&file, str, args);
    fdev_close();
}

void LogClass::printf(const LogLevel level,
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2e 97       	sbiw	r28, 0x0e	; 14
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:93
                      const __FlashStringHelper* str,
                      va_list args) {

    if (log_level < level) {
    138e:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	54 f1       	brlt	.+84     	; 0x13ec <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]+0x78>
    1398:	a0 91 bc 4e 	lds	r26, 0x4EBC	; 0x804ebc <Log>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:97
        return;
    }

    uart->print(getLogLevelString(level));
    139c:	b0 91 bd 4e 	lds	r27, 0x4EBD	; 0x804ebd <Log+0x1>
    13a0:	9c 01       	movw	r18, r24
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	31 09       	sbc	r19, r1
    13a6:	24 30       	cpi	r18, 0x04	; 4
    13a8:	31 05       	cpc	r19, r1
    13aa:	50 f5       	brcc	.+84     	; 0x1400 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]+0x8c>
    13ac:	22 0f       	add	r18, r18
    13ae:	33 1f       	adc	r19, r19
    13b0:	f9 01       	movw	r30, r18
    13b2:	e2 5e       	subi	r30, 0xE2	; 226
    13b4:	fe 4b       	sbci	r31, 0xBE	; 190
    13b6:	20 81       	ld	r18, Z
    13b8:	31 81       	ldd	r19, Z+1	; 0x01
    13ba:	7a 01       	movw	r14, r20
    13bc:	8b 01       	movw	r16, r22
    13be:	b9 01       	movw	r22, r18
    13c0:	cd 01       	movw	r24, r26
    13c2:	ce dc       	rcall	.-1636   	; 0xd60 <Print::print(__FlashStringHelper const*)>
    13c4:	89 e3       	ldi	r24, 0x39	; 57
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:101

    FILE file;

    fdev_setup_stream(&file, fdev_putchar, NULL, _FDEV_SETUP_WRITE);
    13c6:	96 e0       	ldi	r25, 0x06	; 6
    13c8:	89 87       	std	Y+9, r24	; 0x09
    13ca:	9a 87       	std	Y+10, r25	; 0x0a
    13cc:	1b 86       	std	Y+11, r1	; 0x0b
    13ce:	1c 86       	std	Y+12, r1	; 0x0c
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	8c 83       	std	Y+4, r24	; 0x04
    13d4:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:102
    fdev_set_udata(&file, this->uart);
    13d8:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    13dc:	8d 87       	std	Y+13, r24	; 0x0d
    13de:	9e 87       	std	Y+14, r25	; 0x0e
    13e0:	a7 01       	movw	r20, r14
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:103
    vfprintf_P(&file, reinterpret_cast<const char*>(str), args);
    13e2:	b8 01       	movw	r22, r16
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	0e 94 6f 29 	call	0x52de	; 0x52de <vfprintf_P>
    13ec:	2e 96       	adiw	r28, 0x0e	; 14
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:105
    fdev_close();
}
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	08 95       	ret
getLogLevelString():
    1400:	25 ee       	ldi	r18, 0xE5	; 229
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:20
/**
 * @return A pointer to the given @p level flash string.
 */
static const __FlashStringHelper* getLogLevelString(const LogLevel level) {

    switch (level) {
    1402:	3b e0       	ldi	r19, 0x0B	; 11
    1404:	da cf       	rjmp	.-76     	; 0x13ba <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]+0x46>

00001406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>:
infof():
    1406:	cf 93       	push	r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:228

void LogClass::infofv(const char* format, va_list args) {
    this->printf(LogLevel::INFO, format, args);
}

void LogClass::infof(const __FlashStringHelper* format, ...) {
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:231
    va_list args;
    va_start(args, format);
    this->printf(LogLevel::INFO, format, args);
    140e:	ae 01       	movw	r20, r28
    1410:	47 5f       	subi	r20, 0xF7	; 247
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	ab df       	rcall	.-170    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    141e:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:233
    va_end(args);
}
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>:
rawf():
    1424:	cf 93       	push	r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:292

void LogClass::rawfv(const char* format, va_list args) {
    this->printf(LogLevel::NONE, format, args);
}

void LogClass::rawf(const __FlashStringHelper* format, ...) {
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:295
    va_list args;
    va_start(args, format);
    this->printf(LogLevel::NONE, format, args);
    142c:	ae 01       	movw	r20, r28
    142e:	47 5f       	subi	r20, 0xF7	; 247
    1430:	5f 4f       	sbci	r21, 0xFF	; 255
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	9c df       	rcall	.-200    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    143c:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:297
    va_end(args);
}
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <LogClass::debugf(__FlashStringHelper const*, ...) [clone .constprop.67]>:
debugf():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:260

void LogClass::debugfv(const char* format, va_list args) {
    this->printf(LogLevel::DEBUG, format, args);
}

void LogClass::debugf(const __FlashStringHelper* format, ...) {
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:263
    va_list args;
    va_start(args, format);
    this->printf(LogLevel::DEBUG, format, args);
    144a:	ae 01       	movw	r20, r28
    144c:	47 5f       	subi	r20, 0xF7	; 247
    144e:	5f 4f       	sbci	r21, 0xFF	; 255
    1450:	6f 81       	ldd	r22, Y+7	; 0x07
    1452:	78 85       	ldd	r23, Y+8	; 0x08
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	8d df       	rcall	.-230    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    145a:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:265
    va_end(args);
}
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>:
errorf():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:164

void LogClass::errorfv(const char* format, va_list args) {
    this->printf(LogLevel::ERROR, format, args);
}

void LogClass::errorf(const __FlashStringHelper* format, ...) {
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:167
    va_list args;
    va_start(args, format);
    this->printf(LogLevel::ERROR, format, args);
    1468:	ae 01       	movw	r20, r28
    146a:	47 5f       	subi	r20, 0xF7	; 247
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	7e df       	rcall	.-260    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    1478:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:169
    va_end(args);
}
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <LogClass::warnf(__FlashStringHelper const*, ...) [clone .constprop.53]>:
warnf():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:196

void LogClass::warnfv(const char* format, va_list args) {
    this->printf(LogLevel::WARN, format, args);
}

void LogClass::warnf(const __FlashStringHelper* format, ...) {
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:199
    va_list args;
    va_start(args, format);
    this->printf(LogLevel::WARN, format, args);
    1486:	ae 01       	movw	r20, r28
    1488:	47 5f       	subi	r20, 0xF7	; 247
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	6f df       	rcall	.-290    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    1496:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:201
    va_end(args);
}
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <appendDataToTransmitBuffer(char, __file*)>:
appendDataToTransmitBuffer():
    149c:	1f 93       	push	r17
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:456
 * used.
 *
 * @return 0 on sucess, -1 on time out (modem is not ready to accept data).
 */
static int appendDataToTransmitBuffer(const char data,
                                      __attribute__((unused)) FILE* file) {
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	28 97       	sbiw	r28, 0x08	; 8
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	18 2f       	mov	r17, r24
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:461

    // If the transmit buffer is full, we enable the data register empty
    // interrupt so that transmitting occurs and push out data before we append
    // the incoming data
    if (tx_num_elements == TX_BUFFER_SIZE) {
    14ae:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
    14b2:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    14b6:	81 15       	cp	r24, r1
    14b8:	92 40       	sbci	r25, 0x02	; 2
    14ba:	c1 f4       	brne	.+48     	; 0x14ec <appendDataToTransmitBuffer(char, __file*)+0x50>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:463

        TimeoutTimer timeout_timer(1000);
    14bc:	48 ee       	ldi	r20, 0xE8	; 232
    14be:	53 e0       	ldi	r21, 0x03	; 3
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	d4 de       	rcall	.-600    	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:464
        while ((tx_num_elements == TX_BUFFER_SIZE) &&
    14ca:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
    14ce:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    14d2:	81 15       	cp	r24, r1
    14d4:	92 40       	sbci	r25, 0x02	; 2
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <appendDataToTransmitBuffer(char, __file*)+0x46>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:465
               !timeout_timer.hasTimedOut()) {
    14d8:	ce 01       	movw	r24, r28
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	a6 de       	rcall	.-692    	; 0x122a <TimeoutTimer::hasTimedOut() const>
    14de:	88 23       	and	r24, r24
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:464
    // interrupt so that transmitting occurs and push out data before we append
    // the incoming data
    if (tx_num_elements == TX_BUFFER_SIZE) {

        TimeoutTimer timeout_timer(1000);
        while ((tx_num_elements == TX_BUFFER_SIZE) &&
    14e0:	81 f1       	breq	.+96     	; 0x1542 <appendDataToTransmitBuffer(char, __file*)+0xa6>
    14e2:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:485
            }
        }

        // Make sure that that the transmit isn't fired whilst we are updating
        // the transmit buffer
        HWSERIALAT.CTRLA &= ~USART_DREIE_bm;
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    14ec:	f8 94       	cli
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:488
    }

    cli();
    14ee:	80 91 eb 46 	lds	r24, 0x46EB	; 0x8046eb <tx_head_index>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:489
    tx_head_index            = (tx_head_index + 1) & TX_BUFFER_MASK;
    14f2:	90 91 ec 46 	lds	r25, 0x46EC	; 0x8046ec <tx_head_index+0x1>
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	91 70       	andi	r25, 0x01	; 1
    14fa:	80 93 eb 46 	sts	0x46EB, r24	; 0x8046eb <tx_head_index>
    14fe:	90 93 ec 46 	sts	0x46EC, r25	; 0x8046ec <tx_head_index+0x1>
    1502:	e0 91 eb 46 	lds	r30, 0x46EB	; 0x8046eb <tx_head_index>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:490
    tx_buffer[tx_head_index] = data;
    1506:	f0 91 ec 46 	lds	r31, 0x46EC	; 0x8046ec <tx_head_index+0x1>
    150a:	e5 51       	subi	r30, 0x15	; 21
    150c:	fb 4b       	sbci	r31, 0xBB	; 187
    150e:	10 83       	st	Z, r17
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:491
    tx_num_elements++;
    1510:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
    1514:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <tx_num_elements>
    151e:	90 93 ee 46 	sts	0x46EE, r25	; 0x8046ee <tx_num_elements+0x1>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:492
    sei();
    1522:	78 94       	sei
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:494

    ctsUpdate();
    1524:	bb de       	rcall	.-650    	; 0x129c <ctsUpdate()>
    1526:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:496

    return 0;
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	17 c0       	rjmp	.+46     	; 0x155a <appendDataToTransmitBuffer(char, __file*)+0xbe>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:468
        TimeoutTimer timeout_timer(1000);
        while ((tx_num_elements == TX_BUFFER_SIZE) &&
               !timeout_timer.hasTimedOut()) {

            // Wait if the modem can't accept more data
            while (VPORTC.IN & CTS_PIN_bm && !timeout_timer.hasTimedOut()) {
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	7c de       	rcall	.-776    	; 0x122a <TimeoutTimer::hasTimedOut() const>
    1532:	81 11       	cpse	r24, r1
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <appendDataToTransmitBuffer(char, __file*)+0xaa>
_delay_ms():
    1536:	8f e6       	ldi	r24, 0x6F	; 111
/home/mrmemory/.arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino7b1/avr/include/util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1538:	97 e1       	ldi	r25, 0x17	; 23
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <appendDataToTransmitBuffer(char, __file*)+0x9e>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <appendDataToTransmitBuffer(char, __file*)+0xa4>
    1540:	00 00       	nop
appendDataToTransmitBuffer():
    1542:	54 99       	sbic	0x0a, 4	; 10
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:468
    1544:	f3 cf       	rjmp	.-26     	; 0x152c <appendDataToTransmitBuffer(char, __file*)+0x90>
    1546:	54 9b       	sbis	0x0a, 4	; 10
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:472
                _delay_ms(1);
            }

            if (!(VPORTC.IN & CTS_PIN_bm) && !timeout_timer.hasTimedOut()) {
    1548:	0f c0       	rjmp	.+30     	; 0x1568 <appendDataToTransmitBuffer(char, __file*)+0xcc>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:478
                // Enable data register empty interrupt so that the data gets
                // pushed out. We do this in the loop as the CTS interrupt might
                // disable the interrupt logic, so we wait until that is not the
                // case and then start the transmit logic
                HWSERIALAT.CTRLA |= USART_DREIE_bm;
            } else if (timeout_timer.hasTimedOut()) {
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	6d de       	rcall	.-806    	; 0x122a <TimeoutTimer::hasTimedOut() const>
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <appendDataToTransmitBuffer(char, __file*)+0xba>
    1554:	ba cf       	rjmp	.-140    	; 0x14ca <appendDataToTransmitBuffer(char, __file*)+0x2e>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:479
                return -1;
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	28 96       	adiw	r28, 0x08	; 8
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:497
    sei();

    ctsUpdate();

    return 0;
}
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	08 95       	ret
    1568:	ce 01       	movw	r24, r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:472
            // Wait if the modem can't accept more data
            while (VPORTC.IN & CTS_PIN_bm && !timeout_timer.hasTimedOut()) {
                _delay_ms(1);
            }

            if (!(VPORTC.IN & CTS_PIN_bm) && !timeout_timer.hasTimedOut()) {
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	5e de       	rcall	.-836    	; 0x122a <TimeoutTimer::hasTimedOut() const>
    156e:	81 11       	cpse	r24, r1
    1570:	ec cf       	rjmp	.-40     	; 0x154a <appendDataToTransmitBuffer(char, __file*)+0xae>
    1572:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:477
                // Enable data register empty interrupt so that the data gets
                // pushed out. We do this in the loop as the CTS interrupt might
                // disable the interrupt logic, so we wait until that is not the
                // case and then start the transmit logic
                HWSERIALAT.CTRLA |= USART_DREIE_bm;
    1576:	80 62       	ori	r24, 0x20	; 32
    1578:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    157c:	a6 cf       	rjmp	.-180    	; 0x14ca <appendDataToTransmitBuffer(char, __file*)+0x2e>

0000157e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]>:
readResponse():
    157e:	4f 92       	push	r4
    1580:	5f 92       	push	r5
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:825

    return response;
}

ResponseResult
SequansControllerClass::readResponse(char* out_buffer,
    1582:	6f 92       	push	r6
    1584:	7f 92       	push	r7
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	68 97       	sbiw	r28, 0x18	; 24
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	7c 01       	movw	r14, r24
    15a6:	6b 01       	movw	r12, r22
    15a8:	19 82       	std	Y+1, r1	; 0x01
    15aa:	1a 82       	std	Y+2, r1	; 0x02
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:830
                                     const size_t out_buffer_size) {

    // Enough to hold the OK and ERROR termination if the out_buffer is NULL
    // and the result is not needed
    char placeholder_buffer[16] = "";
    15ac:	fe 01       	movw	r30, r28
    15ae:	33 96       	adiw	r30, 0x03	; 3
    15b0:	8e e0       	ldi	r24, 0x0E	; 14
    15b2:	df 01       	movw	r26, r30
    15b4:	1d 92       	st	X+, r1
    15b6:	8a 95       	dec	r24
    15b8:	e9 f7       	brne	.-6      	; 0x15b4 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x36>
    15ba:	e1 14       	cp	r14, r1
    15bc:	f1 04       	cpc	r15, r1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:835

    char* buffer       = placeholder_buffer;
    size_t buffer_size = sizeof(placeholder_buffer);

    if (out_buffer != NULL && buffer_size != 0) {
    15be:	29 f4       	brne	.+10     	; 0x15ca <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x4c>
    15c0:	90 e1       	ldi	r25, 0x10	; 16
    15c2:	c9 2e       	mov	r12, r25
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:833
    // Enough to hold the OK and ERROR termination if the out_buffer is NULL
    // and the result is not needed
    char placeholder_buffer[16] = "";

    char* buffer       = placeholder_buffer;
    size_t buffer_size = sizeof(placeholder_buffer);
    15c4:	d1 2c       	mov	r13, r1
    15c6:	32 97       	sbiw	r30, 0x02	; 2
    15c8:	7f 01       	movw	r14, r30
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:832

    // Enough to hold the OK and ERROR termination if the out_buffer is NULL
    // and the result is not needed
    char placeholder_buffer[16] = "";

    char* buffer       = placeholder_buffer;
    15ca:	f7 01       	movw	r30, r14
    15cc:	ec 0d       	add	r30, r12
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:841
        buffer      = out_buffer;
        buffer_size = out_buffer_size;
    }

    // Safe guard ourselves
    buffer[buffer_size - 1] = '\0';
    15ce:	fd 1d       	adc	r31, r13
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	10 82       	st	Z, r1
    15d4:	10 e0       	ldi	r17, 0x00	; 0
    15d6:	00 e0       	ldi	r16, 0x00	; 0
__base_ctor ():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:843

    size_t i = 0;
    15d8:	80 ed       	ldi	r24, 0xD0	; 208
    15da:	48 2e       	mov	r4, r24
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:5
#include "timeout_timer.h"

#include <Arduino.h>

TimeoutTimer::TimeoutTimer(const uint32_t ms) : interval_ms(ms) {
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	58 2e       	mov	r5, r24
    15e0:	61 2c       	mov	r6, r1
    15e2:	71 2c       	mov	r7, r1
readResponse():
    15e4:	0c 15       	cp	r16, r12
    15e6:	1d 05       	cpc	r17, r13
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:845

    while (i < buffer_size) {
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x6e>
    15ea:	74 c0       	rjmp	.+232    	; 0x16d4 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x156>
__base_ctor ():
    15ec:	49 8a       	std	Y+17, r4	; 0x11
    15ee:	5a 8a       	std	Y+18, r5	; 0x12
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:5
    15f0:	6b 8a       	std	Y+19, r6	; 0x13
    15f2:	7c 8a       	std	Y+20, r7	; 0x14
millis():
    15f4:	2f b7       	in	r18, 0x3f	; 63
    15f6:	f8 94       	cli
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:381
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    15f8:	80 91 c6 49 	lds	r24, 0x49C6	; 0x8049c6 <timingStruct>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:433
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    15fc:	90 91 c7 49 	lds	r25, 0x49C7	; 0x8049c7 <timingStruct+0x1>
    1600:	a0 91 c8 49 	lds	r26, 0x49C8	; 0x8049c8 <timingStruct+0x2>
    1604:	b0 91 c9 49 	lds	r27, 0x49C9	; 0x8049c9 <timingStruct+0x3>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring.c:434
      SREG = oldSREG;
    1608:	2f bf       	out	0x3f, r18	; 63
__base_ctor ():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/timeout_timer.cpp:6
    start_ms = millis();
    160a:	8d 8b       	std	Y+21, r24	; 0x15
    160c:	9e 8b       	std	Y+22, r25	; 0x16
    160e:	af 8b       	std	Y+23, r26	; 0x17
    1610:	b8 8f       	std	Y+24, r27	; 0x18
isRxReady():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:589

bool SequansControllerClass::isTxReady(void) {
    return tx_num_elements < TX_BUFFER_SIZE;
}

bool SequansControllerClass::isRxReady(void) { return rx_num_elements > 0; }
    1612:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
    1616:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
readResponse():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:847

    size_t i = 0;

    while (i < buffer_size) {
        TimeoutTimer timeout_timer(READ_TIMEOUT_MS);
        while (!isRxReady() && !timeout_timer.hasTimedOut()) {
    161a:	89 2b       	or	r24, r25
    161c:	69 f4       	brne	.+26     	; 0x1638 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xba>
    161e:	ce 01       	movw	r24, r28
    1620:	41 96       	adiw	r24, 0x11	; 17
    1622:	03 de       	rcall	.-1018   	; 0x122a <TimeoutTimer::hasTimedOut() const>
    1624:	81 11       	cpse	r24, r1
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xba>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:850
            // We update the CTS here in case the CTS interrupt didn't catch the
            // falling flank
            ctsUpdate();
    1628:	39 de       	rcall	.-910    	; 0x129c <ctsUpdate()>
_delay_ms():
    162a:	8f e6       	ldi	r24, 0x6F	; 111
/home/mrmemory/.arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino7b1/avr/include/util/delay.h:187
    162c:	97 e1       	ldi	r25, 0x17	; 23
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xb0>
    1632:	00 c0       	rjmp	.+0      	; 0x1634 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xb6>
    1634:	00 00       	nop
    1636:	ed cf       	rjmp	.-38     	; 0x1612 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x94>
isRxReady():
    1638:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:589

bool SequansControllerClass::isTxReady(void) {
    return tx_num_elements < TX_BUFFER_SIZE;
}

bool SequansControllerClass::isRxReady(void) { return rx_num_elements > 0; }
    163c:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
readResponse():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:855
            ctsUpdate();

            _delay_ms(1);
        }

        if (!isRxReady() && timeout_timer.hasTimedOut()) {
    1640:	89 2b       	or	r24, r25
    1642:	79 f0       	breq	.+30     	; 0x1662 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xe4>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:859
            return ResponseResult::TIMEOUT;
        }

        buffer[i++] = (char)readByte();
    1644:	4c de       	rcall	.-872    	; 0x12de <SequansControllerClass::readByte() [clone .constprop.78]>
    1646:	58 01       	movw	r10, r16
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	a9 1a       	sub	r10, r25
    164c:	b9 0a       	sbc	r11, r25
    164e:	0e 0d       	add	r16, r14
    1650:	1f 1d       	adc	r17, r15
    1652:	d8 01       	movw	r26, r16
    1654:	8c 93       	st	X, r24
    1656:	b1 e0       	ldi	r27, 0x01	; 1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:863

        // We won't check for the buffer having a termination until at least
        // 2 bytes are in it
        if (i < 2) {
    1658:	ab 16       	cp	r10, r27
    165a:	b1 04       	cpc	r11, r1
    165c:	51 f4       	brne	.+20     	; 0x1672 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xf4>
    165e:	85 01       	movw	r16, r10
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:832

    // Enough to hold the OK and ERROR termination if the out_buffer is NULL
    // and the result is not needed
    char placeholder_buffer[16] = "";

    char* buffer       = placeholder_buffer;
    1660:	c1 cf       	rjmp	.-126    	; 0x15e4 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x66>
    1662:	ce 01       	movw	r24, r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:855
            ctsUpdate();

            _delay_ms(1);
        }

        if (!isRxReady() && timeout_timer.hasTimedOut()) {
    1664:	41 96       	adiw	r24, 0x11	; 17
    1666:	e1 dd       	rcall	.-1086   	; 0x122a <TimeoutTimer::hasTimedOut() const>
    1668:	88 23       	and	r24, r24
    166a:	61 f3       	breq	.-40     	; 0x1644 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xc6>
    166c:	84 e0       	ldi	r24, 0x04	; 4
    166e:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:856
            return ResponseResult::TIMEOUT;
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x11a>
    1672:	01 50       	subi	r16, 0x01	; 1
    1674:	11 09       	sbc	r17, r1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:874
        // "\r\n".
        //
        // Since we post increment the i variable, we have to take that into
        // consideration and look for the last 2 elements after the variable
        // is incremented
        if (buffer[i - 2] == CARRIAGE_RETURN && buffer[i - 1] == LINE_FEED) {
    1676:	f8 01       	movw	r30, r16
    1678:	90 81       	ld	r25, Z
    167a:	9d 30       	cpi	r25, 0x0D	; 13
    167c:	81 f7       	brne	.-32     	; 0x165e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xe0>
    167e:	8a 30       	cpi	r24, 0x0A	; 10
    1680:	71 f7       	brne	.-36     	; 0x165e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xe0>
    1682:	6e ed       	ldi	r22, 0xDE	; 222
    1684:	7b e0       	ldi	r23, 0x0B	; 11
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:876

            char* ok_index = strstr_P(buffer, PSTR("\r\nOK\r\n"));
    1686:	c7 01       	movw	r24, r14
    1688:	0e 94 c5 28 	call	0x518a	; 0x518a <strstr_P>
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	b1 f0       	breq	.+44     	; 0x16bc <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x13e>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:878

            if (ok_index != NULL) {
    1690:	dc 01       	movw	r26, r24
    1692:	1c 92       	st	X, r1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:880
                // Terminate and omit the rest from the OK index.
                *ok_index = '\0';
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:881
                return ResponseResult::OK;
    1698:	68 96       	adiw	r28, 0x18	; 24
    169a:	cd bf       	out	0x3d, r28	; 61
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:897
    }

    // Didn't find the end marker within the number of bytes given for the
    // response. Caller should increase the buffer size.
    return ResponseResult::BUFFER_OVERFLOW;
}
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	7f 90       	pop	r7
    16b4:	6f 90       	pop	r6
    16b6:	5f 90       	pop	r5
    16b8:	4f 90       	pop	r4
    16ba:	08 95       	ret
    16bc:	64 ed       	ldi	r22, 0xD4	; 212
    16be:	7b e0       	ldi	r23, 0x0B	; 11
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:884
                // Terminate and omit the rest from the OK index.
                *ok_index = '\0';
                return ResponseResult::OK;
            }

            char* error_index = strstr_P(buffer, PSTR("\r\nERROR\r\n"));
    16c0:	c7 01       	movw	r24, r14
    16c2:	0e 94 c5 28 	call	0x518a	; 0x518a <strstr_P>
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	51 f2       	breq	.-108    	; 0x165e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0xe0>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:886

            if (error_index != NULL) {
    16ca:	fc 01       	movw	r30, r24
    16cc:	10 82       	st	Z, r1
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:888
                // Terminate and omit the rest from the ERROR index
                *error_index = '\0';
    16ce:	82 e0       	ldi	r24, 0x02	; 2
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:889
                return ResponseResult::ERROR;
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	e2 cf       	rjmp	.-60     	; 0x1698 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x11a>
    16d4:	83 e0       	ldi	r24, 0x03	; 3
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:896
        }
    }

    // Didn't find the end marker within the number of bytes given for the
    // response. Caller should increase the buffer size.
    return ResponseResult::BUFFER_OVERFLOW;
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	df cf       	rjmp	.-66     	; 0x1698 <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]+0x11a>

000016da <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]>:
writeString():
    16da:	0f 93       	push	r16
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:699
    va_end(args);

    return success;
}

bool SequansControllerClass::writeString(const __FlashStringHelper* str,
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	2e 97       	sbiw	r28, 0x0e	; 14
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	83 ec       	ldi	r24, 0xC3	; 195
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:642
bool SequansControllerClass::writeString(const char* str,
                                         const bool append_carriage_return,
                                         const bool is_flash_string,
                                         va_list args) {

    Log.debugf(F("Writing string: "));
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	0c eb       	ldi	r16, 0xBC	; 188
    16f6:	1e e4       	ldi	r17, 0x4E	; 78
    16f8:	1f 93       	push	r17
    16fa:	0f 93       	push	r16
    16fc:	a2 de       	rcall	.-700    	; 0x1442 <LogClass::debugf(__FlashStringHelper const*, ...) [clone .constprop.67]>
    16fe:	8e e4       	ldi	r24, 0x4E	; 78
    1700:	9a e0       	ldi	r25, 0x0A	; 10
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:646

    FILE file;

    fdev_setup_stream(&file,
    1702:	89 87       	std	Y+9, r24	; 0x09
    1704:	9a 87       	std	Y+10, r25	; 0x0a
    1706:	1b 86       	std	Y+11, r1	; 0x0b
    1708:	1c 86       	std	Y+12, r1	; 0x0c
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	8c 83       	std	Y+4, r24	; 0x04
    170e:	1d 86       	std	Y+13, r1	; 0x0d
    1710:	1e 86       	std	Y+14, r1	; 0x0e
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:664
            fdev_close();
            return false;
        }
    } else {

        if (Log.getLogLevel() == LogLevel::DEBUG) {
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	80 91 be 4e 	lds	r24, 0x4EBE	; 0x804ebe <Log+0x2>
    171e:	90 91 bf 4e 	lds	r25, 0x4EBF	; 0x804ebf <Log+0x3>
    1722:	04 97       	sbiw	r24, 0x04	; 4
    1724:	99 f4       	brne	.+38     	; 0x174c <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]+0x72>
rawfv():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:300
    this->printf(LogLevel::NONE, format, args);
    va_end(args);
}

void LogClass::rawfv(const __FlashStringHelper* format, va_list args) {
    this->printf(LogLevel::NONE, format, args);
    1726:	ae 01       	movw	r20, r28
    1728:	46 5e       	subi	r20, 0xE6	; 230
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	6f 89       	ldd	r22, Y+23	; 0x17
    172e:	78 8d       	ldd	r23, Y+24	; 0x18
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	1f de       	rcall	.-962    	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
writeString():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:666
            Log.rawfv(reinterpret_cast<const __FlashStringHelper*>(str), args);
            Log.rawf(F("\r\n"));
    1736:	80 ec       	ldi	r24, 0xC0	; 192
    1738:	9b e0       	ldi	r25, 0x0B	; 11
    173a:	9f 93       	push	r25
    173c:	8f 93       	push	r24
    173e:	1f 93       	push	r17
    1740:	0f 93       	push	r16
    1742:	70 de       	rcall	.-800    	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	ae 01       	movw	r20, r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:669
        }

        if (vfprintf_P(&file, str, args) < 0) {
    174e:	46 5e       	subi	r20, 0xE6	; 230
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	6f 89       	ldd	r22, Y+23	; 0x17
    1754:	78 8d       	ldd	r23, Y+24	; 0x18
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	0e 94 6f 29 	call	0x52de	; 0x52de <vfprintf_P>
    175e:	97 fd       	sbrc	r25, 7
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]+0x96>
    1762:	70 e0       	ldi	r23, 0x00	; 0
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:676
            return false;
        }
    }

    if (append_carriage_return) {
        if (appendDataToTransmitBuffer('\r', NULL)) {
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	8d e0       	ldi	r24, 0x0D	; 13
    1768:	99 de       	rcall	.-718    	; 0x149c <appendDataToTransmitBuffer(char, __file*)>
    176a:	21 e0       	ldi	r18, 0x01	; 1
    176c:	89 2b       	or	r24, r25
    176e:	09 f0       	breq	.+2      	; 0x1772 <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]+0x98>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	82 2f       	mov	r24, r18
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:671
            Log.rawf(F("\r\n"));
        }

        if (vfprintf_P(&file, str, args) < 0) {
            fdev_close();
            return false;
    1774:	2e 96       	adiw	r28, 0x0e	; 14
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:712
                                     true,
                                     args);
    va_end(args);

    return success;
}
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	08 95       	ret

00001784 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
    1784:	fb 01       	movw	r30, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
    1786:	01 90       	ld	r0, Z+
    1788:	00 20       	and	r0, r0
    178a:	e9 f7       	brne	.-6      	; 0x1786 <Print::write(char const*) [clone .part.2]+0x2>
    178c:	31 97       	sbiw	r30, 0x01	; 1
    178e:	af 01       	movw	r20, r30
    1790:	46 1b       	sub	r20, r22
    1792:	57 0b       	sbc	r21, r23
    1794:	dc 01       	movw	r26, r24
    1796:	ed 91       	ld	r30, X+
    1798:	fc 91       	ld	r31, X
    179a:	02 80       	ldd	r0, Z+2	; 0x02
    179c:	f3 81       	ldd	r31, Z+3	; 0x03
    179e:	e0 2d       	mov	r30, r0
    17a0:	09 94       	ijmp

000017a2 <Print::println(char const*)>:
println():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:133
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[]) {
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	8c 01       	movw	r16, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
    17ac:	d0 e0       	ldi	r29, 0x00	; 0
    17ae:	c0 e0       	ldi	r28, 0x00	; 0
write():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
    17b0:	61 15       	cp	r22, r1
    17b2:	71 05       	cpc	r23, r1
    17b4:	11 f0       	breq	.+4      	; 0x17ba <Print::println(char const*)+0x18>
    17b6:	e6 df       	rcall	.-52     	; 0x1784 <Print::write(char const*) [clone .part.2]>
    17b8:	ec 01       	movw	r28, r24
    17ba:	64 e6       	ldi	r22, 0x64	; 100
    17bc:	71 e4       	ldi	r23, 0x41	; 65
    17be:	c8 01       	movw	r24, r16
    17c0:	e1 df       	rcall	.-62     	; 0x1784 <Print::write(char const*) [clone .part.2]>
println():
    17c2:	8c 0f       	add	r24, r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:137
  size_t n = print(c);
  n += println();
  return n;
}
    17c4:	9d 1f       	adc	r25, r29
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <LogClass::raw(String) [clone .constprop.36]>:
raw():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:273
    this->printf(LogLevel::DEBUG, format, args);
}

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }

void LogClass::raw(const String str) {
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
print():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:56
 * explicitly.
 */
LogClass Log(&Serial3);

void LogClass::print(const LogLevel level, const char* str) {
    if (log_level < level) {
    17d4:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
    17d8:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    17dc:	37 fd       	sbrc	r19, 7
    17de:	12 c0       	rjmp	.+36     	; 0x1804 <LogClass::raw(String) [clone .constprop.36]+0x34>
    17e0:	fc 01       	movw	r30, r24
    17e2:	c0 81       	ld	r28, Z
    17e4:	d1 81       	ldd	r29, Z+1	; 0x01
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:60
        return;
    }

    uart->print(getLogLevelString(level));
    17e6:	65 ee       	ldi	r22, 0xE5	; 229
    17e8:	7b e0       	ldi	r23, 0x0B	; 11
    17ea:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    17ee:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    17f2:	b6 da       	rcall	.-2708   	; 0xd60 <Print::print(__FlashStringHelper const*)>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:61
    uart->println(str);
    17f4:	be 01       	movw	r22, r28
    17f6:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    17fa:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
raw():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:275

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }

void LogClass::raw(const String str) {
    this->print(LogLevel::NONE, str.c_str());
}
    17fe:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:61
    if (log_level < level) {
        return;
    }

    uart->print(getLogLevelString(level));
    uart->println(str);
    1800:	cf 91       	pop	r28
print():
    1802:	cf cf       	rjmp	.-98     	; 0x17a2 <Print::println(char const*)>
raw():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:275

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }

void LogClass::raw(const String str) {
    this->print(LogLevel::NONE, str.c_str());
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:271

void LogClass::debugfv(const __FlashStringHelper* format, va_list args) {
    this->printf(LogLevel::DEBUG, format, args);
}

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }
    1808:	08 95       	ret

0000180a <LogClass::raw(char const*) [clone .constprop.82]>:
    180a:	cf 93       	push	r28
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:56
 * explicitly.
 */
LogClass Log(&Serial3);

void LogClass::print(const LogLevel level, const char* str) {
    if (log_level < level) {
    180c:	df 93       	push	r29
print():
    180e:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
    1812:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    1816:	37 fd       	sbrc	r19, 7
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:60
        return;
    }

    uart->print(getLogLevelString(level));
    1818:	10 c0       	rjmp	.+32     	; 0x183a <LogClass::raw(char const*) [clone .constprop.82]+0x30>
    181a:	ec 01       	movw	r28, r24
    181c:	65 ee       	ldi	r22, 0xE5	; 229
    181e:	7b e0       	ldi	r23, 0x0B	; 11
    1820:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    1824:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:61
    uart->println(str);
    1828:	9b da       	rcall	.-2762   	; 0xd60 <Print::print(__FlashStringHelper const*)>
    182a:	be 01       	movw	r22, r28
    182c:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    1830:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
raw():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:271

void LogClass::debugfv(const __FlashStringHelper* format, va_list args) {
    this->printf(LogLevel::DEBUG, format, args);
}

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }
    1834:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:61
    if (log_level < level) {
        return;
    }

    uart->print(getLogLevelString(level));
    uart->println(str);
    1836:	cf 91       	pop	r28
print():
    1838:	b4 cf       	rjmp	.-152    	; 0x17a2 <Print::println(char const*)>
raw():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:271

void LogClass::debugfv(const __FlashStringHelper* format, va_list args) {
    this->printf(LogLevel::DEBUG, format, args);
}

void LogClass::raw(const char str[]) { this->print(LogLevel::NONE, str); }
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:113

size_t Print::print(double n, int digits) {
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh) {
    183e:	08 95       	ret

00001840 <Print::println(__FlashStringHelper const*)>:
println():
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:114
  size_t n = print(ifsh);
    1848:	ec 01       	movw	r28, r24
    184a:	8a da       	rcall	.-2796   	; 0xd60 <Print::print(__FlashStringHelper const*)>
    184c:	8c 01       	movw	r16, r24
write():
    184e:	64 e6       	ldi	r22, 0x64	; 100
    1850:	71 e4       	ldi	r23, 0x41	; 65
    1852:	ce 01       	movw	r24, r28
    1854:	97 df       	rcall	.-210    	; 0x1784 <Print::write(char const*) [clone .part.2]>
println():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/api/Print.cpp:117
  n += println();
  return n;
}
    1856:	80 0f       	add	r24, r16
    1858:	91 1f       	adc	r25, r17
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>:
error():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:149

void LogClass::error(const String str) {
    this->print(LogLevel::ERROR, str.c_str());
}

void LogClass::error(const __FlashStringHelper* str) {
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
print():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:65
    uart->print(getLogLevelString(level));
    uart->println(str);
}

void LogClass::print(const LogLevel level, const __FlashStringHelper* str) {
    if (log_level < level) {
    1868:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
    186c:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    1870:	12 16       	cp	r1, r18
    1872:	13 06       	cpc	r1, r19
    1874:	84 f4       	brge	.+32     	; 0x1896 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]+0x32>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:69
        return;
    }

    uart->print(getLogLevelString(level));
    1876:	ec 01       	movw	r28, r24
    1878:	6b e1       	ldi	r22, 0x1B	; 27
    187a:	72 e0       	ldi	r23, 0x02	; 2
    187c:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    1880:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    1884:	6d da       	rcall	.-2854   	; 0xd60 <Print::print(__FlashStringHelper const*)>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:70
    uart->println(str);
    1886:	be 01       	movw	r22, r28
    1888:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    188c:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
error():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:151
    this->print(LogLevel::ERROR, str.c_str());
}

void LogClass::error(const __FlashStringHelper* str) {
    this->print(LogLevel::ERROR, str);
}
    1890:	df 91       	pop	r29
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:70
    if (log_level < level) {
        return;
    }

    uart->print(getLogLevelString(level));
    uart->println(str);
    1892:	cf 91       	pop	r28
print():
    1894:	d5 cf       	rjmp	.-86     	; 0x1840 <Print::println(__FlashStringHelper const*)>
error():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:151
    this->print(LogLevel::ERROR, str.c_str());
}

void LogClass::error(const __FlashStringHelper* str) {
    this->print(LogLevel::ERROR, str);
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>:
writeCommand():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:807

    return response;
}

ResponseResult
SequansControllerClass::writeCommand(const __FlashStringHelper* command,
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	a1 97       	sbiw	r28, 0x21	; 33
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	c8 a8       	ldd	r12, Y+48	; 0x30
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:720
SequansControllerClass::writeCommand(const char* command,
                                     char* result_buffer,
                                     const size_t result_buffer_size,
                                     const bool is_flash_string,
                                     va_list args) {
    clearReceiveBuffer();
    18b8:	d9 a8       	ldd	r13, Y+49	; 0x31
    18ba:	39 dd       	rcall	.-1422   	; 0x132e <SequansControllerClass::clearReceiveBuffer() [clone .constprop.63]>
getLogLevel():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:118

void LogClass::setLogLevel(const LogLevel log_level) {
    this->log_level = log_level;
}

LogLevel LogClass::getLogLevel(void) { return log_level; }
    18bc:	8c eb       	ldi	r24, 0xBC	; 188
    18be:	9e e4       	ldi	r25, 0x4E	; 78
writeCommand():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:722

    if (Log.getLogLevel() == LogLevel::DEBUG) {
    18c0:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
    18c4:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    18c8:	24 30       	cpi	r18, 0x04	; 4
    18ca:	31 05       	cpc	r19, r1
    18cc:	99 f4       	brne	.+38     	; 0x18f4 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x58>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:724

        Log.debugf(F("Sending AT command: "));
    18ce:	2b ea       	ldi	r18, 0xAB	; 171
    18d0:	3b e0       	ldi	r19, 0x0B	; 11
    18d2:	3f 93       	push	r19
    18d4:	2f 93       	push	r18
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	b3 dd       	rcall	.-1178   	; 0x1442 <LogClass::debugf(__FlashStringHelper const*, ...) [clone .constprop.67]>
rawfv():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/log.cpp:300
    this->printf(LogLevel::NONE, format, args);
    va_end(args);
}

void LogClass::rawfv(const __FlashStringHelper* format, va_list args) {
    this->printf(LogLevel::NONE, format, args);
    18dc:	ae 01       	movw	r20, r28
    18de:	4c 5c       	subi	r20, 0xCC	; 204
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	6e a5       	ldd	r22, Y+46	; 0x2e
    18e4:	7f a5       	ldd	r23, Y+47	; 0x2f
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	44 dd       	rcall	.-1400   	; 0x1374 <LogClass::printf(LogLevel, __FlashStringHelper const*, void*) [clone .constprop.80]>
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
writeCommand():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:737
    }

    ResponseResult response = ResponseResult::OK;

    FILE file;
    fdev_setup_stream(&file,
    18f4:	8e e4       	ldi	r24, 0x4E	; 78
    18f6:	9a e0       	ldi	r25, 0x0A	; 10
    18f8:	8c 8f       	std	Y+28, r24	; 0x1c
    18fa:	9d 8f       	std	Y+29, r25	; 0x1d
    18fc:	1e 8e       	std	Y+30, r1	; 0x1e
    18fe:	1f 8e       	std	Y+31, r1	; 0x1f
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	8f 8b       	std	Y+23, r24	; 0x17
    1904:	18 a2       	std	Y+32, r1	; 0x20
    1906:	19 a2       	std	Y+33, r1	; 0x21
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:751
            if (vfprintf(&file, command, args) < 0) {
                fdev_close();
                return ResponseResult::SERIAL_WRITE_ERROR;
            }
        } else {
            if (vfprintf_P(&file, command, args) < 0) {
    1908:	16 e0       	ldi	r17, 0x06	; 6
    190a:	ae 01       	movw	r20, r28
    190c:	4c 5c       	subi	r20, 0xCC	; 204
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	6e a5       	ldd	r22, Y+46	; 0x2e
    1912:	7f a5       	ldd	r23, Y+47	; 0x2f
    1914:	ce 01       	movw	r24, r28
    1916:	44 96       	adiw	r24, 0x14	; 20
    1918:	0e 94 6f 29 	call	0x52de	; 0x52de <vfprintf_P>
    191c:	97 fd       	sbrc	r25, 7
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:757
                fdev_close();
                return ResponseResult::SERIAL_WRITE_ERROR;
            }
        }

        appendDataToTransmitBuffer('\r', NULL);
    191e:	7e c0       	rjmp	.+252    	; 0x1a1c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x180>
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	8d e0       	ldi	r24, 0x0D	; 13
    1926:	ba dd       	rcall	.-1164   	; 0x149c <appendDataToTransmitBuffer(char, __file*)>
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:758
        response = readResponse(result_buffer, result_buffer_size);
    1928:	6a a9       	ldd	r22, Y+50	; 0x32
    192a:	7b a9       	ldd	r23, Y+51	; 0x33
    192c:	c6 01       	movw	r24, r12
    192e:	27 de       	rcall	.-946    	; 0x157e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]>
    1930:	7c 01       	movw	r14, r24
    1932:	03 97       	sbiw	r24, 0x03	; 3
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:760

        if (response == ResponseResult::BUFFER_OVERFLOW &&
    1934:	c1 f4       	brne	.+48     	; 0x1966 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xca>
    1936:	c1 14       	cp	r12, r1
    1938:	d1 04       	cpc	r13, r1
    193a:	c9 f0       	breq	.+50     	; 0x196e <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xd2>
    193c:	6a ea       	ldi	r22, 0xAA	; 170
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:763
            result_buffer != NULL) {

            strcpy_P(result_buffer, PSTR(""));
    193e:	7b e0       	ldi	r23, 0x0B	; 11
    1940:	c6 01       	movw	r24, r12
    1942:	0e 94 9c 28 	call	0x5138	; 0x5138 <strcpy_P>
    1946:	82 e3       	ldi	r24, 0x32	; 50
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:764
            Log.error(
    1948:	9b e0       	ldi	r25, 0x0B	; 11
    194a:	8c df       	rcall	.-232    	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    194c:	c7 01       	movw	r24, r14
    194e:	a1 96       	adiw	r28, 0x21	; 33
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:822
        true,
        args);
    va_end(args);

    return response;
}
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	e8 16       	cp	r14, r24
    196a:	f1 04       	cpc	r15, r1
    196c:	61 f0       	breq	.+24     	; 0x1986 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xea>
_delay_ms():
    196e:	9f ef       	ldi	r25, 0xFF	; 255
    1970:	ae e9       	ldi	r26, 0x9E	; 158
    1972:	b4 e2       	ldi	r27, 0x24	; 36
    1974:	91 50       	subi	r25, 0x01	; 1
    1976:	a0 40       	sbci	r26, 0x00	; 0
    1978:	b0 40       	sbci	r27, 0x00	; 0
    197a:	e1 f7       	brne	.-8      	; 0x1974 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xd8>
    197c:	00 c0       	rjmp	.+0      	; 0x197e <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xe2>
    197e:	00 00       	nop
    1980:	11 50       	subi	r17, 0x01	; 1
writeCommand():
    1982:	09 f0       	breq	.+2      	; 0x1986 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xea>
    1984:	c2 cf       	rjmp	.-124    	; 0x190a <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x6e>
    1986:	80 91 be 4e 	lds	r24, 0x4EBE	; 0x804ebe <Log+0x2>
    198a:	90 91 bf 4e 	lds	r25, 0x4EBF	; 0x804ebf <Log+0x3>
    198e:	04 97       	sbiw	r24, 0x04	; 4
    1990:	e9 f6       	brne	.-70     	; 0x194c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xb0>
    1992:	19 82       	std	Y+1, r1	; 0x01
    1994:	1a 82       	std	Y+2, r1	; 0x02
    1996:	fe 01       	movw	r30, r28
    1998:	33 96       	adiw	r30, 0x03	; 3
    199a:	81 e1       	ldi	r24, 0x11	; 17
    199c:	df 01       	movw	r26, r30
    199e:	1d 92       	st	X+, r1
    19a0:	8a 95       	dec	r24
    19a2:	e9 f7       	brne	.-6      	; 0x199e <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x102>
    19a4:	8e 01       	movw	r16, r28
    19a6:	0f 5f       	subi	r16, 0xFF	; 255
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
responseResultToString():
    19aa:	b7 e0       	ldi	r27, 0x07	; 7
    19ac:	eb 16       	cp	r14, r27
    19ae:	f1 04       	cpc	r15, r1
    19b0:	88 f4       	brcc	.+34     	; 0x19d4 <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x138>
    19b2:	f7 01       	movw	r30, r14
    19b4:	e2 52       	subi	r30, 0x22	; 34
    19b6:	f3 4f       	sbci	r31, 0xF3	; 243
    19b8:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__tablejump2__>
    19bc:	0b 0d       	add	r16, r11
    19be:	e5 0c       	add	r14, r5
    19c0:	fc 0c       	add	r15, r12
    19c2:	ff 0c       	add	r15, r15
    19c4:	02 0d       	add	r16, r2
    19c6:	05 0d       	add	r16, r5
    19c8:	08 0d       	add	r16, r8
    19ca:	66 e2       	ldi	r22, 0x26	; 38
    19cc:	7b e0       	ldi	r23, 0x0B	; 11
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 9c 28 	call	0x5138	; 0x5138 <strcpy_P>
writeCommand():
    19d4:	1f 93       	push	r17
    19d6:	0f 93       	push	r16
    19d8:	89 e2       	ldi	r24, 0x29	; 41
    19da:	9b e0       	ldi	r25, 0x0B	; 11
    19dc:	9f 93       	push	r25
    19de:	8f 93       	push	r24
    19e0:	8c eb       	ldi	r24, 0xBC	; 188
    19e2:	9e e4       	ldi	r25, 0x4E	; 78
    19e4:	9f 93       	push	r25
    19e6:	8f 93       	push	r24
    19e8:	1d dd       	rcall	.-1478   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	aa cf       	rjmp	.-172    	; 0x194c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xb0>
responseResultToString():
    19f8:	60 e2       	ldi	r22, 0x20	; 32
    19fa:	7b e0       	ldi	r23, 0x0B	; 11
    19fc:	e8 cf       	rjmp	.-48     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
    19fe:	60 e1       	ldi	r22, 0x10	; 16
    1a00:	7b e0       	ldi	r23, 0x0B	; 11
    1a02:	e5 cf       	rjmp	.-54     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
    1a04:	68 e0       	ldi	r22, 0x08	; 8
    1a06:	7b e0       	ldi	r23, 0x0B	; 11
    1a08:	e2 cf       	rjmp	.-60     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
    1a0a:	66 ef       	ldi	r22, 0xF6	; 246
    1a0c:	7a e0       	ldi	r23, 0x0A	; 10
    1a0e:	df cf       	rjmp	.-66     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
    1a10:	63 ee       	ldi	r22, 0xE3	; 227
    1a12:	7a e0       	ldi	r23, 0x0A	; 10
    1a14:	dc cf       	rjmp	.-72     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
    1a16:	6e ed       	ldi	r22, 0xDE	; 222
    1a18:	7a e0       	ldi	r23, 0x0A	; 10
    1a1a:	d9 cf       	rjmp	.-78     	; 0x19ce <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0x132>
writeCommand():
    1a1c:	86 e0       	ldi	r24, 0x06	; 6
    1a1e:	e8 2e       	mov	r14, r24
    1a20:	f1 2c       	mov	r15, r1
    1a22:	94 cf       	rjmp	.-216    	; 0x194c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]+0xb0>

00001a24 <_pinconfigure(unsigned char, unsigned int)>:
__pinconfigure():
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	fc 01       	movw	r30, r24
    1a28:	e7 51       	subi	r30, 0x17	; 23
    1a2a:	ff 4b       	sbci	r31, 0xBF	; 191
    1a2c:	30 81       	ld	r19, Z
    1a2e:	3f 3f       	cpi	r19, 0xFF	; 255
    1a30:	99 f1       	breq	.+102    	; 0x1a98 <_pinconfigure(unsigned char, unsigned int)+0x74>
    1a32:	fc 01       	movw	r30, r24
    1a34:	e0 54       	subi	r30, 0x40	; 64
    1a36:	ff 4b       	sbci	r31, 0xBF	; 191
    1a38:	20 81       	ld	r18, Z
    1a3a:	89 56       	subi	r24, 0x69	; 105
    1a3c:	9f 4b       	sbci	r25, 0xBF	; 191
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ec 91       	ld	r30, X
    1a42:	b0 e2       	ldi	r27, 0x20	; 32
    1a44:	eb 9f       	mul	r30, r27
    1a46:	f0 01       	movw	r30, r0
    1a48:	11 24       	eor	r1, r1
    1a4a:	fc 5f       	subi	r31, 0xFC	; 252
    1a4c:	a6 2f       	mov	r26, r22
    1a4e:	a3 70       	andi	r26, 0x03	; 3
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <_pinconfigure(unsigned char, unsigned int)+0x36>
    1a52:	ae 0f       	add	r26, r30
    1a54:	bf 2f       	mov	r27, r31
    1a56:	b1 1d       	adc	r27, r1
    1a58:	3c 93       	st	X, r19
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	96 95       	lsr	r25
    1a62:	87 95       	ror	r24
    1a64:	89 2b       	or	r24, r25
    1a66:	c1 f0       	breq	.+48     	; 0x1a98 <_pinconfigure(unsigned char, unsigned int)+0x74>
    1a68:	3f b7       	in	r19, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	76 95       	lsr	r23
    1a70:	67 95       	ror	r22
    1a72:	8a 95       	dec	r24
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <_pinconfigure(unsigned char, unsigned int)+0x4a>
    1a76:	82 2f       	mov	r24, r18
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	40 96       	adiw	r24, 0x10	; 16
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f9 1f       	adc	r31, r25
    1a80:	80 81       	ld	r24, Z
    1a82:	63 ff       	sbrs	r22, 3
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <_pinconfigure(unsigned char, unsigned int)+0x6a>
    1a86:	88 7f       	andi	r24, 0xF8	; 248
    1a88:	96 2f       	mov	r25, r22
    1a8a:	97 70       	andi	r25, 0x07	; 7
    1a8c:	89 2b       	or	r24, r25
    1a8e:	60 73       	andi	r22, 0x30	; 48
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <_pinconfigure(unsigned char, unsigned int)+0x70>
    1a92:	88 60       	ori	r24, 0x08	; 8
    1a94:	80 83       	st	Z, r24
    1a96:	3f bf       	out	0x3f, r19	; 63
_pinconfigure():
    1a98:	08 95       	ret

00001a9a <digitalRead>:
check_valid_digital_pin():
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
digitalRead():
    1a9e:	89 32       	cpi	r24, 0x29	; 41
    1aa0:	a8 f4       	brcc	.+42     	; 0x1acc <digitalRead+0x32>
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	e7 51       	subi	r30, 0x17	; 23
    1aa6:	ff 4b       	sbci	r31, 0xBF	; 191
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    1aac:	79 f0       	breq	.+30     	; 0x1acc <digitalRead+0x32>
    1aae:	29 56       	subi	r18, 0x69	; 105
    1ab0:	3f 4b       	sbci	r19, 0xBF	; 191
    1ab2:	d9 01       	movw	r26, r18
    1ab4:	ec 91       	ld	r30, X
    1ab6:	b0 e2       	ldi	r27, 0x20	; 32
    1ab8:	eb 9f       	mul	r30, r27
    1aba:	f0 01       	movw	r30, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	fc 5f       	subi	r31, 0xFC	; 252
    1ac0:	90 85       	ldd	r25, Z+8	; 0x08
    1ac2:	98 23       	and	r25, r24
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	19 f4       	brne	.+6      	; 0x1ace <digitalRead+0x34>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	08 95       	ret
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	08 95       	ret

00001ad0 <digitalWrite>:
digitalWrite():
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	89 32       	cpi	r24, 0x29	; 41
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <digitalWrite+0xe>
    1adc:	bd c0       	rjmp	.+378    	; 0x1c58 <digitalWrite+0x188>
check_valid_digital_pin():
    1ade:	90 e0       	ldi	r25, 0x00	; 0
digitalWrite():
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	a7 51       	subi	r26, 0x17	; 23
    1ae4:	bf 4b       	sbci	r27, 0xBF	; 191
    1ae6:	2c 91       	ld	r18, X
    1ae8:	2f 3f       	cpi	r18, 0xFF	; 255
    1aea:	09 f4       	brne	.+2      	; 0x1aee <digitalWrite+0x1e>
    1aec:	b5 c0       	rjmp	.+362    	; 0x1c58 <digitalWrite+0x188>
    1aee:	8c 01       	movw	r16, r24
    1af0:	09 56       	subi	r16, 0x69	; 105
    1af2:	1f 4b       	sbci	r17, 0xBF	; 191
    1af4:	e8 01       	movw	r28, r16
    1af6:	e8 81       	ld	r30, Y
    1af8:	d0 e2       	ldi	r29, 0x20	; 32
    1afa:	ed 9f       	mul	r30, r29
    1afc:	f0 01       	movw	r30, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	fc 5f       	subi	r31, 0xFC	; 252
    1b02:	61 11       	cpse	r22, r1
    1b04:	33 c0       	rjmp	.+102    	; 0x1b6c <digitalWrite+0x9c>
    1b06:	26 83       	std	Z+6, r18	; 0x06
    1b08:	30 81       	ld	r19, Z
    1b0a:	23 23       	and	r18, r19
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	40 54       	subi	r20, 0x40	; 64
    1b10:	5f 4b       	sbci	r21, 0xBF	; 191
    1b12:	21 11       	cpse	r18, r1
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <digitalWrite+0x68>
    1b16:	ea 01       	movw	r28, r20
    1b18:	28 81       	ld	r18, Y
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	49 f1       	breq	.+82     	; 0x1b70 <digitalWrite+0xa0>
    1b1e:	28 30       	cpi	r18, 0x08	; 8
    1b20:	38 f5       	brcc	.+78     	; 0x1b70 <digitalWrite+0xa0>
    1b22:	70 96       	adiw	r30, 0x10	; 16
    1b24:	e2 0f       	add	r30, r18
    1b26:	f1 1d       	adc	r31, r1
    1b28:	3f b7       	in	r19, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	20 81       	ld	r18, Z
    1b2e:	61 11       	cpse	r22, r1
    1b30:	22 c0       	rjmp	.+68     	; 0x1b76 <digitalWrite+0xa6>
    1b32:	27 7f       	andi	r18, 0xF7	; 247
    1b34:	20 83       	st	Z, r18
    1b36:	3f bf       	out	0x3f, r19	; 63
digitalPinToTimerNow():
    1b38:	fa 01       	movw	r30, r20
    1b3a:	30 81       	ld	r19, Z
    1b3c:	3f 3f       	cpi	r19, 0xFF	; 255
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <digitalWrite+0x72>
    1b40:	8b c0       	rjmp	.+278    	; 0x1c58 <digitalWrite+0x188>
    1b42:	e8 01       	movw	r28, r16
    1b44:	28 81       	ld	r18, Y
    1b46:	36 30       	cpi	r19, 0x06	; 6
    1b48:	58 f5       	brcc	.+86     	; 0x1ba0 <digitalWrite+0xd0>
    1b4a:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
    1b4e:	43 2f       	mov	r20, r19
    1b50:	47 70       	andi	r20, 0x07	; 7
    1b52:	24 13       	cpse	r18, r20
    1b54:	12 c0       	rjmp	.+36     	; 0x1b7a <digitalWrite+0xaa>
turnOffPWM():
    1b56:	ec 91       	ld	r30, X
    1b58:	e5 30       	cpi	r30, 0x05	; 5
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <digitalWrite+0x8e>
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1b62:	e0 95       	com	r30
    1b64:	e8 23       	and	r30, r24
    1b66:	e0 93 01 0a 	sts	0x0A01, r30	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7e0a01>
    1b6a:	76 c0       	rjmp	.+236    	; 0x1c58 <digitalWrite+0x188>
digitalWrite():
    1b6c:	25 83       	std	Z+5, r18	; 0x05
    1b6e:	cc cf       	rjmp	.-104    	; 0x1b08 <digitalWrite+0x38>
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	d9 cf       	rjmp	.-78     	; 0x1b28 <digitalWrite+0x58>
    1b76:	28 60       	ori	r18, 0x08	; 8
    1b78:	dd cf       	rjmp	.-70     	; 0x1b34 <digitalWrite+0x64>
digitalPinToTimerNow():
    1b7a:	38 71       	andi	r19, 0x18	; 24
    1b7c:	69 f4       	brne	.+26     	; 0x1b98 <digitalWrite+0xc8>
    1b7e:	21 30       	cpi	r18, 0x01	; 1
    1b80:	79 f4       	brne	.+30     	; 0x1ba0 <digitalWrite+0xd0>
turnOffPWM():
    1b82:	ec 91       	ld	r30, X
    1b84:	e5 30       	cpi	r30, 0x05	; 5
    1b86:	08 f0       	brcs	.+2      	; 0x1b8a <digitalWrite+0xba>
    1b88:	ee 0f       	add	r30, r30
    1b8a:	80 91 41 0a 	lds	r24, 0x0A41	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1b8e:	e0 95       	com	r30
    1b90:	e8 23       	and	r30, r24
    1b92:	e0 93 41 0a 	sts	0x0A41, r30	; 0x800a41 <__TEXT_REGION_LENGTH__+0x7e0a41>
    1b96:	60 c0       	rjmp	.+192    	; 0x1c58 <digitalWrite+0x188>
digitalPinToTimerNow():
    1b98:	38 31       	cpi	r19, 0x18	; 24
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <digitalWrite+0xd0>
    1b9c:	26 30       	cpi	r18, 0x06	; 6
    1b9e:	89 f3       	breq	.-30     	; 0x1b82 <digitalWrite+0xb2>
    1ba0:	82 59       	subi	r24, 0x92	; 146
    1ba2:	9f 4b       	sbci	r25, 0xBF	; 191
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
    1ba8:	86 ff       	sbrs	r24, 6
    1baa:	3d c0       	rjmp	.+122    	; 0x1c26 <digitalWrite+0x156>
    1bac:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <__TEXT_REGION_LENGTH__+0x7e05e8>
    1bb0:	97 70       	andi	r25, 0x07	; 7
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	4f 7b       	andi	r20, 0xBF	; 191
    1bb8:	94 17       	cp	r25, r20
    1bba:	15 06       	cpc	r1, r21
    1bbc:	a1 f5       	brne	.+104    	; 0x1c26 <digitalWrite+0x156>
turnOffPWM():
    1bbe:	ec 91       	ld	r30, X
    1bc0:	80 91 92 0b 	lds	r24, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1bc4:	8e 23       	and	r24, r30
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <digitalWrite+0xfa>
    1bc8:	47 c0       	rjmp	.+142    	; 0x1c58 <digitalWrite+0x188>
    1bca:	c0 e2       	ldi	r28, 0x20	; 32
    1bcc:	2c 9f       	mul	r18, r28
    1bce:	90 01       	movw	r18, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	3c 5f       	subi	r19, 0xFC	; 252
    1bd4:	e8 30       	cpi	r30, 0x08	; 8
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <digitalWrite+0x10a>
    1bd8:	55 c0       	rjmp	.+170    	; 0x1c84 <digitalWrite+0x1b4>
    1bda:	20 5f       	subi	r18, 0xF0	; 240
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 2f       	mov	r31, r19
    1be2:	f1 1d       	adc	r31, r1
    1be4:	4f b7       	in	r20, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	90 91 80 0b 	lds	r25, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1bec:	9e 7f       	andi	r25, 0xFE	; 254
    1bee:	90 93 80 0b 	sts	0x0B80, r25	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1bf2:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <__TEXT_REGION_LENGTH__+0x7e0b8e>
    1bf6:	90 ff       	sbrs	r25, 0
    1bf8:	fc cf       	rjmp	.-8      	; 0x1bf2 <digitalWrite+0x122>
    1bfa:	20 91 92 0b 	lds	r18, 0x0B92	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	80 95       	com	r24
    1c02:	90 95       	com	r25
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	82 23       	and	r24, r18
    1c08:	93 23       	and	r25, r19
    1c0a:	28 ed       	ldi	r18, 0xD8	; 216
    1c0c:	24 bf       	out	0x34, r18	; 52
    1c0e:	80 93 92 0b 	sts	0x0B92, r24	; 0x800b92 <__TEXT_REGION_LENGTH__+0x7e0b92>
    1c12:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	80 83       	st	Z, r24
    1c22:	4f bf       	out	0x3f, r20	; 63
    1c24:	19 c0       	rjmp	.+50     	; 0x1c58 <digitalWrite+0x188>
digitalPinToTimerNow():
    1c26:	85 ff       	sbrs	r24, 5
    1c28:	15 c0       	rjmp	.+42     	; 0x1c54 <digitalWrite+0x184>
    1c2a:	30 e1       	ldi	r19, 0x10	; 16
    1c2c:	83 9f       	mul	r24, r19
    1c2e:	f0 01       	movw	r30, r0
    1c30:	11 24       	eor	r1, r1
    1c32:	f7 5f       	subi	r31, 0xF7	; 247
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	97 70       	andi	r25, 0x07	; 7
    1c38:	97 30       	cpi	r25, 0x07	; 7
    1c3a:	71 f4       	brne	.+28     	; 0x1c58 <digitalWrite+0x188>
turnOffPWM():
    1c3c:	ec 91       	ld	r30, X
    1c3e:	85 32       	cpi	r24, 0x25	; 37
    1c40:	80 f4       	brcc	.+32     	; 0x1c62 <digitalWrite+0x192>
    1c42:	80 32       	cpi	r24, 0x20	; 32
    1c44:	b0 f4       	brcc	.+44     	; 0x1c72 <digitalWrite+0x1a2>
    1c46:	88 30       	cpi	r24, 0x08	; 8
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <digitalWrite+0x17c>
    1c4a:	9c cf       	rjmp	.-200    	; 0x1b84 <digitalWrite+0xb4>
    1c4c:	80 31       	cpi	r24, 0x10	; 16
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <digitalWrite+0x182>
    1c50:	83 cf       	rjmp	.-250    	; 0x1b58 <digitalWrite+0x88>
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <digitalWrite+0x188>
    1c54:	81 11       	cpse	r24, r1
    1c56:	f2 cf       	rjmp	.-28     	; 0x1c3c <digitalWrite+0x16c>
digitalWrite():
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret
turnOffPWM():
    1c62:	80 34       	cpi	r24, 0x40	; 64
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <digitalWrite+0x198>
    1c66:	ac cf       	rjmp	.-168    	; 0x1bc0 <digitalWrite+0xf0>
    1c68:	80 38       	cpi	r24, 0x80	; 128
    1c6a:	b1 f7       	brne	.-20     	; 0x1c58 <digitalWrite+0x188>
    1c6c:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7e06a0>
    1c70:	f3 cf       	rjmp	.-26     	; 0x1c58 <digitalWrite+0x188>
    1c72:	90 e1       	ldi	r25, 0x10	; 16
    1c74:	89 9f       	mul	r24, r25
    1c76:	f0 01       	movw	r30, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	f7 5f       	subi	r31, 0xF7	; 247
    1c7c:	81 81       	ldd	r24, Z+1	; 0x01
    1c7e:	8f 7e       	andi	r24, 0xEF	; 239
    1c80:	81 83       	std	Z+1, r24	; 0x01
    1c82:	ea cf       	rjmp	.-44     	; 0x1c58 <digitalWrite+0x188>
digitalWrite():
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	e0 e0       	ldi	r30, 0x00	; 0
    1c88:	ad cf       	rjmp	.-166    	; 0x1be4 <digitalWrite+0x114>

00001c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>:
off():
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	91 05       	cpc	r25, r1
    1c90:	30 f4       	brcc	.+12     	; 0x1c9e <LedCtrlClass::off(Led, bool) [clone .constprop.58]+0x14>
    1c92:	86 5e       	subi	r24, 0xE6	; 230
    1c94:	9e 4b       	sbci	r25, 0xBE	; 190
    1c96:	fc 01       	movw	r30, r24
    1c98:	80 81       	ld	r24, Z
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	19 cf       	rjmp	.-462    	; 0x1ad0 <digitalWrite>
getLedPin():
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	fc cf       	rjmp	.-8      	; 0x1c9a <LedCtrlClass::off(Led, bool) [clone .constprop.58]+0x10>

00001ca2 <SequansControllerClass::end() [clone .constprop.28]>:
end():
    1ca2:	e0 e2       	ldi	r30, 0x20	; 32
    1ca4:	f8 e0       	ldi	r31, 0x08	; 8
    1ca6:	15 82       	std	Z+5, r1	; 0x05
    1ca8:	16 82       	std	Z+6, r1	; 0x06
    1caa:	17 82       	std	Z+7, r1	; 0x07
pinConfigure():
    1cac:	62 ec       	ldi	r22, 0xC2	; 194
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	83 e1       	ldi	r24, 0x13	; 19
    1cb2:	b8 de       	rcall	.-656    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
end():
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	85 e1       	ldi	r24, 0x15	; 21
    1cb8:	0b df       	rcall	.-490    	; 0x1ad0 <digitalWrite>
pinConfigure():
    1cba:	62 ec       	ldi	r22, 0xC2	; 194
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	85 e1       	ldi	r24, 0x15	; 21
    1cc0:	b1 de       	rcall	.-670    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    1cc2:	62 ec       	ldi	r22, 0xC2	; 194
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	84 e1       	ldi	r24, 0x14	; 20
    1cc8:	ad de       	rcall	.-678    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
detachInterrupt():
    1cca:	84 e1       	ldi	r24, 0x14	; 20
    1ccc:	9a d8       	rcall	.-3788   	; 0xe02 <detachInterrupt.part.1>
pinConfigure():
    1cce:	62 ec       	ldi	r22, 0xC2	; 194
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	82 e1       	ldi	r24, 0x12	; 18
    1cd4:	a7 de       	rcall	.-690    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
detachInterrupt():
    1cd6:	82 e1       	ldi	r24, 0x12	; 18
    1cd8:	94 d8       	rcall	.-3800   	; 0xe02 <detachInterrupt.part.1>
pinConfigure():
    1cda:	62 ec       	ldi	r22, 0xC2	; 194
    1cdc:	71 e0       	ldi	r23, 0x01	; 1
    1cde:	8e e0       	ldi	r24, 0x0E	; 14
    1ce0:	a1 de       	rcall	.-702    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    1ce2:	62 ec       	ldi	r22, 0xC2	; 194
    1ce4:	71 e0       	ldi	r23, 0x01	; 1
    1ce6:	8f e0       	ldi	r24, 0x0F	; 15
    1ce8:	9d de       	rcall	.-710    	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
end():
    1cea:	10 92 fd 46 	sts	0x46FD, r1	; 0x8046fd <initialized>
    1cee:	08 95       	ret

00001cf0 <waitForResponse(unsigned long)::{lambda()#1}::_FUN()>:
toggle():
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	d3 de       	rcall	.-602    	; 0x1a9a <digitalRead>
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	e9 ce       	rjmp	.-558    	; 0x1ad0 <digitalWrite>

00001cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>:
unregisterCallback():
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	18 2f       	mov	r17, r24
    1d10:	09 2f       	mov	r16, r25
strlen_P():
    1d12:	0e 94 a3 28 	call	0x5146	; 0x5146 <__strlen_P>
    1d16:	6c 01       	movw	r12, r24
    1d18:	94 e8       	ldi	r25, 0x84	; 132
    1d1a:	e9 2e       	mov	r14, r25
    1d1c:	98 e4       	ldi	r25, 0x48	; 72
    1d1e:	f9 2e       	mov	r15, r25
unregisterCallback():
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	c0 e0       	ldi	r28, 0x00	; 0
    1d24:	8c e1       	ldi	r24, 0x1C	; 28
    1d26:	c8 16       	cp	r12, r24
    1d28:	d1 04       	cpc	r13, r1
    1d2a:	08 f4       	brcc	.+2      	; 0x1d2e <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0x30>
    1d2c:	3c c0       	rjmp	.+120    	; 0x1da6 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0xa8>
    1d2e:	80 ec       	ldi	r24, 0xC0	; 192
    1d30:	9a e0       	ldi	r25, 0x0A	; 10
    1d32:	9f 93       	push	r25
    1d34:	8f 93       	push	r24
    1d36:	cc eb       	ldi	r28, 0xBC	; 188
    1d38:	de e4       	ldi	r29, 0x4E	; 78
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	90 db       	rcall	.-2272   	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	8d eb       	ldi	r24, 0xBD	; 189
    1d46:	9a e0       	ldi	r25, 0x0A	; 10
    1d48:	9f 93       	push	r25
    1d4a:	8f 93       	push	r24
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	69 db       	rcall	.-2350   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    1d52:	a1 2f       	mov	r26, r17
    1d54:	b0 2f       	mov	r27, r16
    1d56:	fd 01       	movw	r30, r26
    1d58:	01 90       	ld	r0, Z+
    1d5a:	00 20       	and	r0, r0
    1d5c:	e9 f7       	brne	.-6      	; 0x1d58 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0x5a>
    1d5e:	31 97       	sbiw	r30, 0x01	; 1
    1d60:	ea 1b       	sub	r30, r26
    1d62:	fb 0b       	sbc	r31, r27
    1d64:	1f 92       	push	r1
    1d66:	8b e1       	ldi	r24, 0x1B	; 27
    1d68:	8f 93       	push	r24
    1d6a:	ff 93       	push	r31
    1d6c:	ef 93       	push	r30
    1d6e:	85 e7       	ldi	r24, 0x75	; 117
    1d70:	9a e0       	ldi	r25, 0x0A	; 10
    1d72:	9f 93       	push	r25
    1d74:	8f 93       	push	r24
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	54 db       	rcall	.-2392   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    1d7c:	8d b7       	in	r24, 0x3d	; 61
    1d7e:	9e b7       	in	r25, 0x3e	; 62
    1d80:	42 96       	adiw	r24, 0x12	; 18
    1d82:	8d bf       	out	0x3d, r24	; 61
    1d84:	9e bf       	out	0x3e, r25	; 62
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	08 95       	ret
    1d98:	21 96       	adiw	r28, 0x01	; 1
    1d9a:	90 e2       	ldi	r25, 0x20	; 32
    1d9c:	e9 0e       	add	r14, r25
    1d9e:	f1 1c       	adc	r15, r1
    1da0:	ca 30       	cpi	r28, 0x0A	; 10
    1da2:	d1 05       	cpc	r29, r1
    1da4:	81 f3       	breq	.-32     	; 0x1d86 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0x88>
    1da6:	a6 01       	movw	r20, r12
    1da8:	61 2f       	mov	r22, r17
    1daa:	70 2f       	mov	r23, r16
    1dac:	c7 01       	movw	r24, r14
    1dae:	0e 94 86 28 	call	0x510c	; 0x510c <memcmp_P>
    1db2:	89 2b       	or	r24, r25
    1db4:	89 f7       	brne	.-30     	; 0x1d98 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0x9a>
    1db6:	85 e0       	ldi	r24, 0x05	; 5
    1db8:	cc 0f       	add	r28, r28
    1dba:	dd 1f       	adc	r29, r29
    1dbc:	8a 95       	dec	r24
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0xba>
    1dc0:	cc 57       	subi	r28, 0x7C	; 124
    1dc2:	d7 4b       	sbci	r29, 0xB7	; 183
    1dc4:	1c 8e       	std	Y+28, r1	; 0x1c
    1dc6:	1e 8e       	std	Y+30, r1	; 0x1e
    1dc8:	1f 8e       	std	Y+31, r1	; 0x1f
    1dca:	dd cf       	rjmp	.-70     	; 0x1d86 <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]+0x88>

00001dcc <MqttClientClass::end() [clone .constprop.26]>:
end():
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	5b df       	rcall	.-330    	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    1dd4:	8c ee       	ldi	r24, 0xEC	; 236
    1dd6:	97 e0       	ldi	r25, 0x07	; 7
    1dd8:	92 df       	rcall	.-220    	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    1dda:	87 ed       	ldi	r24, 0xD7	; 215
    1ddc:	97 e0       	ldi	r25, 0x07	; 7
    1dde:	8f df       	rcall	.-226    	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
isConnected():
    1de0:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
end():
    1de4:	88 23       	and	r24, r24
    1de6:	b9 f0       	breq	.+46     	; 0x1e16 <MqttClientClass::end() [clone .constprop.26]+0x4a>
isConnected():
    1de8:	80 91 fc 46 	lds	r24, 0x46FC	; 0x8046fc <connected_to_broker>
end():
    1dec:	88 23       	and	r24, r24
    1dee:	99 f0       	breq	.+38     	; 0x1e16 <MqttClientClass::end() [clone .constprop.26]+0x4a>
    1df0:	1f 92       	push	r1
    1df2:	1f 92       	push	r1
    1df4:	1f 92       	push	r1
    1df6:	1f 92       	push	r1
    1df8:	8f eb       	ldi	r24, 0xBF	; 191
    1dfa:	97 e0       	ldi	r25, 0x07	; 7
    1dfc:	9f 93       	push	r25
    1dfe:	8f 93       	push	r24
    1e00:	8a ec       	ldi	r24, 0xCA	; 202
    1e02:	99 e4       	ldi	r25, 0x49	; 73
    1e04:	9f 93       	push	r25
    1e06:	8f 93       	push	r24
    1e08:	49 dd       	rcall	.-1390   	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    1e0a:	91 da       	rcall	.-2782   	; 0x132e <SequansControllerClass::clearReceiveBuffer() [clone .constprop.63]>
    1e0c:	8d b7       	in	r24, 0x3d	; 61
    1e0e:	9e b7       	in	r25, 0x3e	; 62
    1e10:	08 96       	adiw	r24, 0x08	; 8
    1e12:	8d bf       	out	0x3d, r24	; 61
    1e14:	9e bf       	out	0x3e, r25	; 62
    1e16:	10 92 fc 46 	sts	0x46FC, r1	; 0x8046fc <connected_to_broker>
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	08 95       	ret

00001e1e <connectionStatus(char*)>:
connectionStatus():
    1e1e:	fc 01       	movw	r30, r24
    1e20:	81 81       	ldd	r24, Z+1	; 0x01
    1e22:	8b 7f       	andi	r24, 0xFB	; 251
    1e24:	81 33       	cpi	r24, 0x31	; 49
    1e26:	31 f4       	brne	.+12     	; 0x1e34 <connectionStatus(char*)+0x16>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 fb 46 	sts	0x46FB, r24	; 0x8046fb <is_connected>
on():
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	4e ce       	rjmp	.-868    	; 0x1ad0 <digitalWrite>
connectionStatus():
    1e34:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
    1e38:	88 23       	and	r24, r24
    1e3a:	39 f0       	breq	.+14     	; 0x1e4a <connectionStatus(char*)+0x2c>
    1e3c:	10 92 fb 46 	sts	0x46FB, r1	; 0x8046fb <is_connected>
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	21 df       	rcall	.-446    	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    1e48:	c1 cf       	rjmp	.-126    	; 0x1dcc <MqttClientClass::end() [clone .constprop.26]>
    1e4a:	08 95       	ret

00001e4c <LteClass::end() [clone .constprop.24]>:
end():
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	28 97       	sbiw	r28, 0x08	; 8
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	80 91 fd 46 	lds	r24, 0x46FD	; 0x8046fd <initialized>
    1e5e:	88 23       	and	r24, r24
    1e60:	41 f1       	breq	.+80     	; 0x1eb2 <LteClass::end() [clone .constprop.24]+0x66>
    1e62:	b4 df       	rcall	.-152    	; 0x1dcc <MqttClientClass::end() [clone .constprop.26]>
    1e64:	8a eb       	ldi	r24, 0xBA	; 186
    1e66:	97 e0       	ldi	r25, 0x07	; 7
    1e68:	4a df       	rcall	.-364    	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    1e6a:	1f 92       	push	r1
    1e6c:	1f 92       	push	r1
    1e6e:	1f 92       	push	r1
    1e70:	1f 92       	push	r1
    1e72:	80 eb       	ldi	r24, 0xB0	; 176
    1e74:	97 e0       	ldi	r25, 0x07	; 7
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	8a ec       	ldi	r24, 0xCA	; 202
    1e7c:	99 e4       	ldi	r25, 0x49	; 73
    1e7e:	9f 93       	push	r25
    1e80:	8f 93       	push	r24
    1e82:	0c dd       	rcall	.-1512   	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    1e84:	40 ed       	ldi	r20, 0xD0	; 208
    1e86:	57 e0       	ldi	r21, 0x07	; 7
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	f0 d9       	rcall	.-3104   	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	de bf       	out	0x3e, r29	; 62
isConnected():
    1e96:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
end():
    1e9a:	88 23       	and	r24, r24
    1e9c:	29 f0       	breq	.+10     	; 0x1ea8 <LteClass::end() [clone .constprop.24]+0x5c>
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	c3 d9       	rcall	.-3194   	; 0x122a <TimeoutTimer::hasTimedOut() const>
    1ea4:	88 23       	and	r24, r24
    1ea6:	b9 f3       	breq	.-18     	; 0x1e96 <LteClass::end() [clone .constprop.24]+0x4a>
    1ea8:	8a ea       	ldi	r24, 0xAA	; 170
    1eaa:	97 e0       	ldi	r25, 0x07	; 7
    1eac:	28 df       	rcall	.-432    	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    1eae:	3f da       	rcall	.-2946   	; 0x132e <SequansControllerClass::clearReceiveBuffer() [clone .constprop.63]>
    1eb0:	f8 de       	rcall	.-528    	; 0x1ca2 <SequansControllerClass::end() [clone .constprop.28]>
    1eb2:	10 92 fa 46 	sts	0x46FA, r1	; 0x8046fa <got_timezone>
    1eb6:	10 92 fb 46 	sts	0x46FB, r1	; 0x8046fb <is_connected>
    1eba:	28 96       	adiw	r28, 0x08	; 8
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>:
extractValueFromCommandResponse():
    1ec6:	6f 92       	push	r6
    1ec8:	7f 92       	push	r7
    1eca:	8f 92       	push	r8
    1ecc:	9f 92       	push	r9
    1ece:	af 92       	push	r10
    1ed0:	bf 92       	push	r11
    1ed2:	cf 92       	push	r12
    1ed4:	df 92       	push	r13
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	16 2f       	mov	r17, r22
    1ee8:	5a 01       	movw	r10, r20
    1eea:	49 01       	movw	r8, r18
    1eec:	cd b6       	in	r12, 0x3d	; 61
    1eee:	de b6       	in	r13, 0x3e	; 62
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	00 20       	and	r0, r0
    1ef6:	e9 f7       	brne	.-6      	; 0x1ef2 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x2c>
    1ef8:	31 97       	sbiw	r30, 0x01	; 1
    1efa:	e8 1b       	sub	r30, r24
    1efc:	f9 0b       	sbc	r31, r25
    1efe:	9f 01       	movw	r18, r30
    1f00:	2f 5f       	subi	r18, 0xFF	; 255
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	4d b7       	in	r20, 0x3d	; 61
    1f06:	5e b7       	in	r21, 0x3e	; 62
    1f08:	42 1b       	sub	r20, r18
    1f0a:	53 0b       	sbc	r21, r19
    1f0c:	4d bf       	out	0x3d, r20	; 61
    1f0e:	5e bf       	out	0x3e, r21	; 62
    1f10:	ad b7       	in	r26, 0x3d	; 61
    1f12:	be b7       	in	r27, 0x3e	; 62
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	3d 01       	movw	r6, r26
    1f18:	7d 01       	movw	r14, r26
    1f1a:	ad b7       	in	r26, 0x3d	; 61
    1f1c:	be b7       	in	r27, 0x3e	; 62
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	1c 92       	st	X, r1
    1f22:	d3 01       	movw	r26, r6
    1f24:	e6 0d       	add	r30, r6
    1f26:	f7 1d       	adc	r31, r7
    1f28:	ea 17       	cp	r30, r26
    1f2a:	fb 07       	cpc	r31, r27
    1f2c:	29 f0       	breq	.+10     	; 0x1f38 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x72>
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	1c 92       	st	X, r1
    1f32:	11 97       	sbiw	r26, 0x01	; 1
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	f8 cf       	rjmp	.-16     	; 0x1f28 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x62>
    1f38:	bc 01       	movw	r22, r24
    1f3a:	c3 01       	movw	r24, r6
    1f3c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <strcpy>
    1f40:	00 23       	and	r16, r16
    1f42:	11 f1       	breq	.+68     	; 0x1f88 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xc2>
    1f44:	60 2f       	mov	r22, r16
    1f46:	00 2e       	mov	r0, r16
    1f48:	00 0c       	add	r0, r0
    1f4a:	77 0b       	sbc	r23, r23
    1f4c:	c3 01       	movw	r24, r6
    1f4e:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <strchr>
    1f52:	fc 01       	movw	r30, r24
    1f54:	89 2b       	or	r24, r25
    1f56:	91 f4       	brne	.+36     	; 0x1f7c <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xb6>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	cd be       	out	0x3d, r12	; 61
    1f5c:	de be       	out	0x3e, r13	; 62
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	9f 90       	pop	r9
    1f74:	8f 90       	pop	r8
    1f76:	7f 90       	pop	r7
    1f78:	6f 90       	pop	r6
    1f7a:	08 95       	ret
    1f7c:	7f 01       	movw	r14, r30
    1f7e:	81 91       	ld	r24, Z+
    1f80:	08 17       	cp	r16, r24
    1f82:	e1 f3       	breq	.-8      	; 0x1f7c <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xb6>
    1f84:	80 32       	cpi	r24, 0x20	; 32
    1f86:	d1 f3       	breq	.-12     	; 0x1f7c <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xb6>
    1f88:	6c e2       	ldi	r22, 0x2C	; 44
    1f8a:	70 e0       	ldi	r23, 0x00	; 0
    1f8c:	c7 01       	movw	r24, r14
    1f8e:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <strchr>
    1f92:	37 01       	movw	r6, r14
    1f94:	01 e0       	ldi	r16, 0x01	; 1
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	19 f5       	brne	.+70     	; 0x1fe0 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x11a>
    1f9a:	11 11       	cpse	r17, r1
    1f9c:	dd cf       	rjmp	.-70     	; 0x1f58 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x92>
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	01 90       	ld	r0, Z+
    1fa2:	00 20       	and	r0, r0
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xda>
    1fa6:	cf 01       	movw	r24, r30
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	fc 01       	movw	r30, r24
    1fac:	10 82       	st	Z, r1
    1fae:	6d e0       	ldi	r22, 0x0D	; 13
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	c3 01       	movw	r24, r6
    1fb4:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <strchr>
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xfa>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	1c 92       	st	X, r1
    1fc0:	f3 01       	movw	r30, r6
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	00 20       	and	r0, r0
    1fc6:	e9 f7       	brne	.-6      	; 0x1fc2 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xfc>
    1fc8:	31 97       	sbiw	r30, 0x01	; 1
    1fca:	e6 19       	sub	r30, r6
    1fcc:	f7 09       	sbc	r31, r7
    1fce:	e8 15       	cp	r30, r8
    1fd0:	f9 05       	cpc	r31, r9
    1fd2:	10 f6       	brcc	.-124    	; 0x1f58 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x92>
    1fd4:	b3 01       	movw	r22, r6
    1fd6:	c5 01       	movw	r24, r10
    1fd8:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <strcpy>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	bd cf       	rjmp	.-134    	; 0x1f5a <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x94>
    1fe0:	10 17       	cp	r17, r16
    1fe2:	18 f3       	brcs	.-58     	; 0x1faa <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xe4>
    1fe4:	3c 01       	movw	r6, r24
    1fe6:	bf ef       	ldi	r27, 0xFF	; 255
    1fe8:	6b 1a       	sub	r6, r27
    1fea:	7b 0a       	sbc	r7, r27
    1fec:	6c e2       	ldi	r22, 0x2C	; 44
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	c3 01       	movw	r24, r6
    1ff2:	0e 94 27 2e 	call	0x5c4e	; 0x5c4e <strchr>
    1ff6:	0f 5f       	subi	r16, 0xFF	; 255
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	91 f7       	brne	.-28     	; 0x1fe0 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0x11a>
    1ffc:	d0 cf       	rjmp	.-96     	; 0x1f9e <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]+0xd8>

00001ffe <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]>:
registerCallback():
    1ffe:	8f 92       	push	r8
    2000:	9f 92       	push	r9
    2002:	af 92       	push	r10
    2004:	bf 92       	push	r11
    2006:	cf 92       	push	r12
    2008:	df 92       	push	r13
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	18 2f       	mov	r17, r24
    2018:	09 2f       	mov	r16, r25
    201a:	6b 01       	movw	r12, r22
    201c:	94 2e       	mov	r9, r20
    201e:	82 2e       	mov	r8, r18
    2020:	22 23       	and	r18, r18
    2022:	a1 f1       	breq	.+104    	; 0x208c <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x8e>
strlen_P():
    2024:	0e 94 a3 28 	call	0x5146	; 0x5146 <__strlen_P>
    2028:	ec 01       	movw	r28, r24
registerCallback():
    202a:	4c 97       	sbiw	r24, 0x1c	; 28
    202c:	08 f4       	brcc	.+2      	; 0x2030 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x32>
    202e:	78 c0       	rjmp	.+240    	; 0x2120 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x122>
    2030:	8a e5       	ldi	r24, 0x5A	; 90
    2032:	9a e0       	ldi	r25, 0x0A	; 10
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	9c eb       	ldi	r25, 0xBC	; 188
    203a:	e9 2e       	mov	r14, r25
    203c:	9e e4       	ldi	r25, 0x4E	; 78
    203e:	f9 2e       	mov	r15, r25
    2040:	ff 92       	push	r15
    2042:	ef 92       	push	r14
    2044:	0d da       	rcall	.-3046   	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	87 e5       	ldi	r24, 0x57	; 87
    204c:	9a e0       	ldi	r25, 0x0A	; 10
    204e:	9f 93       	push	r25
    2050:	8f 93       	push	r24
    2052:	ff 92       	push	r15
    2054:	ef 92       	push	r14
    2056:	e6 d9       	rcall	.-3124   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    2058:	ed b7       	in	r30, 0x3d	; 61
    205a:	fe b7       	in	r31, 0x3e	; 62
    205c:	3a 96       	adiw	r30, 0x0a	; 10
    205e:	ed bf       	out	0x3d, r30	; 61
    2060:	fe bf       	out	0x3e, r31	; 62
    2062:	1f 92       	push	r1
    2064:	8b e1       	ldi	r24, 0x1B	; 27
    2066:	8f 93       	push	r24
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	8c e0       	ldi	r24, 0x0C	; 12
    206e:	9a e0       	ldi	r25, 0x0A	; 10
    2070:	9f 93       	push	r25
    2072:	8f 93       	push	r24
    2074:	8c eb       	ldi	r24, 0xBC	; 188
    2076:	9e e4       	ldi	r25, 0x4E	; 78
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	d3 d9       	rcall	.-3162   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    207e:	ed b7       	in	r30, 0x3d	; 61
    2080:	fe b7       	in	r31, 0x3e	; 62
    2082:	38 96       	adiw	r30, 0x08	; 8
    2084:	ed bf       	out	0x3d, r30	; 61
    2086:	fe bf       	out	0x3e, r31	; 62
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	31 c0       	rjmp	.+98     	; 0x20ee <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0xf0>
    208c:	e8 2f       	mov	r30, r24
    208e:	f9 2f       	mov	r31, r25
    2090:	ef 01       	movw	r28, r30
    2092:	09 90       	ld	r0, Y+
    2094:	00 20       	and	r0, r0
    2096:	e9 f7       	brne	.-6      	; 0x2092 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x94>
    2098:	21 97       	sbiw	r28, 0x01	; 1
    209a:	ce 1b       	sub	r28, r30
    209c:	df 0b       	sbc	r29, r31
    209e:	cc 31       	cpi	r28, 0x1C	; 28
    20a0:	d1 05       	cpc	r29, r1
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0xa8>
    20a4:	3d c0       	rjmp	.+122    	; 0x2120 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x122>
    20a6:	8a e5       	ldi	r24, 0x5A	; 90
    20a8:	9a e0       	ldi	r25, 0x0A	; 10
    20aa:	9f 93       	push	r25
    20ac:	8f 93       	push	r24
    20ae:	8c eb       	ldi	r24, 0xBC	; 188
    20b0:	e8 2e       	mov	r14, r24
    20b2:	8e e4       	ldi	r24, 0x4E	; 78
    20b4:	f8 2e       	mov	r15, r24
    20b6:	ff 92       	push	r15
    20b8:	ef 92       	push	r14
    20ba:	d2 d9       	rcall	.-3164   	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	84 e5       	ldi	r24, 0x54	; 84
    20c2:	9a e0       	ldi	r25, 0x0A	; 10
    20c4:	9f 93       	push	r25
    20c6:	8f 93       	push	r24
    20c8:	ff 92       	push	r15
    20ca:	ef 92       	push	r14
    20cc:	ab d9       	rcall	.-3242   	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    20ce:	8d b7       	in	r24, 0x3d	; 61
    20d0:	9e b7       	in	r25, 0x3e	; 62
    20d2:	0a 96       	adiw	r24, 0x0a	; 10
    20d4:	8d bf       	out	0x3d, r24	; 61
    20d6:	9e bf       	out	0x3e, r25	; 62
    20d8:	c4 cf       	rjmp	.-120    	; 0x2062 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x64>
    20da:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <strcmp>
    20de:	36 c0       	rjmp	.+108    	; 0x214c <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x14e>
    20e0:	f7 01       	movw	r30, r14
    20e2:	ec 57       	subi	r30, 0x7C	; 124
    20e4:	f7 4b       	sbci	r31, 0xB7	; 183
    20e6:	c6 8e       	std	Z+30, r12	; 0x1e
    20e8:	d7 8e       	std	Z+31, r13	; 0x1f
    20ea:	95 8e       	std	Z+29, r9	; 0x1d
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ff 90       	pop	r15
    20f8:	ef 90       	pop	r14
    20fa:	df 90       	pop	r13
    20fc:	cf 90       	pop	r12
    20fe:	bf 90       	pop	r11
    2100:	af 90       	pop	r10
    2102:	9f 90       	pop	r9
    2104:	8f 90       	pop	r8
    2106:	08 95       	ret
    2108:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <strcpy>
    210c:	3d c0       	rjmp	.+122    	; 0x2188 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x18a>
    210e:	2f 5f       	subi	r18, 0xFF	; 255
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	2a 30       	cpi	r18, 0x0A	; 10
    2114:	31 05       	cpc	r19, r1
    2116:	29 f5       	brne	.+74     	; 0x2162 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x164>
    2118:	82 ed       	ldi	r24, 0xD2	; 210
    211a:	99 e0       	ldi	r25, 0x09	; 9
    211c:	a3 db       	rcall	.-2234   	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    211e:	b4 cf       	rjmp	.-152    	; 0x2088 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x8a>
    2120:	b1 2c       	mov	r11, r1
    2122:	a1 2c       	mov	r10, r1
    2124:	75 01       	movw	r14, r10
    2126:	55 e0       	ldi	r21, 0x05	; 5
    2128:	ee 0c       	add	r14, r14
    212a:	ff 1c       	adc	r15, r15
    212c:	5a 95       	dec	r21
    212e:	e1 f7       	brne	.-8      	; 0x2128 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x12a>
    2130:	c7 01       	movw	r24, r14
    2132:	8c 57       	subi	r24, 0x7C	; 124
    2134:	97 4b       	sbci	r25, 0xB7	; 183
    2136:	fc 01       	movw	r30, r24
    2138:	24 8d       	ldd	r18, Z+28	; 0x1c
    213a:	2c 17       	cp	r18, r28
    213c:	1d 06       	cpc	r1, r29
    213e:	41 f4       	brne	.+16     	; 0x2150 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x152>
    2140:	61 2f       	mov	r22, r17
    2142:	70 2f       	mov	r23, r16
    2144:	88 20       	and	r8, r8
    2146:	49 f2       	breq	.-110    	; 0x20da <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0xdc>
    2148:	0e 94 93 28 	call	0x5126	; 0x5126 <strcmp_P>
    214c:	89 2b       	or	r24, r25
    214e:	41 f2       	breq	.-112    	; 0x20e0 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0xe2>
    2150:	ff ef       	ldi	r31, 0xFF	; 255
    2152:	af 1a       	sub	r10, r31
    2154:	bf 0a       	sbc	r11, r31
    2156:	8a e0       	ldi	r24, 0x0A	; 10
    2158:	a8 16       	cp	r10, r24
    215a:	b1 04       	cpc	r11, r1
    215c:	19 f7       	brne	.-58     	; 0x2124 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x126>
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	79 01       	movw	r14, r18
    2164:	45 e0       	ldi	r20, 0x05	; 5
    2166:	ee 0c       	add	r14, r14
    2168:	ff 1c       	adc	r15, r15
    216a:	4a 95       	dec	r20
    216c:	e1 f7       	brne	.-8      	; 0x2166 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x168>
    216e:	c7 01       	movw	r24, r14
    2170:	8c 57       	subi	r24, 0x7C	; 124
    2172:	97 4b       	sbci	r25, 0xB7	; 183
    2174:	fc 01       	movw	r30, r24
    2176:	44 8d       	ldd	r20, Z+28	; 0x1c
    2178:	41 11       	cpse	r20, r1
    217a:	c9 cf       	rjmp	.-110    	; 0x210e <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x110>
    217c:	61 2f       	mov	r22, r17
    217e:	70 2f       	mov	r23, r16
    2180:	88 20       	and	r8, r8
    2182:	11 f2       	breq	.-124    	; 0x2108 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0x10a>
    2184:	0e 94 9c 28 	call	0x5138	; 0x5138 <strcpy_P>
    2188:	f7 01       	movw	r30, r14
    218a:	ec 57       	subi	r30, 0x7C	; 124
    218c:	f7 4b       	sbci	r31, 0xB7	; 183
    218e:	c4 8f       	std	Z+28, r28	; 0x1c
    2190:	aa cf       	rjmp	.-172    	; 0x20e6 <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]+0xe8>

00002192 <waitForUrcCallback(char*)>:
waitForUrcCallback():
    2192:	40 91 81 48 	lds	r20, 0x4881	; 0x804881 <wait_for_urc_buffer_size>
    2196:	50 91 82 48 	lds	r21, 0x4882	; 0x804882 <wait_for_urc_buffer_size+0x1>
    219a:	bc 01       	movw	r22, r24
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	97 e4       	ldi	r25, 0x47	; 71
    21a0:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <memcpy>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 83 48 	sts	0x4883, r24	; 0x804883 <got_wait_for_urc_callback>
    21aa:	08 95       	ret

000021ac <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]>:
waitForURC():
    21ac:	2f 92       	push	r2
    21ae:	3f 92       	push	r3
    21b0:	4f 92       	push	r4
    21b2:	5f 92       	push	r5
    21b4:	6f 92       	push	r6
    21b6:	7f 92       	push	r7
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	62 97       	sbiw	r28, 0x12	; 18
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	3c 01       	movw	r6, r24
    21dc:	69 8b       	std	Y+17, r22	; 0x11
    21de:	7a 8b       	std	Y+18, r23	; 0x12
    21e0:	4a 01       	movw	r8, r20
    21e2:	18 01       	movw	r2, r16
    21e4:	29 01       	movw	r4, r18
    21e6:	10 92 83 48 	sts	0x4883, r1	; 0x804883 <got_wait_for_urc_callback>
    21ea:	40 93 81 48 	sts	0x4881, r20	; 0x804881 <wait_for_urc_buffer_size>
    21ee:	50 93 82 48 	sts	0x4882, r21	; 0x804882 <wait_for_urc_buffer_size+0x1>
registerCallback():
    21f2:	21 e0       	ldi	r18, 0x01	; 1
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	69 ec       	ldi	r22, 0xC9	; 201
    21f8:	70 e1       	ldi	r23, 0x10	; 16
    21fa:	01 df       	rcall	.-510    	; 0x1ffe <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]>
    21fc:	18 2f       	mov	r17, r24
waitForURC():
    21fe:	88 23       	and	r24, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x58>
    2202:	44 c0       	rjmp	.+136    	; 0x228c <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0xe0>
    2204:	b2 01       	movw	r22, r4
    2206:	a1 01       	movw	r20, r2
    2208:	ce 01       	movw	r24, r28
    220a:	09 96       	adiw	r24, 0x09	; 9
    220c:	32 d8       	rcall	.-3996   	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    220e:	b6 01       	movw	r22, r12
    2210:	a5 01       	movw	r20, r10
    2212:	ce 01       	movw	r24, r28
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	2d d8       	rcall	.-4006   	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    2218:	80 91 83 48 	lds	r24, 0x4883	; 0x804883 <got_wait_for_urc_callback>
    221c:	81 11       	cpse	r24, r1
    221e:	27 c0       	rjmp	.+78     	; 0x226e <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0xc2>
    2220:	ce 01       	movw	r24, r28
    2222:	09 96       	adiw	r24, 0x09	; 9
    2224:	02 d8       	rcall	.-4092   	; 0x122a <TimeoutTimer::hasTimedOut() const>
    2226:	81 11       	cpse	r24, r1
    2228:	22 c0       	rjmp	.+68     	; 0x226e <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0xc2>
    222a:	38 d8       	rcall	.-3984   	; 0x129c <ctsUpdate()>
_delay_ms():
    222c:	8f e6       	ldi	r24, 0x6F	; 111
    222e:	97 e1       	ldi	r25, 0x17	; 23
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x84>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x8a>
    2236:	00 00       	nop
waitForURC():
    2238:	e1 14       	cp	r14, r1
    223a:	f1 04       	cpc	r15, r1
    223c:	69 f3       	breq	.-38     	; 0x2218 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x6c>
    223e:	ce 01       	movw	r24, r28
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    2246:	88 23       	and	r24, r24
    2248:	39 f3       	breq	.-50     	; 0x2218 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x6c>
    224a:	f7 01       	movw	r30, r14
    224c:	09 95       	icall
millis():
    224e:	2f b7       	in	r18, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	80 91 c6 49 	lds	r24, 0x49C6	; 0x8049c6 <timingStruct>
    2256:	90 91 c7 49 	lds	r25, 0x49C7	; 0x8049c7 <timingStruct+0x1>
    225a:	a0 91 c8 49 	lds	r26, 0x49C8	; 0x8049c8 <timingStruct+0x2>
    225e:	b0 91 c9 49 	lds	r27, 0x49C9	; 0x8049c9 <timingStruct+0x3>
    2262:	2f bf       	out	0x3f, r18	; 63
reset():
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	af 83       	std	Y+7, r26	; 0x07
    226a:	b8 87       	std	Y+8, r27	; 0x08
    226c:	d5 cf       	rjmp	.-86     	; 0x2218 <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0x6c>
waitForURC():
    226e:	c3 01       	movw	r24, r6
    2270:	46 dd       	rcall	.-1396   	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    2272:	10 91 83 48 	lds	r17, 0x4883	; 0x804883 <got_wait_for_urc_callback>
    2276:	11 23       	and	r17, r17
    2278:	49 f0       	breq	.+18     	; 0x228c <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0xe0>
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	9a 89       	ldd	r25, Y+18	; 0x12
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	29 f0       	breq	.+10     	; 0x228c <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]+0xe0>
    2282:	a4 01       	movw	r20, r8
    2284:	61 e0       	ldi	r22, 0x01	; 1
    2286:	77 e4       	ldi	r23, 0x47	; 71
    2288:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <memcpy>
    228c:	81 2f       	mov	r24, r17
    228e:	62 96       	adiw	r28, 0x12	; 18
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	cf 90       	pop	r12
    22a4:	bf 90       	pop	r11
    22a6:	af 90       	pop	r10
    22a8:	9f 90       	pop	r9
    22aa:	8f 90       	pop	r8
    22ac:	7f 90       	pop	r7
    22ae:	6f 90       	pop	r6
    22b0:	5f 90       	pop	r5
    22b2:	4f 90       	pop	r4
    22b4:	3f 90       	pop	r3
    22b6:	2f 90       	pop	r2
    22b8:	08 95       	ret

000022ba <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]>:
post():
    22ba:	2f 92       	push	r2
    22bc:	3f 92       	push	r3
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	c6 57       	subi	r28, 0x76	; 118
    22e4:	d1 09       	sbc	r29, r1
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	7c 01       	movw	r14, r24
    22ec:	4b 01       	movw	r8, r22
    22ee:	2d b6       	in	r2, 0x3d	; 61
    22f0:	3e b6       	in	r3, 0x3e	; 62
    22f2:	41 2c       	mov	r4, r1
    22f4:	51 2c       	mov	r5, r1
    22f6:	32 01       	movw	r6, r4
    22f8:	61 15       	cp	r22, r1
    22fa:	71 05       	cpc	r23, r1
    22fc:	51 f0       	breq	.+20     	; 0x2312 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x58>
    22fe:	fb 01       	movw	r30, r22
    2300:	01 90       	ld	r0, Z+
    2302:	00 20       	and	r0, r0
    2304:	e9 f7       	brne	.-6      	; 0x2300 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x46>
    2306:	31 97       	sbiw	r30, 0x01	; 1
    2308:	e6 1b       	sub	r30, r22
    230a:	f7 0b       	sbc	r31, r23
    230c:	2f 01       	movw	r4, r30
    230e:	71 2c       	mov	r7, r1
    2310:	61 2c       	mov	r6, r1
    2312:	f7 01       	movw	r30, r14
    2314:	01 90       	ld	r0, Z+
    2316:	00 20       	and	r0, r0
    2318:	e9 f7       	brne	.-6      	; 0x2314 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x5a>
    231a:	31 97       	sbiw	r30, 0x01	; 1
    231c:	8f 01       	movw	r16, r30
    231e:	0e 19       	sub	r16, r14
    2320:	1f 09       	sbc	r17, r15
    2322:	c8 01       	movw	r24, r16
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	e7 96       	adiw	r28, 0x37	; 55
    232a:	8c af       	std	Y+60, r24	; 0x3c
    232c:	9d af       	std	Y+61, r25	; 0x3d
    232e:	ae af       	std	Y+62, r26	; 0x3e
    2330:	bf af       	std	Y+63, r27	; 0x3f
    2332:	e7 97       	sbiw	r28, 0x37	; 55
    2334:	6e 01       	movw	r12, r28
    2336:	91 e7       	ldi	r25, 0x71	; 113
    2338:	c9 0e       	add	r12, r25
    233a:	d1 1c       	adc	r13, r1
    233c:	d6 01       	movw	r26, r12
    233e:	1d 92       	st	X+, r1
    2340:	1c 92       	st	X, r1
    2342:	6e ec       	ldi	r22, 0xCE	; 206
    2344:	79 e0       	ldi	r23, 0x09	; 9
    2346:	43 30       	cpi	r20, 0x03	; 3
    2348:	51 05       	cpc	r21, r1
    234a:	61 f0       	breq	.+24     	; 0x2364 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0xaa>
    234c:	6c ec       	ldi	r22, 0xCC	; 204
    234e:	79 e0       	ldi	r23, 0x09	; 9
    2350:	44 30       	cpi	r20, 0x04	; 4
    2352:	51 05       	cpc	r21, r1
    2354:	39 f0       	breq	.+14     	; 0x2364 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0xaa>
    2356:	60 ed       	ldi	r22, 0xD0	; 208
    2358:	79 e0       	ldi	r23, 0x09	; 9
    235a:	42 30       	cpi	r20, 0x02	; 2
    235c:	51 05       	cpc	r21, r1
    235e:	11 f0       	breq	.+4      	; 0x2364 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0xaa>
    2360:	6a ec       	ldi	r22, 0xCA	; 202
    2362:	79 e0       	ldi	r23, 0x09	; 9
    2364:	c6 01       	movw	r24, r12
    2366:	0e 94 9c 28 	call	0x5138	; 0x5138 <strcpy_P>
    236a:	d3 01       	movw	r26, r6
    236c:	c2 01       	movw	r24, r4
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	a1 1d       	adc	r26, r1
    2372:	b1 1d       	adc	r27, r1
    2374:	ed b7       	in	r30, 0x3d	; 61
    2376:	fe b7       	in	r31, 0x3e	; 62
    2378:	e8 1b       	sub	r30, r24
    237a:	f9 0b       	sbc	r31, r25
    237c:	ed bf       	out	0x3d, r30	; 61
    237e:	fe bf       	out	0x3e, r31	; 62
    2380:	2d b7       	in	r18, 0x3d	; 61
    2382:	3e b7       	in	r19, 0x3e	; 62
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	59 01       	movw	r10, r18
    238a:	11 82       	std	Z+1, r1	; 0x01
    238c:	32 96       	adiw	r30, 0x02	; 2
    238e:	a2 01       	movw	r20, r4
    2390:	c2 01       	movw	r24, r4
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	10 f0       	brcs	.+4      	; 0x239a <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0xe0>
    2396:	11 92       	st	Z+, r1
    2398:	fc cf       	rjmp	.-8      	; 0x2392 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0xd8>
    239a:	b4 01       	movw	r22, r8
    239c:	c5 01       	movw	r24, r10
    239e:	0e 94 42 2e 	call	0x5c84	; 0x5c84 <strncpy>
    23a2:	f5 01       	movw	r30, r10
    23a4:	e4 0d       	add	r30, r4
    23a6:	f5 1d       	adc	r31, r5
    23a8:	10 82       	st	Z, r1
on():
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 db       	rcall	.-2272   	; 0x1ad0 <digitalWrite>
sendData():
    23b0:	1f 92       	push	r1
    23b2:	1f 92       	push	r1
    23b4:	1f 92       	push	r1
    23b6:	1f 92       	push	r1
    23b8:	87 ec       	ldi	r24, 0xC7	; 199
    23ba:	99 e0       	ldi	r25, 0x09	; 9
    23bc:	9f 93       	push	r25
    23be:	8f 93       	push	r24
    23c0:	2a ec       	ldi	r18, 0xCA	; 202
    23c2:	82 2e       	mov	r8, r18
    23c4:	29 e4       	ldi	r18, 0x49	; 73
    23c6:	92 2e       	mov	r9, r18
    23c8:	9f 92       	push	r9
    23ca:	8f 92       	push	r8
    23cc:	67 da       	rcall	.-2866   	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    23ce:	bf 92       	push	r11
    23d0:	af 92       	push	r10
    23d2:	df 92       	push	r13
    23d4:	cf 92       	push	r12
    23d6:	1f 92       	push	r1
    23d8:	1f 92       	push	r1
    23da:	e5 96       	adiw	r28, 0x35	; 53
    23dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    23de:	e5 97       	sbiw	r28, 0x35	; 53
    23e0:	8f 93       	push	r24
    23e2:	e4 96       	adiw	r28, 0x34	; 52
    23e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23e6:	e4 97       	sbiw	r28, 0x34	; 52
    23e8:	9f 93       	push	r25
    23ea:	82 e5       	ldi	r24, 0x52	; 82
    23ec:	91 e4       	ldi	r25, 0x41	; 65
    23ee:	9f 93       	push	r25
    23f0:	8f 93       	push	r24
    23f2:	1f 92       	push	r1
    23f4:	1f 92       	push	r1
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	8f 93       	push	r24
    23fa:	81 ea       	ldi	r24, 0xA1	; 161
    23fc:	99 e0       	ldi	r25, 0x09	; 9
    23fe:	9f 93       	push	r25
    2400:	8f 93       	push	r24
    2402:	9f 92       	push	r9
    2404:	8f 92       	push	r8
    2406:	69 d9       	rcall	.-3374   	; 0x16da <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]>
    2408:	ad b7       	in	r26, 0x3d	; 61
    240a:	be b7       	in	r27, 0x3e	; 62
    240c:	59 96       	adiw	r26, 0x19	; 25
    240e:	ad bf       	out	0x3d, r26	; 61
    2410:	be bf       	out	0x3e, r27	; 62
    2412:	81 11       	cpse	r24, r1
    2414:	0b c0       	rjmp	.+22     	; 0x242c <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x172>
    2416:	89 e7       	ldi	r24, 0x79	; 121
    2418:	99 e0       	ldi	r25, 0x09	; 9
    241a:	24 da       	rcall	.-3000   	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    241c:	10 e0       	ldi	r17, 0x00	; 0
    241e:	00 e0       	ldi	r16, 0x00	; 0
    2420:	81 2c       	mov	r8, r1
    2422:	91 2c       	mov	r9, r1
    2424:	54 01       	movw	r10, r8
    2426:	f1 2c       	mov	r15, r1
    2428:	e1 2c       	mov	r14, r1
    242a:	28 c1       	rjmp	.+592    	; 0x267c <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x3c2>
    242c:	01 15       	cp	r16, r1
    242e:	11 05       	cpc	r17, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x17a>
    2432:	c2 c0       	rjmp	.+388    	; 0x25b8 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2fe>
waitForByte():
    2434:	0e 94 6f 09 	call	0x12de	; 0x12de <SequansControllerClass::readByte() [clone .constprop.78]>
    2438:	6c 01       	movw	r12, r24
__base_ctor ():
    243a:	80 e2       	ldi	r24, 0x20	; 32
    243c:	9e e4       	ldi	r25, 0x4E	; 78
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	ab 83       	std	Y+3, r26	; 0x03
    2448:	bc 83       	std	Y+4, r27	; 0x04
millis():
    244a:	2f b7       	in	r18, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	80 91 c6 49 	lds	r24, 0x49C6	; 0x8049c6 <timingStruct>
    2452:	90 91 c7 49 	lds	r25, 0x49C7	; 0x8049c7 <timingStruct+0x1>
    2456:	a0 91 c8 49 	lds	r26, 0x49C8	; 0x8049c8 <timingStruct+0x2>
    245a:	b0 91 c9 49 	lds	r27, 0x49C9	; 0x8049c9 <timingStruct+0x3>
    245e:	2f bf       	out	0x3f, r18	; 63
__base_ctor ():
    2460:	8d 83       	std	Y+5, r24	; 0x05
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	af 83       	std	Y+7, r26	; 0x07
    2466:	b8 87       	std	Y+8, r27	; 0x08
waitForByte():
    2468:	be e3       	ldi	r27, 0x3E	; 62
    246a:	cb 16       	cp	r12, r27
    246c:	d1 04       	cpc	r13, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x1b8>
    2470:	94 c0       	rjmp	.+296    	; 0x259a <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2e0>
    2472:	0e 94 6f 09 	call	0x12de	; 0x12de <SequansControllerClass::readByte() [clone .constprop.78]>
    2476:	6c 01       	movw	r12, r24
    2478:	0e 94 4e 09 	call	0x129c	; 0x129c <ctsUpdate()>
    247c:	ce 01       	movw	r24, r28
    247e:	01 96       	adiw	r24, 0x01	; 1
    2480:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    2484:	88 23       	and	r24, r24
    2486:	81 f3       	breq	.-32     	; 0x2468 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x1ae>
sendData():
    2488:	86 ed       	ldi	r24, 0xD6	; 214
    248a:	98 e0       	ldi	r25, 0x08	; 8
    248c:	eb d9       	rcall	.-3114   	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	fa db       	rcall	.-2060   	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    2496:	c2 cf       	rjmp	.-124    	; 0x241c <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x162>
writeBytes():
    2498:	8d e0       	ldi	r24, 0x0D	; 13
    249a:	00 d8       	rcall	.-4096   	; 0x149c <appendDataToTransmitBuffer(char, __file*)>
    249c:	8d c0       	rjmp	.+282    	; 0x25b8 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2fe>
waitForResponse():
    249e:	00 e0       	ldi	r16, 0x00	; 0
    24a0:	24 e0       	ldi	r18, 0x04	; 4
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	ae 01       	movw	r20, r28
    24a6:	43 59       	subi	r20, 0x93	; 147
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	ce 01       	movw	r24, r28
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	0a dd       	rcall	.-1516   	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    24b2:	18 2f       	mov	r17, r24
    24b4:	20 e1       	ldi	r18, 0x10	; 16
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	ae 01       	movw	r20, r28
    24ba:	4b 5a       	subi	r20, 0xAB	; 171
    24bc:	5f 4f       	sbci	r21, 0xFF	; 255
    24be:	63 e0       	ldi	r22, 0x03	; 3
    24c0:	ce 01       	movw	r24, r28
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	00 dd       	rcall	.-1536   	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    24c6:	d8 2e       	mov	r13, r24
    24c8:	11 23       	and	r17, r17
    24ca:	09 f4       	brne	.+2      	; 0x24ce <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x214>
    24cc:	5e c0       	rjmp	.+188    	; 0x258a <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2d0>
    24ce:	ce 01       	movw	r24, r28
    24d0:	83 59       	subi	r24, 0x93	; 147
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    24d8:	7c 01       	movw	r14, r24
    24da:	89 2b       	or	r24, r25
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x226>
    24de:	5a c0       	rjmp	.+180    	; 0x2594 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2da>
    24e0:	48 ee       	ldi	r20, 0xE8	; 232
    24e2:	53 e0       	ldi	r21, 0x03	; 3
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	ce 01       	movw	r24, r28
    24ea:	8b 59       	subi	r24, 0x9B	; 155
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	0e 94 39 09 	call	0x1272	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    24f2:	80 91 00 47 	lds	r24, 0x4700	; 0x804700 <got_shutdown_callback>
    24f6:	81 11       	cpse	r24, r1
    24f8:	0e c0       	rjmp	.+28     	; 0x2516 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x25c>
    24fa:	ce 01       	movw	r24, r28
    24fc:	8b 59       	subi	r24, 0x9B	; 155
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    2504:	81 11       	cpse	r24, r1
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x25c>
_delay_ms():
    2508:	8f e6       	ldi	r24, 0x6F	; 111
    250a:	97 e1       	ldi	r25, 0x17	; 23
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x252>
    2510:	00 c0       	rjmp	.+0      	; 0x2512 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x258>
    2512:	00 00       	nop
    2514:	ee cf       	rjmp	.-36     	; 0x24f2 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x238>
waitForResponse():
    2516:	80 91 00 47 	lds	r24, 0x4700	; 0x804700 <got_shutdown_callback>
    251a:	88 23       	and	r24, r24
    251c:	d9 f1       	breq	.+118    	; 0x2594 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2da>
    251e:	80 91 fe 46 	lds	r24, 0x46FE	; 0x8046fe <shutdown_error_code>
    2522:	90 91 ff 46 	lds	r25, 0x46FF	; 0x8046ff <shutdown_error_code+0x1>
    2526:	89 2b       	or	r24, r25
    2528:	b1 f0       	breq	.+44     	; 0x2556 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x29c>
    252a:	80 91 fe 46 	lds	r24, 0x46FE	; 0x8046fe <shutdown_error_code>
    252e:	90 91 ff 46 	lds	r25, 0x46FF	; 0x8046ff <shutdown_error_code+0x1>
    2532:	9f 93       	push	r25
    2534:	8f 93       	push	r24
    2536:	8e ef       	ldi	r24, 0xFE	; 254
    2538:	97 e0       	ldi	r25, 0x07	; 7
    253a:	9f 93       	push	r25
    253c:	8f 93       	push	r24
    253e:	8c eb       	ldi	r24, 0xBC	; 188
    2540:	9e e4       	ldi	r25, 0x4E	; 78
    2542:	9f 93       	push	r25
    2544:	8f 93       	push	r24
    2546:	0e 94 30 0a 	call	0x1460	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	00 91 fe 46 	lds	r16, 0x46FE	; 0x8046fe <shutdown_error_code>
    255a:	10 91 ff 46 	lds	r17, 0x46FF	; 0x8046ff <shutdown_error_code+0x1>
post():
    255e:	81 2c       	mov	r8, r1
    2560:	91 2c       	mov	r9, r1
    2562:	54 01       	movw	r10, r8
waitForResponse():
    2564:	dd 20       	and	r13, r13
    2566:	49 f0       	breq	.+18     	; 0x257a <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2c0>
    2568:	ce 01       	movw	r24, r28
    256a:	8b 5a       	subi	r24, 0xAB	; 171
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    2572:	4c 01       	movw	r8, r24
    2574:	99 0f       	add	r25, r25
    2576:	aa 08       	sbc	r10, r10
    2578:	bb 08       	sbc	r11, r11
    257a:	8c ec       	ldi	r24, 0xCC	; 204
    257c:	98 e0       	ldi	r25, 0x08	; 8
    257e:	bf db       	rcall	.-2178   	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	81 db       	rcall	.-2302   	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    2588:	75 c0       	rjmp	.+234    	; 0x2674 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x3ba>
post():
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	f1 2c       	mov	r15, r1
    2590:	e1 2c       	mov	r14, r1
    2592:	e5 cf       	rjmp	.-54     	; 0x255e <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2a4>
    2594:	10 e0       	ldi	r17, 0x00	; 0
    2596:	00 e0       	ldi	r16, 0x00	; 0
    2598:	e2 cf       	rjmp	.-60     	; 0x255e <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2a4>
    259a:	0e 0d       	add	r16, r14
    259c:	1f 1d       	adc	r17, r15
writeBytes():
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	0e 15       	cp	r16, r14
    25a4:	1f 05       	cpc	r17, r15
    25a6:	09 f4       	brne	.+2      	; 0x25aa <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2f0>
    25a8:	77 cf       	rjmp	.-274    	; 0x2498 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x1de>
    25aa:	f7 01       	movw	r30, r14
    25ac:	81 91       	ld	r24, Z+
    25ae:	7f 01       	movw	r14, r30
    25b0:	0e 94 4e 0a 	call	0x149c	; 0x149c <appendDataToTransmitBuffer(char, __file*)>
    25b4:	89 2b       	or	r24, r25
    25b6:	99 f3       	breq	.-26     	; 0x259e <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x2e4>
waitForResponse():
    25b8:	19 82       	std	Y+1, r1	; 0x01
    25ba:	1a 82       	std	Y+2, r1	; 0x02
    25bc:	fe 01       	movw	r30, r28
    25be:	33 96       	adiw	r30, 0x03	; 3
    25c0:	82 e5       	ldi	r24, 0x52	; 82
    25c2:	df 01       	movw	r26, r30
    25c4:	1d 92       	st	X+, r1
    25c6:	8a 95       	dec	r24
    25c8:	e9 f7       	brne	.-6      	; 0x25c4 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x30a>
    25ca:	af 96       	adiw	r28, 0x2f	; 47
    25cc:	1e ae       	std	Y+62, r1	; 0x3e
    25ce:	1f ae       	std	Y+63, r1	; 0x3f
    25d0:	af 97       	sbiw	r28, 0x2f	; 47
    25d2:	e1 96       	adiw	r28, 0x31	; 49
    25d4:	1e ae       	std	Y+62, r1	; 0x3e
    25d6:	1f ae       	std	Y+63, r1	; 0x3f
    25d8:	e1 97       	sbiw	r28, 0x31	; 49
    25da:	ee 5a       	subi	r30, 0xAE	; 174
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	11 92       	st	Z+, r1
    25e0:	11 92       	st	Z+, r1
    25e2:	8e e0       	ldi	r24, 0x0E	; 14
    25e4:	df 01       	movw	r26, r30
    25e6:	1d 92       	st	X+, r1
    25e8:	8a 95       	dec	r24
    25ea:	e9 f7       	brne	.-6      	; 0x25e6 <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x32c>
    25ec:	10 92 00 47 	sts	0x4700, r1	; 0x804700 <got_shutdown_callback>
registerCallback():
    25f0:	21 e0       	ldi	r18, 0x01	; 1
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	67 e6       	ldi	r22, 0x67	; 103
    25f6:	73 e1       	ldi	r23, 0x13	; 19
    25f8:	8c ec       	ldi	r24, 0xCC	; 204
    25fa:	98 e0       	ldi	r25, 0x08	; 8
    25fc:	00 dd       	rcall	.-1536   	; 0x1ffe <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]>
waitForURC():
    25fe:	84 ef       	ldi	r24, 0xF4	; 244
    2600:	a8 2e       	mov	r10, r24
    2602:	bb 24       	eor	r11, r11
    2604:	b3 94       	inc	r11
    2606:	c1 2c       	mov	r12, r1
    2608:	d1 2c       	mov	r13, r1
    260a:	98 e7       	ldi	r25, 0x78	; 120
    260c:	e9 2e       	mov	r14, r25
    260e:	9e e0       	ldi	r25, 0x0E	; 14
    2610:	f9 2e       	mov	r15, r25
    2612:	00 e3       	ldi	r16, 0x30	; 48
    2614:	15 e7       	ldi	r17, 0x75	; 117
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	44 e5       	ldi	r20, 0x54	; 84
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	be 01       	movw	r22, r28
    2620:	6f 5f       	subi	r22, 0xFF	; 255
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	80 ec       	ldi	r24, 0xC0	; 192
    2626:	98 e0       	ldi	r25, 0x08	; 8
    2628:	c1 dd       	rcall	.-1150   	; 0x21ac <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]>
waitForResponse():
    262a:	81 11       	cpse	r24, r1
    262c:	38 cf       	rjmp	.-400    	; 0x249e <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]+0x1e4>
    262e:	61 e0       	ldi	r22, 0x01	; 1
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	2a db       	rcall	.-2476   	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    2636:	8c ec       	ldi	r24, 0xCC	; 204
    2638:	98 e0       	ldi	r25, 0x08	; 8
    263a:	61 db       	rcall	.-2366   	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
    263c:	1f 92       	push	r1
    263e:	1f 92       	push	r1
    2640:	85 e7       	ldi	r24, 0x75	; 117
    2642:	8f 93       	push	r24
    2644:	80 e3       	ldi	r24, 0x30	; 48
    2646:	8f 93       	push	r24
    2648:	8a e6       	ldi	r24, 0x6A	; 106
    264a:	98 e0       	ldi	r25, 0x08	; 8
    264c:	9f 93       	push	r25
    264e:	8f 93       	push	r24
    2650:	8c eb       	ldi	r24, 0xBC	; 188
    2652:	9e e4       	ldi	r25, 0x4E	; 78
    2654:	9f 93       	push	r25
    2656:	8f 93       	push	r24
    2658:	0e 94 3f 0a 	call	0x147e	; 0x147e <LogClass::warnf(__FlashStringHelper const*, ...) [clone .constprop.53]>
    265c:	ed b7       	in	r30, 0x3d	; 61
    265e:	fe b7       	in	r31, 0x3e	; 62
    2660:	38 96       	adiw	r30, 0x08	; 8
    2662:	ed bf       	out	0x3d, r30	; 61
    2664:	fe bf       	out	0x3e, r31	; 62
    2666:	10 e0       	ldi	r17, 0x00	; 0
    2668:	00 e0       	ldi	r16, 0x00	; 0
    266a:	81 2c       	mov	r8, r1
    266c:	91 2c       	mov	r9, r1
    266e:	54 01       	movw	r10, r8
    2670:	f1 2c       	mov	r15, r1
    2672:	e1 2c       	mov	r14, r1
sendData():
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	07 db       	rcall	.-2546   	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
    267c:	e9 82       	std	Y+1, r14	; 0x01
    267e:	fa 82       	std	Y+2, r15	; 0x02
    2680:	8b 82       	std	Y+3, r8	; 0x03
    2682:	9c 82       	std	Y+4, r9	; 0x04
    2684:	ad 82       	std	Y+5, r10	; 0x05
    2686:	be 82       	std	Y+6, r11	; 0x06
    2688:	0f 83       	std	Y+7, r16	; 0x07
    268a:	18 87       	std	Y+8, r17	; 0x08
post():
    268c:	2e 2d       	mov	r18, r14
    268e:	3a 81       	ldd	r19, Y+2	; 0x02
    2690:	48 2d       	mov	r20, r8
    2692:	5c 81       	ldd	r21, Y+4	; 0x04
    2694:	6d 81       	ldd	r22, Y+5	; 0x05
    2696:	7e 81       	ldd	r23, Y+6	; 0x06
    2698:	80 2f       	mov	r24, r16
    269a:	98 85       	ldd	r25, Y+8	; 0x08
    269c:	2d be       	out	0x3d, r2	; 61
    269e:	3e be       	out	0x3e, r3	; 62
    26a0:	ca 58       	subi	r28, 0x8A	; 138
    26a2:	df 4f       	sbci	r29, 0xFF	; 255
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	df 90       	pop	r13
    26b6:	cf 90       	pop	r12
    26b8:	bf 90       	pop	r11
    26ba:	af 90       	pop	r10
    26bc:	9f 90       	pop	r9
    26be:	8f 90       	pop	r8
    26c0:	7f 90       	pop	r7
    26c2:	6f 90       	pop	r6
    26c4:	5f 90       	pop	r5
    26c6:	4f 90       	pop	r4
    26c8:	3f 90       	pop	r3
    26ca:	2f 90       	pop	r2
    26cc:	08 95       	ret

000026ce <httpShutdownCallback(char*)>:
httpShutdownCallback():
    26ce:	0f 93       	push	r16
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	28 97       	sbiw	r28, 0x08	; 8
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	19 82       	std	Y+1, r1	; 0x01
    26e0:	1a 82       	std	Y+2, r1	; 0x02
    26e2:	fe 01       	movw	r30, r28
    26e4:	33 96       	adiw	r30, 0x03	; 3
    26e6:	26 e0       	ldi	r18, 0x06	; 6
    26e8:	df 01       	movw	r26, r30
    26ea:	1d 92       	st	X+, r1
    26ec:	2a 95       	dec	r18
    26ee:	e9 f7       	brne	.-6      	; 0x26ea <httpShutdownCallback(char*)+0x1c>
    26f0:	00 e0       	ldi	r16, 0x00	; 0
    26f2:	27 e0       	ldi	r18, 0x07	; 7
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	ae 01       	movw	r20, r28
    26f8:	4f 5f       	subi	r20, 0xFF	; 255
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	e3 db       	rcall	.-2106   	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    2700:	88 23       	and	r24, r24
    2702:	59 f0       	breq	.+22     	; 0x271a <httpShutdownCallback(char*)+0x4c>
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	80 93 00 47 	sts	0x4700, r24	; 0x804700 <got_shutdown_callback>
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    2712:	80 93 fe 46 	sts	0x46FE, r24	; 0x8046fe <shutdown_error_code>
    2716:	90 93 ff 46 	sts	0x46FF, r25	; 0x8046ff <shutdown_error_code+0x1>
    271a:	28 96       	adiw	r28, 0x08	; 8
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	0f 91       	pop	r16
    2726:	08 95       	ret

00002728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>:
addExample():
    2728:	cf 92       	push	r12
    272a:	df 92       	push	r13
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	7c 01       	movw	r14, r24
    273a:	6b 01       	movw	r12, r22
operator new():
    273c:	88 e0       	ldi	r24, 0x08	; 8
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 10 2c 	call	0x5820	; 0x5820 <malloc>
    2744:	ec 01       	movw	r28, r24
addExample():
    2746:	00 91 d3 4e 	lds	r16, 0x4ED3	; 0x804ed3 <anomKNN+0x2>
    274a:	10 91 d4 4e 	lds	r17, 0x4ED4	; 0x804ed4 <anomKNN+0x3>
__base_ctor ():
    274e:	86 e1       	ldi	r24, 0x16	; 22
    2750:	91 e4       	ldi	r25, 0x41	; 65
    2752:	88 83       	st	Y, r24
    2754:	99 83       	std	Y+1, r25	; 0x01
    2756:	cc 82       	std	Y+4, r12	; 0x04
    2758:	dd 82       	std	Y+5, r13	; 0x05
    275a:	1e 82       	std	Y+6, r1	; 0x06
    275c:	1f 82       	std	Y+7, r1	; 0x07
    275e:	01 15       	cp	r16, r1
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	18 07       	cpc	r17, r24
    2764:	d0 f4       	brcc	.+52     	; 0x279a <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x72>
    2766:	c8 01       	movw	r24, r16
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
operator new():
    2770:	0e 94 10 2c 	call	0x5820	; 0x5820 <malloc>
__base_ctor ():
    2774:	8a 83       	std	Y+2, r24	; 0x02
    2776:	9b 83       	std	Y+3, r25	; 0x03
    2778:	d7 01       	movw	r26, r14
    277a:	fc 01       	movw	r30, r24
addExample():
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
__base_ctor ():
    2780:	80 17       	cp	r24, r16
    2782:	91 07       	cpc	r25, r17
    2784:	6c f4       	brge	.+26     	; 0x27a0 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x78>
    2786:	4d 91       	ld	r20, X+
    2788:	5d 91       	ld	r21, X+
    278a:	6d 91       	ld	r22, X+
    278c:	7d 91       	ld	r23, X+
    278e:	41 93       	st	Z+, r20
    2790:	51 93       	st	Z+, r21
    2792:	61 93       	st	Z+, r22
    2794:	71 93       	st	Z+, r23
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	f3 cf       	rjmp	.-26     	; 0x2780 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x58>
addExample():
    279a:	8f ef       	ldi	r24, 0xFF	; 255
    279c:	9f ef       	ldi	r25, 0xFF	; 255
    279e:	e8 cf       	rjmp	.-48     	; 0x2770 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x48>
    27a0:	e0 91 d5 4e 	lds	r30, 0x4ED5	; 0x804ed5 <anomKNN+0x4>
    27a4:	f0 91 d6 4e 	lds	r31, 0x4ED6	; 0x804ed6 <anomKNN+0x5>
    27a8:	30 97       	sbiw	r30, 0x00	; 0
    27aa:	71 f4       	brne	.+28     	; 0x27c8 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0xa0>
    27ac:	c0 93 d5 4e 	sts	0x4ED5, r28	; 0x804ed5 <anomKNN+0x4>
    27b0:	d0 93 d6 4e 	sts	0x4ED6, r29	; 0x804ed6 <anomKNN+0x5>
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	08 95       	ret
    27c6:	fc 01       	movw	r30, r24
next():
    27c8:	86 81       	ldd	r24, Z+6	; 0x06
    27ca:	97 81       	ldd	r25, Z+7	; 0x07
addExample():
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	d9 f7       	brne	.-10     	; 0x27c6 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x9e>
setNext():
    27d0:	c6 83       	std	Z+6, r28	; 0x06
    27d2:	d7 83       	std	Z+7, r29	; 0x07
    27d4:	ef cf       	rjmp	.-34     	; 0x27b4 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]+0x8c>

000027d6 <LogClass::rawf(char const*, ...) [clone .constprop.21]>:
rawf():
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	2e 97       	sbiw	r28, 0x0e	; 14
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	de bf       	out	0x3e, r29	; 62
printf():
    27e4:	80 91 be 4e 	lds	r24, 0x4EBE	; 0x804ebe <Log+0x2>
    27e8:	90 91 bf 4e 	lds	r25, 0x4EBF	; 0x804ebf <Log+0x3>
    27ec:	97 fd       	sbrc	r25, 7
    27ee:	1d c0       	rjmp	.+58     	; 0x282a <LogClass::rawf(char const*, ...) [clone .constprop.21]+0x54>
    27f0:	65 ee       	ldi	r22, 0xE5	; 229
    27f2:	7b e0       	ldi	r23, 0x0B	; 11
    27f4:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    27f8:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    27fc:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::print(__FlashStringHelper const*)>
    2800:	89 e3       	ldi	r24, 0x39	; 57
    2802:	96 e0       	ldi	r25, 0x06	; 6
    2804:	89 87       	std	Y+9, r24	; 0x09
    2806:	9a 87       	std	Y+10, r25	; 0x0a
    2808:	1b 86       	std	Y+11, r1	; 0x0b
    280a:	1c 86       	std	Y+12, r1	; 0x0c
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	8c 83       	std	Y+4, r24	; 0x04
    2810:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    2814:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    2818:	8d 87       	std	Y+13, r24	; 0x0d
    281a:	9e 87       	std	Y+14, r25	; 0x0e
    281c:	be 01       	movw	r22, r28
    281e:	6f 5f       	subi	r22, 0xFF	; 255
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	80 e6       	ldi	r24, 0x60	; 96
    2824:	91 e4       	ldi	r25, 0x41	; 65
    2826:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <fputs>
rawf():
    282a:	2e 96       	adiw	r28, 0x0e	; 14
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	08 95       	ret

00002836 <KNNClassifier::classify(float const*, int) [clone .constprop.9]>:
classify():
    2836:	2f 92       	push	r2
    2838:	3f 92       	push	r3
    283a:	4f 92       	push	r4
    283c:	5f 92       	push	r5
    283e:	6f 92       	push	r6
    2840:	7f 92       	push	r7
    2842:	8f 92       	push	r8
    2844:	9f 92       	push	r9
    2846:	af 92       	push	r10
    2848:	bf 92       	push	r11
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	64 97       	sbiw	r28, 0x14	; 20
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	de bf       	out	0x3e, r29	; 62
getCount():
    2862:	00 91 d5 4e 	lds	r16, 0x4ED5	; 0x804ed5 <anomKNN+0x4>
    2866:	10 91 d6 4e 	lds	r17, 0x4ED6	; 0x804ed6 <anomKNN+0x5>
classify():
    286a:	f8 01       	movw	r30, r16
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	20 e0       	ldi	r18, 0x00	; 0
getCount():
    2870:	30 97       	sbiw	r30, 0x00	; 0
    2872:	31 f0       	breq	.+12     	; 0x2880 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x4a>
    2874:	2f 5f       	subi	r18, 0xFF	; 255
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
next():
    2878:	06 80       	ldd	r0, Z+6	; 0x06
    287a:	f7 81       	ldd	r31, Z+7	; 0x07
    287c:	e0 2d       	mov	r30, r0
    287e:	f8 cf       	rjmp	.-16     	; 0x2870 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x3a>
classify():
    2880:	22 30       	cpi	r18, 0x02	; 2
    2882:	31 05       	cpc	r19, r1
    2884:	24 f5       	brge	.+72     	; 0x28ce <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x98>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a0 ec       	ldi	r26, 0xC0	; 192
    288c:	bf e7       	ldi	r27, 0x7F	; 127
    288e:	80 93 d7 4e 	sts	0x4ED7, r24	; 0x804ed7 <anomKNN+0x6>
    2892:	90 93 d8 4e 	sts	0x4ED8, r25	; 0x804ed8 <anomKNN+0x7>
    2896:	a0 93 d9 4e 	sts	0x4ED9, r26	; 0x804ed9 <anomKNN+0x8>
    289a:	b0 93 da 4e 	sts	0x4EDA, r27	; 0x804eda <anomKNN+0x9>
    289e:	10 e0       	ldi	r17, 0x00	; 0
    28a0:	00 e0       	ldi	r16, 0x00	; 0
    28a2:	c8 01       	movw	r24, r16
    28a4:	64 96       	adiw	r28, 0x14	; 20
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	ff 90       	pop	r15
    28b4:	ef 90       	pop	r14
    28b6:	df 90       	pop	r13
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	9f 90       	pop	r9
    28be:	8f 90       	pop	r8
    28c0:	7f 90       	pop	r7
    28c2:	6f 90       	pop	r6
    28c4:	5f 90       	pop	r5
    28c6:	4f 90       	pop	r4
    28c8:	3f 90       	pop	r3
    28ca:	2f 90       	pop	r2
    28cc:	08 95       	ret
    28ce:	7c 01       	movw	r14, r24
    28d0:	4f ef       	ldi	r20, 0xFF	; 255
    28d2:	5f ef       	ldi	r21, 0xFF	; 255
    28d4:	6f e7       	ldi	r22, 0x7F	; 127
    28d6:	7f e7       	ldi	r23, 0x7F	; 127
    28d8:	49 83       	std	Y+1, r20	; 0x01
    28da:	5a 83       	std	Y+2, r21	; 0x02
    28dc:	6b 83       	std	Y+3, r22	; 0x03
    28de:	7c 83       	std	Y+4, r23	; 0x04
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e8       	ldi	r25, 0x80	; 128
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	4f 83       	std	Y+7, r20	; 0x07
    28ea:	58 87       	std	Y+8, r21	; 0x08
    28ec:	69 87       	std	Y+9, r22	; 0x09
    28ee:	7a 87       	std	Y+10, r23	; 0x0a
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
    28f2:	9c 87       	std	Y+12, r25	; 0x0c
    28f4:	86 e0       	ldi	r24, 0x06	; 6
    28f6:	d8 2e       	mov	r13, r24
    28f8:	01 15       	cp	r16, r1
    28fa:	11 05       	cpc	r17, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0xca>
    28fe:	71 c0       	rjmp	.+226    	; 0x29e2 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x1ac>
    2900:	60 90 d3 4e 	lds	r6, 0x4ED3	; 0x804ed3 <anomKNN+0x2>
    2904:	70 90 d4 4e 	lds	r7, 0x4ED4	; 0x804ed4 <anomKNN+0x3>
    2908:	47 01       	movw	r8, r14
    290a:	b1 2c       	mov	r11, r1
    290c:	a1 2c       	mov	r10, r1
    290e:	21 2c       	mov	r2, r1
    2910:	31 2c       	mov	r3, r1
    2912:	21 01       	movw	r4, r2
distance():
    2914:	a6 14       	cp	r10, r6
    2916:	b7 04       	cpc	r11, r7
    2918:	2c f5       	brge	.+74     	; 0x2964 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x12e>
    291a:	c4 01       	movw	r24, r8
    291c:	8e 19       	sub	r24, r14
    291e:	9f 09       	sbc	r25, r15
    2920:	d8 01       	movw	r26, r16
    2922:	12 96       	adiw	r26, 0x02	; 2
    2924:	ed 91       	ld	r30, X+
    2926:	fc 91       	ld	r31, X
    2928:	e8 0f       	add	r30, r24
    292a:	f9 1f       	adc	r31, r25
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	f4 01       	movw	r30, r8
    2936:	21 91       	ld	r18, Z+
    2938:	31 91       	ld	r19, Z+
    293a:	41 91       	ld	r20, Z+
    293c:	51 91       	ld	r21, Z+
    293e:	4f 01       	movw	r8, r30
    2940:	0e 94 29 2b 	call	0x5652	; 0x5652 <__subsf3>
    2944:	9b 01       	movw	r18, r22
    2946:	ac 01       	movw	r20, r24
    2948:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <__mulsf3>
    294c:	9b 01       	movw	r18, r22
    294e:	ac 01       	movw	r20, r24
    2950:	c2 01       	movw	r24, r4
    2952:	b1 01       	movw	r22, r2
    2954:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__addsf3>
    2958:	1b 01       	movw	r2, r22
    295a:	2c 01       	movw	r4, r24
    295c:	ff ef       	ldi	r31, 0xFF	; 255
    295e:	af 1a       	sub	r10, r31
    2960:	bf 0a       	sbc	r11, r31
    2962:	d8 cf       	rjmp	.-80     	; 0x2914 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0xde>
    2964:	c2 01       	movw	r24, r4
    2966:	b1 01       	movw	r22, r2
    2968:	0e 94 92 2b 	call	0x5724	; 0x5724 <sqrt>
    296c:	4b 01       	movw	r8, r22
    296e:	5c 01       	movw	r10, r24
classify():
    2970:	29 81       	ldd	r18, Y+1	; 0x01
    2972:	3a 81       	ldd	r19, Y+2	; 0x02
    2974:	4b 81       	ldd	r20, Y+3	; 0x03
    2976:	5c 81       	ldd	r21, Y+4	; 0x04
    2978:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <__cmpsf2>
    297c:	87 fd       	sbrc	r24, 7
    297e:	0d c0       	rjmp	.+26     	; 0x299a <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x164>
    2980:	2f 81       	ldd	r18, Y+7	; 0x07
    2982:	38 85       	ldd	r19, Y+8	; 0x08
    2984:	49 85       	ldd	r20, Y+9	; 0x09
    2986:	5a 85       	ldd	r21, Y+10	; 0x0a
    2988:	c5 01       	movw	r24, r10
    298a:	b4 01       	movw	r22, r8
    298c:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <__cmpsf2>
    2990:	87 ff       	sbrs	r24, 7
    2992:	23 c0       	rjmp	.+70     	; 0x29da <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x1a4>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0b c0       	rjmp	.+22     	; 0x29b0 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x17a>
    299a:	86 e0       	ldi	r24, 0x06	; 6
    299c:	fe 01       	movw	r30, r28
    299e:	31 96       	adiw	r30, 0x01	; 1
    29a0:	de 01       	movw	r26, r28
    29a2:	17 96       	adiw	r26, 0x07	; 7
    29a4:	01 90       	ld	r0, Z+
    29a6:	0d 92       	st	X+, r0
    29a8:	8a 95       	dec	r24
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x16e>
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	d8 9e       	mul	r13, r24
    29b2:	f0 01       	movw	r30, r0
    29b4:	d9 9e       	mul	r13, r25
    29b6:	f0 0d       	add	r31, r0
    29b8:	11 24       	eor	r1, r1
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	8c 0f       	add	r24, r28
    29c0:	9d 1f       	adc	r25, r29
    29c2:	e8 0f       	add	r30, r24
    29c4:	f9 1f       	adc	r31, r25
    29c6:	80 82       	st	Z, r8
    29c8:	91 82       	std	Z+1, r9	; 0x01
    29ca:	a2 82       	std	Z+2, r10	; 0x02
    29cc:	b3 82       	std	Z+3, r11	; 0x03
    29ce:	d8 01       	movw	r26, r16
    29d0:	14 96       	adiw	r26, 0x04	; 4
    29d2:	8d 91       	ld	r24, X+
    29d4:	9c 91       	ld	r25, X
    29d6:	84 83       	std	Z+4, r24	; 0x04
    29d8:	95 83       	std	Z+5, r25	; 0x05
next():
    29da:	f8 01       	movw	r30, r16
    29dc:	06 81       	ldd	r16, Z+6	; 0x06
    29de:	17 81       	ldd	r17, Z+7	; 0x07
    29e0:	8b cf       	rjmp	.-234    	; 0x28f8 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0xc2>
classify():
    29e2:	1f 86       	std	Y+15, r1	; 0x0f
    29e4:	18 8a       	std	Y+16, r1	; 0x10
    29e6:	1d 86       	std	Y+13, r1	; 0x0d
    29e8:	1e 86       	std	Y+14, r1	; 0x0e
    29ea:	1b 8a       	std	Y+19, r1	; 0x13
    29ec:	1c 8a       	std	Y+20, r1	; 0x14
    29ee:	19 8a       	std	Y+17, r1	; 0x11
    29f0:	1a 8a       	std	Y+18, r1	; 0x12
    29f2:	de 01       	movw	r26, r28
    29f4:	11 96       	adiw	r26, 0x01	; 1
    29f6:	ae 01       	movw	r20, r28
    29f8:	43 5f       	subi	r20, 0xF3	; 243
    29fa:	5f 4f       	sbci	r21, 0xFF	; 255
    29fc:	9d 01       	movw	r18, r26
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	14 96       	adiw	r26, 0x04	; 4
    2a04:	0d 91       	ld	r16, X+
    2a06:	1c 91       	ld	r17, X
    2a08:	15 97       	sbiw	r26, 0x05	; 5
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	08 17       	cp	r16, r24
    2a10:	19 07       	cpc	r17, r25
    2a12:	e1 f0       	breq	.+56     	; 0x2a4c <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x216>
    2a14:	89 89       	ldd	r24, Y+17	; 0x11
    2a16:	9a 89       	ldd	r25, Y+18	; 0x12
    2a18:	08 17       	cp	r16, r24
    2a1a:	19 07       	cpc	r17, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x1ea>
    2a1e:	4f c0       	rjmp	.+158    	; 0x2abe <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x288>
    2a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a22:	98 89       	ldd	r25, Y+16	; 0x10
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	31 f0       	breq	.+12     	; 0x2a34 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x1fe>
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2c:	89 2b       	or	r24, r25
    2a2e:	d9 f4       	brne	.+54     	; 0x2a66 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x230>
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	e8 0f       	add	r30, r24
    2a40:	f9 1f       	adc	r31, r25
    2a42:	66 87       	std	Z+14, r22	; 0x0e
    2a44:	77 87       	std	Z+15, r23	; 0x0f
    2a46:	04 87       	std	Z+12, r16	; 0x0c
    2a48:	15 87       	std	Z+13, r17	; 0x0d
    2a4a:	0d c0       	rjmp	.+26     	; 0x2a66 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x230>
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	e0 e0       	ldi	r30, 0x00	; 0
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31
    2a54:	ee 0f       	add	r30, r30
    2a56:	ff 1f       	adc	r31, r31
    2a58:	e2 0f       	add	r30, r18
    2a5a:	f3 1f       	adc	r31, r19
    2a5c:	86 85       	ldd	r24, Z+14	; 0x0e
    2a5e:	97 85       	ldd	r25, Z+15	; 0x0f
    2a60:	01 96       	adiw	r24, 0x01	; 1
    2a62:	86 87       	std	Z+14, r24	; 0x0e
    2a64:	97 87       	std	Z+15, r25	; 0x0f
    2a66:	16 96       	adiw	r26, 0x06	; 6
    2a68:	a4 17       	cp	r26, r20
    2a6a:	b5 07       	cpc	r27, r21
    2a6c:	51 f6       	brne	.-108    	; 0x2a02 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x1cc>
    2a6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a70:	78 89       	ldd	r23, Y+16	; 0x10
    2a72:	0d 85       	ldd	r16, Y+13	; 0x0d
    2a74:	1e 85       	ldd	r17, Y+14	; 0x0e
    2a76:	16 16       	cp	r1, r22
    2a78:	17 06       	cpc	r1, r23
    2a7a:	24 f0       	brlt	.+8      	; 0x2a84 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x24e>
    2a7c:	10 e0       	ldi	r17, 0x00	; 0
    2a7e:	00 e0       	ldi	r16, 0x00	; 0
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	68 17       	cp	r22, r24
    2a8a:	79 07       	cpc	r23, r25
    2a8c:	1c f4       	brge	.+6      	; 0x2a94 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x25e>
    2a8e:	09 89       	ldd	r16, Y+17	; 0x11
    2a90:	1a 89       	ldd	r17, Y+18	; 0x12
    2a92:	bc 01       	movw	r22, r24
    2a94:	07 2e       	mov	r0, r23
    2a96:	00 0c       	add	r0, r0
    2a98:	88 0b       	sbc	r24, r24
    2a9a:	99 0b       	sbc	r25, r25
    2a9c:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <__floatsisf>
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <__mulsf3>
    2aac:	60 93 d7 4e 	sts	0x4ED7, r22	; 0x804ed7 <anomKNN+0x6>
    2ab0:	70 93 d8 4e 	sts	0x4ED8, r23	; 0x804ed8 <anomKNN+0x7>
    2ab4:	80 93 d9 4e 	sts	0x4ED9, r24	; 0x804ed9 <anomKNN+0x8>
    2ab8:	90 93 da 4e 	sts	0x4EDA, r25	; 0x804eda <anomKNN+0x9>
    2abc:	f2 ce       	rjmp	.-540    	; 0x28a2 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x6c>
    2abe:	e1 e0       	ldi	r30, 0x01	; 1
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	c6 cf       	rjmp	.-116    	; 0x2a50 <KNNClassifier::classify(float const*, int) [clone .constprop.9]+0x21a>

00002ac4 <KNNClassifier::~KNNClassifier()>:
__deleting_dtor ():
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	ec 01       	movw	r28, r24
    2aca:	0e 94 f6 08 	call	0x11ec	; 0x11ec <KNNClassifier::~KNNClassifier()>
operator delete():
    2ace:	ce 01       	movw	r24, r28
__deleting_dtor ():
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
operator delete():
    2ad4:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <free>

00002ad8 <KNNNode::~KNNNode()>:
__base_dtor ():
    2ad8:	26 e1       	ldi	r18, 0x16	; 22
    2ada:	31 e4       	ldi	r19, 0x41	; 65
    2adc:	fc 01       	movw	r30, r24
    2ade:	20 83       	st	Z, r18
    2ae0:	31 83       	std	Z+1, r19	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <KNNNode::~KNNNode()+0x16>
operator delete []():
    2aea:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <free>
__base_dtor ():
    2aee:	08 95       	ret

00002af0 <KNNNode::~KNNNode()>:
__deleting_dtor ():
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	ec 01       	movw	r28, r24
    2af6:	f0 df       	rcall	.-32     	; 0x2ad8 <KNNNode::~KNNNode()>
operator delete():
    2af8:	ce 01       	movw	r24, r28
__deleting_dtor ():
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
operator delete():
    2afe:	0c 94 ac 2c 	jmp	0x5958	; 0x5958 <free>

00002b02 <String::reserve(unsigned int)>:
reserve():
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	ec 01       	movw	r28, r24
    2b0c:	88 81       	ld	r24, Y
    2b0e:	99 81       	ldd	r25, Y+1	; 0x01
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	59 f0       	breq	.+22     	; 0x2b2a <String::reserve(unsigned int)+0x28>
    2b14:	2a 81       	ldd	r18, Y+2	; 0x02
    2b16:	3b 81       	ldd	r19, Y+3	; 0x03
    2b18:	26 17       	cp	r18, r22
    2b1a:	37 07       	cpc	r19, r23
    2b1c:	30 f0       	brcs	.+12     	; 0x2b2a <String::reserve(unsigned int)+0x28>
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret
    2b2a:	8b 01       	movw	r16, r22
changeBuffer():
    2b2c:	6f 5f       	subi	r22, 0xFF	; 255
    2b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b30:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <realloc>
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	59 f0       	breq	.+22     	; 0x2b4e <String::reserve(unsigned int)+0x4c>
    2b38:	88 83       	st	Y, r24
    2b3a:	99 83       	std	Y+1, r25	; 0x01
    2b3c:	0a 83       	std	Y+2, r16	; 0x02
    2b3e:	1b 83       	std	Y+3, r17	; 0x03
reserve():
    2b40:	2c 81       	ldd	r18, Y+4	; 0x04
    2b42:	3d 81       	ldd	r19, Y+5	; 0x05
    2b44:	23 2b       	or	r18, r19
    2b46:	59 f7       	brne	.-42     	; 0x2b1e <String::reserve(unsigned int)+0x1c>
    2b48:	fc 01       	movw	r30, r24
    2b4a:	10 82       	st	Z, r1
    2b4c:	e8 cf       	rjmp	.-48     	; 0x2b1e <String::reserve(unsigned int)+0x1c>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	e7 cf       	rjmp	.-50     	; 0x2b20 <String::reserve(unsigned int)+0x1e>

00002b52 <String::copy(char const*, unsigned int)>:
copy():
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	ec 01       	movw	r28, r24
    2b60:	7b 01       	movw	r14, r22
    2b62:	8a 01       	movw	r16, r20
    2b64:	ba 01       	movw	r22, r20
    2b66:	cd df       	rcall	.-102    	; 0x2b02 <String::reserve(unsigned int)>
    2b68:	28 81       	ld	r18, Y
    2b6a:	39 81       	ldd	r19, Y+1	; 0x01
    2b6c:	81 11       	cpse	r24, r1
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <String::copy(char const*, unsigned int)+0x46>
invalidate():
    2b70:	21 15       	cp	r18, r1
    2b72:	31 05       	cpc	r19, r1
    2b74:	19 f0       	breq	.+6      	; 0x2b7c <String::copy(char const*, unsigned int)+0x2a>
    2b76:	c9 01       	movw	r24, r18
    2b78:	0e 94 ac 2c 	call	0x5958	; 0x5958 <free>
    2b7c:	18 82       	st	Y, r1
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	1c 82       	std	Y+4, r1	; 0x04
    2b82:	1d 82       	std	Y+5, r1	; 0x05
    2b84:	1a 82       	std	Y+2, r1	; 0x02
    2b86:	1b 82       	std	Y+3, r1	; 0x03
copy():
    2b88:	ce 01       	movw	r24, r28
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	08 95       	ret
    2b98:	0c 83       	std	Y+4, r16	; 0x04
    2b9a:	1d 83       	std	Y+5, r17	; 0x05
    2b9c:	b7 01       	movw	r22, r14
    2b9e:	c9 01       	movw	r24, r18
    2ba0:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <strcpy>
    2ba4:	f1 cf       	rjmp	.-30     	; 0x2b88 <String::copy(char const*, unsigned int)+0x36>

00002ba6 <String::String(char const*)>:
_ZN6String4initEv():
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	10 82       	st	Z, r1
    2baa:	11 82       	std	Z+1, r1	; 0x01
    2bac:	12 82       	std	Z+2, r1	; 0x02
    2bae:	13 82       	std	Z+3, r1	; 0x03
    2bb0:	14 82       	std	Z+4, r1	; 0x04
    2bb2:	15 82       	std	Z+5, r1	; 0x05
__base_ctor ():
    2bb4:	fb 01       	movw	r30, r22
    2bb6:	01 90       	ld	r0, Z+
    2bb8:	00 20       	and	r0, r0
    2bba:	e9 f7       	brne	.-6      	; 0x2bb6 <String::String(char const*)+0x10>
    2bbc:	31 97       	sbiw	r30, 0x01	; 1
    2bbe:	af 01       	movw	r20, r30
    2bc0:	46 1b       	sub	r20, r22
    2bc2:	57 0b       	sbc	r21, r23
    2bc4:	c6 cf       	rjmp	.-116    	; 0x2b52 <String::copy(char const*, unsigned int)>

00002bc6 <setup>:
setup():
    2bc6:	2f 92       	push	r2
    2bc8:	3f 92       	push	r3
    2bca:	4f 92       	push	r4
    2bcc:	5f 92       	push	r5
    2bce:	6f 92       	push	r6
    2bd0:	7f 92       	push	r7
    2bd2:	8f 92       	push	r8
    2bd4:	9f 92       	push	r9
    2bd6:	af 92       	push	r10
    2bd8:	bf 92       	push	r11
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	c0 5f       	subi	r28, 0xF0	; 240
    2bf0:	d1 40       	sbci	r29, 0x01	; 1
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	2d b7       	in	r18, 0x3d	; 61
    2bf8:	3e b7       	in	r19, 0x3e	; 62
    2bfa:	c1 51       	subi	r28, 0x11	; 17
    2bfc:	de 4f       	sbci	r29, 0xFE	; 254
    2bfe:	28 83       	st	Y, r18
    2c00:	39 83       	std	Y+1, r19	; 0x01
    2c02:	cf 5e       	subi	r28, 0xEF	; 239
    2c04:	d1 40       	sbci	r29, 0x01	; 1
pinConfigure():
    2c06:	61 e8       	ldi	r22, 0x81	; 129
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2c10:	61 e8       	ldi	r22, 0x81	; 129
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2c1a:	61 e8       	ldi	r22, 0x81	; 129
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2c24:	61 e8       	ldi	r22, 0x81	; 129
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	83 e0       	ldi	r24, 0x03	; 3
    2c2a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2c2e:	61 e8       	ldi	r22, 0x81	; 129
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	8a e0       	ldi	r24, 0x0A	; 10
    2c34:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
off():
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	83 e0       	ldi	r24, 0x03	; 3
    2c54:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	8a e0       	ldi	r24, 0x0A	; 10
    2c5c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
on():
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2c68:	3f e7       	ldi	r19, 0x7F	; 127
    2c6a:	89 ea       	ldi	r24, 0xA9	; 169
    2c6c:	93 e0       	ldi	r25, 0x03	; 3
    2c6e:	31 50       	subi	r19, 0x01	; 1
    2c70:	80 40       	sbci	r24, 0x00	; 0
    2c72:	90 40       	sbci	r25, 0x00	; 0
    2c74:	e1 f7       	brne	.-8      	; 0x2c6e <setup+0xa8>
    2c76:	00 c0       	rjmp	.+0      	; 0x2c78 <setup+0xb2>
    2c78:	00 00       	nop
on():
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2c82:	af e7       	ldi	r26, 0x7F	; 127
    2c84:	b9 ea       	ldi	r27, 0xA9	; 169
    2c86:	e3 e0       	ldi	r30, 0x03	; 3
    2c88:	a1 50       	subi	r26, 0x01	; 1
    2c8a:	b0 40       	sbci	r27, 0x00	; 0
    2c8c:	e0 40       	sbci	r30, 0x00	; 0
    2c8e:	e1 f7       	brne	.-8      	; 0x2c88 <setup+0xc2>
    2c90:	00 c0       	rjmp	.+0      	; 0x2c92 <setup+0xcc>
    2c92:	00 00       	nop
on():
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	82 e0       	ldi	r24, 0x02	; 2
    2c98:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2c9c:	ff e7       	ldi	r31, 0x7F	; 127
    2c9e:	29 ea       	ldi	r18, 0xA9	; 169
    2ca0:	33 e0       	ldi	r19, 0x03	; 3
    2ca2:	f1 50       	subi	r31, 0x01	; 1
    2ca4:	20 40       	sbci	r18, 0x00	; 0
    2ca6:	30 40       	sbci	r19, 0x00	; 0
    2ca8:	e1 f7       	brne	.-8      	; 0x2ca2 <setup+0xdc>
    2caa:	00 c0       	rjmp	.+0      	; 0x2cac <setup+0xe6>
    2cac:	00 00       	nop
on():
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2cb6:	8f e7       	ldi	r24, 0x7F	; 127
    2cb8:	99 ea       	ldi	r25, 0xA9	; 169
    2cba:	a3 e0       	ldi	r26, 0x03	; 3
    2cbc:	81 50       	subi	r24, 0x01	; 1
    2cbe:	90 40       	sbci	r25, 0x00	; 0
    2cc0:	a0 40       	sbci	r26, 0x00	; 0
    2cc2:	e1 f7       	brne	.-8      	; 0x2cbc <setup+0xf6>
    2cc4:	00 c0       	rjmp	.+0      	; 0x2cc6 <setup+0x100>
    2cc6:	00 00       	nop
on():
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	8a e0       	ldi	r24, 0x0A	; 10
    2ccc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2cd0:	bf e7       	ldi	r27, 0x7F	; 127
    2cd2:	e9 ea       	ldi	r30, 0xA9	; 169
    2cd4:	f3 e0       	ldi	r31, 0x03	; 3
    2cd6:	b1 50       	subi	r27, 0x01	; 1
    2cd8:	e0 40       	sbci	r30, 0x00	; 0
    2cda:	f0 40       	sbci	r31, 0x00	; 0
    2cdc:	e1 f7       	brne	.-8      	; 0x2cd6 <setup+0x110>
    2cde:	00 c0       	rjmp	.+0      	; 0x2ce0 <setup+0x11a>
    2ce0:	00 00       	nop
setup():
    2ce2:	10 e0       	ldi	r17, 0x00	; 0
    2ce4:	00 e0       	ldi	r16, 0x00	; 0
startupCycle():
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	c8 01       	movw	r24, r16
    2cea:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
_delay_ms():
    2cee:	2f e7       	ldi	r18, 0x7F	; 127
    2cf0:	39 ea       	ldi	r19, 0xA9	; 169
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	21 50       	subi	r18, 0x01	; 1
    2cf6:	30 40       	sbci	r19, 0x00	; 0
    2cf8:	80 40       	sbci	r24, 0x00	; 0
    2cfa:	e1 f7       	brne	.-8      	; 0x2cf4 <setup+0x12e>
    2cfc:	00 c0       	rjmp	.+0      	; 0x2cfe <setup+0x138>
    2cfe:	00 00       	nop
startupCycle():
    2d00:	0f 5f       	subi	r16, 0xFF	; 255
    2d02:	1f 4f       	sbci	r17, 0xFF	; 255
    2d04:	05 30       	cpi	r16, 0x05	; 5
    2d06:	11 05       	cpc	r17, r1
    2d08:	71 f7       	brne	.-36     	; 0x2ce6 <setup+0x120>
on():
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	8a e0       	ldi	r24, 0x0A	; 10
    2d0e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2d12:	9f e7       	ldi	r25, 0x7F	; 127
    2d14:	a9 ea       	ldi	r26, 0xA9	; 169
    2d16:	b3 e0       	ldi	r27, 0x03	; 3
    2d18:	91 50       	subi	r25, 0x01	; 1
    2d1a:	a0 40       	sbci	r26, 0x00	; 0
    2d1c:	b0 40       	sbci	r27, 0x00	; 0
    2d1e:	e1 f7       	brne	.-8      	; 0x2d18 <setup+0x152>
    2d20:	00 c0       	rjmp	.+0      	; 0x2d22 <setup+0x15c>
    2d22:	00 00       	nop
on():
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	83 e0       	ldi	r24, 0x03	; 3
    2d28:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2d2c:	ef e7       	ldi	r30, 0x7F	; 127
    2d2e:	f9 ea       	ldi	r31, 0xA9	; 169
    2d30:	23 e0       	ldi	r18, 0x03	; 3
    2d32:	e1 50       	subi	r30, 0x01	; 1
    2d34:	f0 40       	sbci	r31, 0x00	; 0
    2d36:	20 40       	sbci	r18, 0x00	; 0
    2d38:	e1 f7       	brne	.-8      	; 0x2d32 <setup+0x16c>
    2d3a:	00 c0       	rjmp	.+0      	; 0x2d3c <setup+0x176>
    2d3c:	00 00       	nop
on():
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2d46:	3f e7       	ldi	r19, 0x7F	; 127
    2d48:	89 ea       	ldi	r24, 0xA9	; 169
    2d4a:	93 e0       	ldi	r25, 0x03	; 3
    2d4c:	31 50       	subi	r19, 0x01	; 1
    2d4e:	80 40       	sbci	r24, 0x00	; 0
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	e1 f7       	brne	.-8      	; 0x2d4c <setup+0x186>
    2d54:	00 c0       	rjmp	.+0      	; 0x2d56 <setup+0x190>
    2d56:	00 00       	nop
on():
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2d60:	af e7       	ldi	r26, 0x7F	; 127
    2d62:	b9 ea       	ldi	r27, 0xA9	; 169
    2d64:	e3 e0       	ldi	r30, 0x03	; 3
    2d66:	a1 50       	subi	r26, 0x01	; 1
    2d68:	b0 40       	sbci	r27, 0x00	; 0
    2d6a:	e0 40       	sbci	r30, 0x00	; 0
    2d6c:	e1 f7       	brne	.-8      	; 0x2d66 <setup+0x1a0>
    2d6e:	00 c0       	rjmp	.+0      	; 0x2d70 <setup+0x1aa>
    2d70:	00 00       	nop
on():
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2d7a:	ff e7       	ldi	r31, 0x7F	; 127
    2d7c:	29 ea       	ldi	r18, 0xA9	; 169
    2d7e:	33 e0       	ldi	r19, 0x03	; 3
    2d80:	f1 50       	subi	r31, 0x01	; 1
    2d82:	20 40       	sbci	r18, 0x00	; 0
    2d84:	30 40       	sbci	r19, 0x00	; 0
    2d86:	e1 f7       	brne	.-8      	; 0x2d80 <setup+0x1ba>
    2d88:	00 c0       	rjmp	.+0      	; 0x2d8a <setup+0x1c4>
    2d8a:	00 00       	nop
setup():
    2d8c:	04 e0       	ldi	r16, 0x04	; 4
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
startupCycle():
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	c8 01       	movw	r24, r16
    2d94:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LedCtrlClass::off(Led, bool) [clone .constprop.58]>
_delay_ms():
    2d98:	8f e7       	ldi	r24, 0x7F	; 127
    2d9a:	99 ea       	ldi	r25, 0xA9	; 169
    2d9c:	a3 e0       	ldi	r26, 0x03	; 3
    2d9e:	81 50       	subi	r24, 0x01	; 1
    2da0:	90 40       	sbci	r25, 0x00	; 0
    2da2:	a0 40       	sbci	r26, 0x00	; 0
    2da4:	e1 f7       	brne	.-8      	; 0x2d9e <setup+0x1d8>
    2da6:	00 c0       	rjmp	.+0      	; 0x2da8 <setup+0x1e2>
    2da8:	00 00       	nop
startupCycle():
    2daa:	01 50       	subi	r16, 0x01	; 1
    2dac:	11 09       	sbc	r17, r1
    2dae:	80 f7       	brcc	.-32     	; 0x2d90 <setup+0x1ca>
begin():
    2db0:	00 91 bc 4e 	lds	r16, 0x4EBC	; 0x804ebc <Log>
    2db4:	10 91 bd 4e 	lds	r17, 0x4EBD	; 0x804ebd <Log+0x1>
    2db8:	f8 01       	movw	r30, r16
    2dba:	86 85       	ldd	r24, Z+14	; 0x0e
    2dbc:	80 ff       	sbrs	r24, 0
    2dbe:	1b c0       	rjmp	.+54     	; 0x2df6 <setup+0x230>
end():
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	f0 81       	ld	r31, Z
    2dc4:	e0 2d       	mov	r30, r0
    2dc6:	06 80       	ldd	r0, Z+6	; 0x06
    2dc8:	f7 81       	ldd	r31, Z+7	; 0x07
    2dca:	e0 2d       	mov	r30, r0
    2dcc:	c8 01       	movw	r24, r16
    2dce:	09 95       	icall
    2dd0:	d8 01       	movw	r26, r16
    2dd2:	18 96       	adiw	r26, 0x08	; 8
    2dd4:	ed 91       	ld	r30, X+
    2dd6:	fc 91       	ld	r31, X
    2dd8:	19 97       	sbiw	r26, 0x09	; 9
    2dda:	86 81       	ldd	r24, Z+6	; 0x06
    2ddc:	16 82       	std	Z+6, r1	; 0x06
    2dde:	85 81       	ldd	r24, Z+5	; 0x05
    2de0:	15 82       	std	Z+5, r1	; 0x05
    2de2:	80 e4       	ldi	r24, 0x40	; 64
    2de4:	84 83       	std	Z+4, r24	; 0x04
    2de6:	50 96       	adiw	r26, 0x10	; 16
    2de8:	8c 91       	ld	r24, X
    2dea:	50 97       	sbiw	r26, 0x10	; 16
    2dec:	1f 96       	adiw	r26, 0x0f	; 15
    2dee:	8c 93       	st	X, r24
    2df0:	1f 97       	sbiw	r26, 0x0f	; 15
    2df2:	1e 96       	adiw	r26, 0x0e	; 14
    2df4:	1c 92       	st	X, r1
begin():
    2df6:	6f b7       	in	r22, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	d8 01       	movw	r26, r16
    2dfc:	18 96       	adiw	r26, 0x08	; 8
    2dfe:	ed 91       	ld	r30, X+
    2e00:	fc 91       	ld	r31, X
    2e02:	19 97       	sbiw	r26, 0x09	; 9
    2e04:	16 82       	std	Z+6, r1	; 0x06
    2e06:	33 e0       	ldi	r19, 0x03	; 3
    2e08:	37 83       	std	Z+7, r19	; 0x07
    2e0a:	81 e4       	ldi	r24, 0x41	; 65
    2e0c:	93 e0       	ldi	r25, 0x03	; 3
    2e0e:	80 87       	std	Z+8, r24	; 0x08
    2e10:	91 87       	std	Z+9, r25	; 0x09
    2e12:	14 86       	std	Z+12, r1	; 0x0c
    2e14:	80 e8       	ldi	r24, 0x80	; 128
    2e16:	85 83       	std	Z+5, r24	; 0x05
    2e18:	80 ec       	ldi	r24, 0xC0	; 192
    2e1a:	86 83       	std	Z+6, r24	; 0x06
    2e1c:	1d 96       	adiw	r26, 0x0d	; 13
    2e1e:	2c 91       	ld	r18, X
    2e20:	1d 97       	sbiw	r26, 0x0d	; 13
    2e22:	1c 96       	adiw	r26, 0x0c	; 12
    2e24:	7c 91       	ld	r23, X
    2e26:	1c 97       	sbiw	r26, 0x0c	; 12
    2e28:	1a 96       	adiw	r26, 0x0a	; 10
    2e2a:	8d 91       	ld	r24, X+
    2e2c:	9c 91       	ld	r25, X
_set_pins():
    2e2e:	fc 01       	movw	r30, r24
    2e30:	23 9f       	mul	r18, r19
    2e32:	e0 0d       	add	r30, r0
    2e34:	f1 1d       	adc	r31, r1
    2e36:	11 24       	eor	r1, r1
    2e38:	45 91       	lpm	r20, Z+
    2e3a:	54 91       	lpm	r21, Z
    2e3c:	27 17       	cp	r18, r23
    2e3e:	08 f0       	brcs	.+2      	; 0x2e42 <setup+0x27c>
    2e40:	40 c0       	rjmp	.+128    	; 0x2ec2 <setup+0x2fc>
_pinMode():
    2e42:	59 32       	cpi	r21, 0x29	; 41
    2e44:	90 f4       	brcc	.+36     	; 0x2e6a <setup+0x2a4>
check_valid_digital_pin():
    2e46:	25 2f       	mov	r18, r21
    2e48:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    2e4a:	f9 01       	movw	r30, r18
    2e4c:	e7 51       	subi	r30, 0x17	; 23
    2e4e:	ff 4b       	sbci	r31, 0xBF	; 191
    2e50:	a0 81       	ld	r26, Z
    2e52:	af 3f       	cpi	r26, 0xFF	; 255
    2e54:	51 f0       	breq	.+20     	; 0x2e6a <setup+0x2a4>
    2e56:	29 56       	subi	r18, 0x69	; 105
    2e58:	3f 4b       	sbci	r19, 0xBF	; 191
    2e5a:	f9 01       	movw	r30, r18
    2e5c:	30 81       	ld	r19, Z
    2e5e:	20 e2       	ldi	r18, 0x20	; 32
    2e60:	32 9f       	mul	r19, r18
    2e62:	f0 01       	movw	r30, r0
    2e64:	11 24       	eor	r1, r1
    2e66:	fc 5f       	subi	r31, 0xFC	; 252
    2e68:	a1 83       	std	Z+1, r26	; 0x01
_set_pins():
    2e6a:	21 e0       	ldi	r18, 0x01	; 1
    2e6c:	25 0f       	add	r18, r21
_pinMode():
    2e6e:	29 32       	cpi	r18, 0x29	; 41
    2e70:	40 f5       	brcc	.+80     	; 0x2ec2 <setup+0x2fc>
check_valid_digital_pin():
    2e72:	30 e0       	ldi	r19, 0x00	; 0
_pinMode():
    2e74:	f9 01       	movw	r30, r18
    2e76:	e7 51       	subi	r30, 0x17	; 23
    2e78:	ff 4b       	sbci	r31, 0xBF	; 191
    2e7a:	f0 80       	ld	r15, Z
    2e7c:	af ef       	ldi	r26, 0xFF	; 255
    2e7e:	fa 16       	cp	r15, r26
    2e80:	01 f1       	breq	.+64     	; 0x2ec2 <setup+0x2fc>
    2e82:	f9 01       	movw	r30, r18
    2e84:	e9 56       	subi	r30, 0x69	; 105
    2e86:	ff 4b       	sbci	r31, 0xBF	; 191
    2e88:	e0 81       	ld	r30, Z
    2e8a:	b0 e2       	ldi	r27, 0x20	; 32
    2e8c:	eb 9f       	mul	r30, r27
    2e8e:	80 01       	movw	r16, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	1c 5f       	subi	r17, 0xFC	; 252
    2e94:	20 54       	subi	r18, 0x40	; 64
    2e96:	3f 4b       	sbci	r19, 0xBF	; 191
    2e98:	f9 01       	movw	r30, r18
    2e9a:	a0 81       	ld	r26, Z
setup():
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	e0 e0       	ldi	r30, 0x00	; 0
_pinMode():
    2ea0:	a8 30       	cpi	r26, 0x08	; 8
    2ea2:	30 f4       	brcc	.+12     	; 0x2eb0 <setup+0x2ea>
    2ea4:	98 01       	movw	r18, r16
    2ea6:	20 5f       	subi	r18, 0xF0	; 240
    2ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eaa:	f9 01       	movw	r30, r18
    2eac:	ea 0f       	add	r30, r26
    2eae:	f1 1d       	adc	r31, r1
    2eb0:	3f b7       	in	r19, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	d8 01       	movw	r26, r16
    2eb6:	12 96       	adiw	r26, 0x02	; 2
    2eb8:	fc 92       	st	X, r15
    2eba:	20 81       	ld	r18, Z
    2ebc:	28 60       	ori	r18, 0x08	; 8
    2ebe:	20 83       	st	Z, r18
    2ec0:	3f bf       	out	0x3f, r19	; 63
_mux_set():
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	b3 e0       	ldi	r27, 0x03	; 3
    2ec6:	7b 9f       	mul	r23, r27
    2ec8:	e0 0d       	add	r30, r0
    2eca:	f1 1d       	adc	r31, r1
    2ecc:	11 24       	eor	r1, r1
    2ece:	31 96       	adiw	r30, 0x01	; 1
    2ed0:	25 91       	lpm	r18, Z+
    2ed2:	34 91       	lpm	r19, Z
    2ed4:	f9 01       	movw	r30, r18
    2ed6:	ff 27       	eor	r31, r31
    2ed8:	ee 51       	subi	r30, 0x1E	; 30
    2eda:	fa 4f       	sbci	r31, 0xFA	; 250
    2edc:	90 81       	ld	r25, Z
    2ede:	83 2f       	mov	r24, r19
    2ee0:	80 95       	com	r24
    2ee2:	89 23       	and	r24, r25
    2ee4:	48 2b       	or	r20, r24
    2ee6:	40 83       	st	Z, r20
begin():
    2ee8:	6f bf       	out	0x3f, r22	; 63
_Z12pinConfigureIJEEvh15pin_configure_tDpRKT_():
    2eea:	62 e0       	ldi	r22, 0x02	; 2
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	84 e0       	ldi	r24, 0x04	; 4
    2ef0:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
begin():
    2ef4:	40 ec       	ldi	r20, 0xC0	; 192
    2ef6:	57 e2       	ldi	r21, 0x27	; 39
    2ef8:	69 e0       	ldi	r22, 0x09	; 9
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	ce 01       	movw	r24, r28
    2efe:	8f 58       	subi	r24, 0x8F	; 143
    2f00:	9e 4f       	sbci	r25, 0xFE	; 254
    2f02:	0e 94 39 09 	call	0x1272	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    2f06:	80 91 fd 46 	lds	r24, 0x46FD	; 0x8046fd <initialized>
    2f0a:	81 11       	cpse	r24, r1
    2f0c:	8f c0       	rjmp	.+286    	; 0x302c <setup+0x466>
pinConfigure():
    2f0e:	61 e8       	ldi	r22, 0x81	; 129
    2f10:	70 e0       	ldi	r23, 0x00	; 0
    2f12:	8e e0       	ldi	r24, 0x0E	; 14
    2f14:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2f18:	62 e8       	ldi	r22, 0x82	; 130
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	8f e0       	ldi	r24, 0x0F	; 15
    2f1e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
    2f22:	61 e8       	ldi	r22, 0x81	; 129
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	85 e1       	ldi	r24, 0x15	; 21
    2f28:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
begin():
    2f2c:	61 e0       	ldi	r22, 0x01	; 1
    2f2e:	85 e1       	ldi	r24, 0x15	; 21
    2f30:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
pinConfigure():
    2f34:	62 e9       	ldi	r22, 0x92	; 146
    2f36:	71 e0       	ldi	r23, 0x01	; 1
    2f38:	82 e1       	ldi	r24, 0x12	; 18
    2f3a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
attachInterrupt():
    2f3e:	e0 91 06 40 	lds	r30, 0x4006	; 0x804006 <intFunc+0x4>
    2f42:	f0 91 07 40 	lds	r31, 0x4007	; 0x804007 <intFunc+0x5>
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	69 f0       	breq	.+26     	; 0x2f64 <setup+0x39e>
    2f4a:	86 ea       	ldi	r24, 0xA6	; 166
    2f4c:	99 e0       	ldi	r25, 0x09	; 9
    2f4e:	80 87       	std	Z+8, r24	; 0x08
    2f50:	91 87       	std	Z+9, r25	; 0x09
    2f52:	9f b7       	in	r25, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <__TEXT_REGION_LENGTH__+0x7e0454>
    2f5a:	88 7f       	andi	r24, 0xF8	; 248
    2f5c:	81 60       	ori	r24, 0x01	; 1
    2f5e:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__TEXT_REGION_LENGTH__+0x7e0454>
    2f62:	9f bf       	out	0x3f, r25	; 63
pinConfigure():
    2f64:	61 e8       	ldi	r22, 0x81	; 129
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	83 e1       	ldi	r24, 0x13	; 19
    2f6a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_pinconfigure(unsigned char, unsigned int)>
begin():
    2f6e:	61 e0       	ldi	r22, 0x01	; 1
    2f70:	83 e1       	ldi	r24, 0x13	; 19
    2f72:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    2f76:	ef e5       	ldi	r30, 0x5F	; 95
    2f78:	fa ee       	ldi	r31, 0xEA	; 234
    2f7a:	31 97       	sbiw	r30, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <setup+0x3b4>
    2f7e:	00 c0       	rjmp	.+0      	; 0x2f80 <setup+0x3ba>
    2f80:	00 00       	nop
begin():
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	83 e1       	ldi	r24, 0x13	; 19
    2f86:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
    2f8a:	81 e4       	ldi	r24, 0x41	; 65
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	80 93 28 08 	sts	0x0828, r24	; 0x800828 <__TEXT_REGION_LENGTH__+0x7e0828>
    2f92:	90 93 29 08 	sts	0x0829, r25	; 0x800829 <__TEXT_REGION_LENGTH__+0x7e0829>
    2f96:	80 ea       	ldi	r24, 0xA0	; 160
    2f98:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    2f9c:	80 ec       	ldi	r24, 0xC0	; 192
    2f9e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7e0826>
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <__TEXT_REGION_LENGTH__+0x7e0827>
    2fa8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <rtsUpdate()>
waitForURC():
    2fac:	a1 2c       	mov	r10, r1
    2fae:	b1 2c       	mov	r11, r1
    2fb0:	65 01       	movw	r12, r10
    2fb2:	f1 2c       	mov	r15, r1
    2fb4:	e1 2c       	mov	r14, r1
    2fb6:	00 e2       	ldi	r16, 0x20	; 32
    2fb8:	1e e4       	ldi	r17, 0x4E	; 78
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	51 e0       	ldi	r21, 0x01	; 1
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	87 e5       	ldi	r24, 0x57	; 87
    2fc8:	92 e0       	ldi	r25, 0x02	; 2
    2fca:	f0 d8       	rcall	.-3616   	; 0x21ac <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]>
begin():
    2fcc:	81 11       	cpse	r24, r1
    2fce:	29 c0       	rjmp	.+82     	; 0x3022 <setup+0x45c>
    2fd0:	84 e2       	ldi	r24, 0x24	; 36
    2fd2:	92 e0       	ldi	r25, 0x02	; 2
    2fd4:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    2fd8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SequansControllerClass::end() [clone .constprop.28]>
setup():
    2fdc:	85 e0       	ldi	r24, 0x05	; 5
    2fde:	97 e0       	ldi	r25, 0x07	; 7
    2fe0:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    2fe4:	c1 51       	subi	r28, 0x11	; 17
    2fe6:	de 4f       	sbci	r29, 0xFE	; 254
    2fe8:	28 81       	ld	r18, Y
    2fea:	39 81       	ldd	r19, Y+1	; 0x01
    2fec:	cf 5e       	subi	r28, 0xEF	; 239
    2fee:	d1 40       	sbci	r29, 0x01	; 1
    2ff0:	2d bf       	out	0x3d, r18	; 61
    2ff2:	3e bf       	out	0x3e, r19	; 62
    2ff4:	c0 51       	subi	r28, 0x10	; 16
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	9f 90       	pop	r9
    3012:	8f 90       	pop	r8
    3014:	7f 90       	pop	r7
    3016:	6f 90       	pop	r6
    3018:	5f 90       	pop	r5
    301a:	4f 90       	pop	r4
    301c:	3f 90       	pop	r3
    301e:	2f 90       	pop	r2
    3020:	08 95       	ret
begin():
    3022:	0e 94 97 09 	call	0x132e	; 0x132e <SequansControllerClass::clearReceiveBuffer() [clone .constprop.63]>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 fd 46 	sts	0x46FD, r24	; 0x8046fd <initialized>
    302c:	1f 92       	push	r1
    302e:	1f 92       	push	r1
    3030:	1f 92       	push	r1
    3032:	1f 92       	push	r1
    3034:	80 eb       	ldi	r24, 0xB0	; 176
    3036:	97 e0       	ldi	r25, 0x07	; 7
    3038:	9f 93       	push	r25
    303a:	8f 93       	push	r24
    303c:	4a ec       	ldi	r20, 0xCA	; 202
    303e:	64 2e       	mov	r6, r20
    3040:	49 e4       	ldi	r20, 0x49	; 73
    3042:	74 2e       	mov	r7, r20
    3044:	7f 92       	push	r7
    3046:	6f 92       	push	r6
    3048:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
registerCallback():
    304c:	21 e0       	ldi	r18, 0x01	; 1
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	66 eb       	ldi	r22, 0xB6	; 182
    3052:	79 e0       	ldi	r23, 0x09	; 9
    3054:	8a eb       	ldi	r24, 0xBA	; 186
    3056:	97 e0       	ldi	r25, 0x07	; 7
    3058:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]>
begin():
    305c:	1f 92       	push	r1
    305e:	1f 92       	push	r1
    3060:	1f 92       	push	r1
    3062:	1f 92       	push	r1
    3064:	8e e2       	ldi	r24, 0x2E	; 46
    3066:	95 e0       	ldi	r25, 0x05	; 5
    3068:	9f 93       	push	r25
    306a:	8f 93       	push	r24
    306c:	7f 92       	push	r7
    306e:	6f 92       	push	r6
    3070:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    3074:	1f 92       	push	r1
    3076:	1f 92       	push	r1
    3078:	1f 92       	push	r1
    307a:	1f 92       	push	r1
    307c:	84 e2       	ldi	r24, 0x24	; 36
    307e:	95 e0       	ldi	r25, 0x05	; 5
    3080:	9f 93       	push	r25
    3082:	8f 93       	push	r24
    3084:	7f 92       	push	r7
    3086:	6f 92       	push	r6
    3088:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    308c:	1f 92       	push	r1
    308e:	1f 92       	push	r1
    3090:	1f 92       	push	r1
    3092:	1f 92       	push	r1
    3094:	89 e1       	ldi	r24, 0x19	; 25
    3096:	95 e0       	ldi	r25, 0x05	; 5
    3098:	9f 93       	push	r25
    309a:	8f 93       	push	r24
    309c:	7f 92       	push	r7
    309e:	6f 92       	push	r6
    30a0:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    30a4:	2d b7       	in	r18, 0x3d	; 61
    30a6:	3e b7       	in	r19, 0x3e	; 62
    30a8:	20 5e       	subi	r18, 0xE0	; 224
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	2d bf       	out	0x3d, r18	; 61
    30ae:	3e bf       	out	0x3e, r19	; 62
    30b0:	1f 92       	push	r1
    30b2:	1f 92       	push	r1
    30b4:	1f 92       	push	r1
    30b6:	1f 92       	push	r1
    30b8:	8f e0       	ldi	r24, 0x0F	; 15
    30ba:	95 e0       	ldi	r25, 0x05	; 5
    30bc:	9f 93       	push	r25
    30be:	8f 93       	push	r24
    30c0:	7f 92       	push	r7
    30c2:	6f 92       	push	r6
    30c4:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    30c8:	2e 01       	movw	r4, r28
    30ca:	31 e0       	ldi	r19, 0x01	; 1
    30cc:	43 0e       	add	r4, r19
    30ce:	53 1e       	adc	r5, r19
    30d0:	f2 01       	movw	r30, r4
    30d2:	11 92       	st	Z+, r1
    30d4:	11 92       	st	Z+, r1
    30d6:	8e e3       	ldi	r24, 0x3E	; 62
    30d8:	df 01       	movw	r26, r30
    30da:	1d 92       	st	X+, r1
    30dc:	8a 95       	dec	r24
    30de:	e9 f7       	brne	.-6      	; 0x30da <setup+0x514>
    30e0:	4e 01       	movw	r8, r28
    30e2:	bf eb       	ldi	r27, 0xBF	; 191
    30e4:	8b 1a       	sub	r8, r27
    30e6:	be ef       	ldi	r27, 0xFE	; 254
    30e8:	9b 0a       	sbc	r9, r27
    30ea:	f4 01       	movw	r30, r8
    30ec:	11 92       	st	Z+, r1
    30ee:	11 92       	st	Z+, r1
    30f0:	8e e1       	ldi	r24, 0x1E	; 30
    30f2:	df 01       	movw	r26, r30
    30f4:	1d 92       	st	X+, r1
    30f6:	8a 95       	dec	r24
    30f8:	e9 f7       	brne	.-6      	; 0x30f4 <setup+0x52e>
waitForURC():
    30fa:	a1 2c       	mov	r10, r1
    30fc:	b1 2c       	mov	r11, r1
    30fe:	65 01       	movw	r12, r10
    3100:	f1 2c       	mov	r15, r1
    3102:	e1 2c       	mov	r14, r1
    3104:	00 e2       	ldi	r16, 0x20	; 32
    3106:	1e e4       	ldi	r17, 0x4E	; 78
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	51 e0       	ldi	r21, 0x01	; 1
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	8a ea       	ldi	r24, 0xAA	; 170
    3116:	97 e0       	ldi	r25, 0x07	; 7
    3118:	49 d8       	rcall	.-3950   	; 0x21ac <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]>
registerCallback():
    311a:	21 e0       	ldi	r18, 0x01	; 1
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	6f e0       	ldi	r22, 0x0F	; 15
    3120:	7f e0       	ldi	r23, 0x0F	; 15
    3122:	8a ea       	ldi	r24, 0xAA	; 170
    3124:	97 e0       	ldi	r25, 0x07	; 7
    3126:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <SequansControllerClass::registerCallback(char const*, void (*)(char*), bool, bool) [clone .constprop.50]>
begin():
    312a:	1f 92       	push	r1
    312c:	80 e4       	ldi	r24, 0x40	; 64
    312e:	8f 93       	push	r24
    3130:	5f 92       	push	r5
    3132:	4f 92       	push	r4
    3134:	86 e0       	ldi	r24, 0x06	; 6
    3136:	95 e0       	ldi	r25, 0x05	; 5
    3138:	9f 93       	push	r25
    313a:	8f 93       	push	r24
    313c:	7f 92       	push	r7
    313e:	6f 92       	push	r6
    3140:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    3144:	ed b7       	in	r30, 0x3d	; 61
    3146:	fe b7       	in	r31, 0x3e	; 62
    3148:	70 96       	adiw	r30, 0x10	; 16
    314a:	ed bf       	out	0x3d, r30	; 61
    314c:	fe bf       	out	0x3e, r31	; 62
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	39 f0       	breq	.+14     	; 0x3160 <setup+0x59a>
    3152:	8c ed       	ldi	r24, 0xDC	; 220
    3154:	94 e0       	ldi	r25, 0x04	; 4
    3156:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    315a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LteClass::end() [clone .constprop.24]>
    315e:	3e cf       	rjmp	.-388    	; 0x2fdc <setup+0x416>
    3160:	0a e3       	ldi	r16, 0x3A	; 58
    3162:	20 e2       	ldi	r18, 0x20	; 32
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	a4 01       	movw	r20, r8
    3168:	60 e0       	ldi	r22, 0x00	; 0
    316a:	c2 01       	movw	r24, r4
    316c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    3170:	81 11       	cpse	r24, r1
    3172:	03 c0       	rjmp	.+6      	; 0x317a <setup+0x5b4>
    3174:	8d eb       	ldi	r24, 0xBD	; 189
    3176:	94 e0       	ldi	r25, 0x04	; 4
    3178:	ee cf       	rjmp	.-36     	; 0x3156 <setup+0x590>
    317a:	45 e0       	ldi	r20, 0x05	; 5
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	67 eb       	ldi	r22, 0xB7	; 183
    3180:	74 e0       	ldi	r23, 0x04	; 4
    3182:	c4 01       	movw	r24, r8
    3184:	0e 94 ac 28 	call	0x5158	; 0x5158 <strncmp_P>
    3188:	3c 01       	movw	r6, r24
    318a:	89 2b       	or	r24, r25
    318c:	a9 f0       	breq	.+42     	; 0x31b8 <setup+0x5f2>
    318e:	9f 92       	push	r9
    3190:	8f 92       	push	r8
    3192:	84 e9       	ldi	r24, 0x94	; 148
    3194:	94 e0       	ldi	r25, 0x04	; 4
    3196:	9f 93       	push	r25
    3198:	8f 93       	push	r24
    319a:	8c eb       	ldi	r24, 0xBC	; 188
    319c:	9e e4       	ldi	r25, 0x4E	; 78
    319e:	9f 93       	push	r25
    31a0:	8f 93       	push	r24
    31a2:	0e 94 30 0a 	call	0x1460	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    31a6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LteClass::end() [clone .constprop.24]>
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	12 cf       	rjmp	.-476    	; 0x2fdc <setup+0x416>
    31b8:	8d e7       	ldi	r24, 0x7D	; 125
    31ba:	94 e0       	ldi	r25, 0x04	; 4
    31bc:	9f 93       	push	r25
    31be:	8f 93       	push	r24
    31c0:	8c eb       	ldi	r24, 0xBC	; 188
    31c2:	9e e4       	ldi	r25, 0x4E	; 78
    31c4:	9f 93       	push	r25
    31c6:	8f 93       	push	r24
    31c8:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	3b e7       	ldi	r19, 0x7B	; 123
    31d6:	e3 2e       	mov	r14, r19
    31d8:	34 e0       	ldi	r19, 0x04	; 4
    31da:	f3 2e       	mov	r15, r19
    31dc:	0c eb       	ldi	r16, 0xBC	; 188
    31de:	1e e4       	ldi	r17, 0x4E	; 78
isConnected():
    31e0:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
begin():
    31e4:	81 11       	cpse	r24, r1
    31e6:	23 c0       	rjmp	.+70     	; 0x322e <setup+0x668>
    31e8:	ce 01       	movw	r24, r28
    31ea:	8f 58       	subi	r24, 0x8F	; 143
    31ec:	9e 4f       	sbci	r25, 0xFE	; 254
    31ee:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    31f2:	81 11       	cpse	r24, r1
    31f4:	1c c0       	rjmp	.+56     	; 0x322e <setup+0x668>
toggle():
    31f6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalRead>
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	81 11       	cpse	r24, r1
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <digitalWrite>
_delay_ms():
    3206:	ff ef       	ldi	r31, 0xFF	; 255
    3208:	2e e9       	ldi	r18, 0x9E	; 158
    320a:	34 e2       	ldi	r19, 0x24	; 36
    320c:	f1 50       	subi	r31, 0x01	; 1
    320e:	20 40       	sbci	r18, 0x00	; 0
    3210:	30 40       	sbci	r19, 0x00	; 0
    3212:	e1 f7       	brne	.-8      	; 0x320c <setup+0x646>
    3214:	00 c0       	rjmp	.+0      	; 0x3216 <setup+0x650>
    3216:	00 00       	nop
begin():
    3218:	ff 92       	push	r15
    321a:	ef 92       	push	r14
    321c:	1f 93       	push	r17
    321e:	0f 93       	push	r16
    3220:	0e 94 12 0a 	call	0x1424	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	d9 cf       	rjmp	.-78     	; 0x31e0 <setup+0x61a>
isConnected():
    322e:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
begin():
    3232:	81 11       	cpse	r24, r1
    3234:	0f c0       	rjmp	.+30     	; 0x3254 <setup+0x68e>
    3236:	84 ee       	ldi	r24, 0xE4	; 228
    3238:	93 e0       	ldi	r25, 0x03	; 3
    323a:	9f 93       	push	r25
    323c:	8f 93       	push	r24
    323e:	8e e6       	ldi	r24, 0x6E	; 110
    3240:	94 e0       	ldi	r25, 0x04	; 4
    3242:	9f 93       	push	r25
    3244:	8f 93       	push	r24
    3246:	8c eb       	ldi	r24, 0xBC	; 188
    3248:	9e e4       	ldi	r25, 0x4E	; 78
    324a:	9f 93       	push	r25
    324c:	8f 93       	push	r24
    324e:	0e 94 12 0a 	call	0x1424	; 0x1424 <LogClass::rawf(__FlashStringHelper const*, ...) [clone .constprop.73]>
    3252:	a9 cf       	rjmp	.-174    	; 0x31a6 <setup+0x5e0>
    3254:	80 e6       	ldi	r24, 0x60	; 96
    3256:	91 e4       	ldi	r25, 0x41	; 65
    3258:	9f 93       	push	r25
    325a:	8f 93       	push	r24
    325c:	8c eb       	ldi	r24, 0xBC	; 188
    325e:	9e e4       	ldi	r25, 0x4E	; 78
    3260:	9f 93       	push	r25
    3262:	8f 93       	push	r24
    3264:	b8 da       	rcall	.-2704   	; 0x27d6 <LogClass::rawf(char const*, ...) [clone .constprop.21]>
    3266:	1f 92       	push	r1
    3268:	80 e4       	ldi	r24, 0x40	; 64
    326a:	8f 93       	push	r24
    326c:	5f 92       	push	r5
    326e:	4f 92       	push	r4
    3270:	8b ed       	ldi	r24, 0xDB	; 219
    3272:	93 e0       	ldi	r25, 0x03	; 3
    3274:	9f 93       	push	r25
    3276:	8f 93       	push	r24
    3278:	8a ec       	ldi	r24, 0xCA	; 202
    327a:	99 e4       	ldi	r25, 0x49	; 73
    327c:	9f 93       	push	r25
    327e:	8f 93       	push	r24
    3280:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    3284:	ad b7       	in	r26, 0x3d	; 61
    3286:	be b7       	in	r27, 0x3e	; 62
    3288:	1c 96       	adiw	r26, 0x0c	; 12
    328a:	ad bf       	out	0x3d, r26	; 61
    328c:	be bf       	out	0x3e, r27	; 62
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	19 f0       	breq	.+6      	; 0x3298 <setup+0x6d2>
    3292:	82 eb       	ldi	r24, 0xB2	; 178
    3294:	93 e0       	ldi	r25, 0x03	; 3
    3296:	5f cf       	rjmp	.-322    	; 0x3156 <setup+0x590>
    3298:	0a e3       	ldi	r16, 0x3A	; 58
    329a:	20 e2       	ldi	r18, 0x20	; 32
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	a4 01       	movw	r20, r8
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	c2 01       	movw	r24, r4
    32a4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    32a8:	81 11       	cpse	r24, r1
    32aa:	03 c0       	rjmp	.+6      	; 0x32b2 <setup+0x6ec>
    32ac:	8f e8       	ldi	r24, 0x8F	; 143
    32ae:	93 e0       	ldi	r25, 0x03	; 3
    32b0:	52 cf       	rjmp	.-348    	; 0x3156 <setup+0x590>
    32b2:	c5 57       	subi	r28, 0x75	; 117
    32b4:	de 4f       	sbci	r29, 0xFE	; 254
    32b6:	18 82       	st	Y, r1
    32b8:	cb 58       	subi	r28, 0x8B	; 139
    32ba:	d1 40       	sbci	r29, 0x01	; 1
    32bc:	cd 57       	subi	r28, 0x7D	; 125
    32be:	de 4f       	sbci	r29, 0xFE	; 254
    32c0:	18 82       	st	Y, r1
    32c2:	c3 58       	subi	r28, 0x83	; 131
    32c4:	d1 40       	sbci	r29, 0x01	; 1
    32c6:	c5 58       	subi	r28, 0x85	; 133
    32c8:	de 4f       	sbci	r29, 0xFE	; 254
    32ca:	18 82       	st	Y, r1
    32cc:	cb 57       	subi	r28, 0x7B	; 123
    32ce:	d1 40       	sbci	r29, 0x01	; 1
    32d0:	f4 01       	movw	r30, r8
    32d2:	81 81       	ldd	r24, Z+1	; 0x01
    32d4:	92 81       	ldd	r25, Z+2	; 0x02
    32d6:	c7 57       	subi	r28, 0x77	; 119
    32d8:	de 4f       	sbci	r29, 0xFE	; 254
    32da:	88 83       	st	Y, r24
    32dc:	99 83       	std	Y+1, r25	; 0x01
    32de:	c9 58       	subi	r28, 0x89	; 137
    32e0:	d1 40       	sbci	r29, 0x01	; 1
    32e2:	84 81       	ldd	r24, Z+4	; 0x04
    32e4:	95 81       	ldd	r25, Z+5	; 0x05
    32e6:	cf 57       	subi	r28, 0x7F	; 127
    32e8:	de 4f       	sbci	r29, 0xFE	; 254
    32ea:	88 83       	st	Y, r24
    32ec:	99 83       	std	Y+1, r25	; 0x01
    32ee:	c1 58       	subi	r28, 0x81	; 129
    32f0:	d1 40       	sbci	r29, 0x01	; 1
    32f2:	87 81       	ldd	r24, Z+7	; 0x07
    32f4:	90 85       	ldd	r25, Z+8	; 0x08
    32f6:	c7 58       	subi	r28, 0x87	; 135
    32f8:	de 4f       	sbci	r29, 0xFE	; 254
    32fa:	88 83       	st	Y, r24
    32fc:	99 83       	std	Y+1, r25	; 0x01
    32fe:	c9 57       	subi	r28, 0x79	; 121
    3300:	d1 40       	sbci	r29, 0x01	; 1
    3302:	ce 01       	movw	r24, r28
    3304:	87 57       	subi	r24, 0x77	; 119
    3306:	9e 4f       	sbci	r25, 0xFE	; 254
    3308:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    330c:	86 34       	cpi	r24, 0x46	; 70
    330e:	91 05       	cpc	r25, r1
    3310:	09 f0       	breq	.+2      	; 0x3314 <setup+0x74e>
    3312:	96 c0       	rjmp	.+300    	; 0x3440 <setup+0x87a>
    3314:	ce 01       	movw	r24, r28
    3316:	8f 57       	subi	r24, 0x7F	; 127
    3318:	9e 4f       	sbci	r25, 0xFE	; 254
    331a:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	09 f0       	breq	.+2      	; 0x3324 <setup+0x75e>
    3322:	8e c0       	rjmp	.+284    	; 0x3440 <setup+0x87a>
    3324:	ce 01       	movw	r24, r28
    3326:	87 58       	subi	r24, 0x87	; 135
    3328:	9e 4f       	sbci	r25, 0xFE	; 254
    332a:	0e 94 91 27 	call	0x4f22	; 0x4f22 <atoi>
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	09 f0       	breq	.+2      	; 0x3334 <setup+0x76e>
    3332:	86 c0       	rjmp	.+268    	; 0x3440 <setup+0x87a>
    3334:	40 e1       	ldi	r20, 0x10	; 16
    3336:	57 e2       	ldi	r21, 0x27	; 39
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	ce 01       	movw	r24, r28
    333e:	87 59       	subi	r24, 0x97	; 151
    3340:	9e 4f       	sbci	r25, 0xFE	; 254
    3342:	0e 94 39 09 	call	0x1272	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    3346:	ce 01       	movw	r24, r28
    3348:	87 59       	subi	r24, 0x97	; 151
    334a:	9e 4f       	sbci	r25, 0xFE	; 254
    334c:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    3350:	81 11       	cpse	r24, r1
    3352:	04 c0       	rjmp	.+8      	; 0x335c <setup+0x796>
    3354:	80 91 fa 46 	lds	r24, 0x46FA	; 0x8046fa <got_timezone>
    3358:	88 23       	and	r24, r24
    335a:	a9 f3       	breq	.-22     	; 0x3346 <setup+0x780>
    335c:	80 91 fa 46 	lds	r24, 0x46FA	; 0x8046fa <got_timezone>
    3360:	81 11       	cpse	r24, r1
    3362:	6e c0       	rjmp	.+220    	; 0x3440 <setup+0x87a>
    3364:	84 e4       	ldi	r24, 0x44	; 68
    3366:	93 e0       	ldi	r25, 0x03	; 3
    3368:	0e 94 ca 24 	call	0x4994	; 0x4994 <LogClass::info(__FlashStringHelper const*) [clone .constprop.23]>
    336c:	40 ec       	ldi	r20, 0xC0	; 192
    336e:	57 e2       	ldi	r21, 0x27	; 39
    3370:	69 e0       	ldi	r22, 0x09	; 9
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	ce 01       	movw	r24, r28
    3376:	8f 59       	subi	r24, 0x9F	; 159
    3378:	9e 4f       	sbci	r25, 0xFE	; 254
    337a:	0e 94 39 09 	call	0x1272	; 0x1272 <TimeoutTimer::TimeoutTimer(unsigned long)>
    337e:	1e 01       	movw	r2, r28
    3380:	f3 e0       	ldi	r31, 0x03	; 3
    3382:	2f 0e       	add	r2, r31
    3384:	31 1c       	adc	r3, r1
    3386:	ce 01       	movw	r24, r28
    3388:	8f 59       	subi	r24, 0x9F	; 159
    338a:	9e 4f       	sbci	r25, 0xFE	; 254
    338c:	0e 94 15 09 	call	0x122a	; 0x122a <TimeoutTimer::hasTimedOut() const>
    3390:	81 11       	cpse	r24, r1
    3392:	88 c2       	rjmp	.+1296   	; 0x38a4 <setup+0xcde>
isConnected():
    3394:	80 91 fb 46 	lds	r24, 0x46FB	; 0x8046fb <is_connected>
begin():
    3398:	81 11       	cpse	r24, r1
    339a:	18 c0       	rjmp	.+48     	; 0x33cc <setup+0x806>
print():
    339c:	80 91 be 4e 	lds	r24, 0x4EBE	; 0x804ebe <Log+0x2>
    33a0:	90 91 bf 4e 	lds	r25, 0x4EBF	; 0x804ebf <Log+0x3>
    33a4:	02 97       	sbiw	r24, 0x02	; 2
    33a6:	0c f4       	brge	.+2      	; 0x33aa <setup+0x7e4>
    33a8:	d8 ce       	rjmp	.-592    	; 0x315a <setup+0x594>
    33aa:	63 e1       	ldi	r22, 0x13	; 19
    33ac:	72 e0       	ldi	r23, 0x02	; 2
    33ae:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    33b2:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    33b6:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::print(__FlashStringHelper const*)>
    33ba:	60 e1       	ldi	r22, 0x10	; 16
    33bc:	73 e0       	ldi	r23, 0x03	; 3
    33be:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    33c2:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    33c6:	0e 94 20 0c 	call	0x1840	; 0x1840 <Print::println(__FlashStringHelper const*)>
    33ca:	c7 ce       	rjmp	.-626    	; 0x315a <setup+0x594>
begin():
    33cc:	1f 92       	push	r1
    33ce:	1f 92       	push	r1
    33d0:	1f 92       	push	r1
    33d2:	1f 92       	push	r1
    33d4:	22 ed       	ldi	r18, 0xD2	; 210
    33d6:	32 e0       	ldi	r19, 0x02	; 2
    33d8:	3f 93       	push	r19
    33da:	2f 93       	push	r18
    33dc:	aa ec       	ldi	r26, 0xCA	; 202
    33de:	b9 e4       	ldi	r27, 0x49	; 73
    33e0:	bf 93       	push	r27
    33e2:	af 93       	push	r26
    33e4:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    33e8:	2d b7       	in	r18, 0x3d	; 61
    33ea:	3e b7       	in	r19, 0x3e	; 62
    33ec:	28 5f       	subi	r18, 0xF8	; 248
    33ee:	3f 4f       	sbci	r19, 0xFF	; 255
    33f0:	2d bf       	out	0x3d, r18	; 61
    33f2:	3e bf       	out	0x3e, r19	; 62
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	39 f6       	brne	.-114    	; 0x3386 <setup+0x7c0>
    33f8:	19 82       	std	Y+1, r1	; 0x01
    33fa:	1a 82       	std	Y+2, r1	; 0x02
    33fc:	d1 01       	movw	r26, r2
    33fe:	ee e3       	ldi	r30, 0x3E	; 62
    3400:	1d 92       	st	X+, r1
    3402:	ea 95       	dec	r30
    3404:	e9 f7       	brne	.-6      	; 0x3400 <setup+0x83a>
waitForURC():
    3406:	a1 2c       	mov	r10, r1
    3408:	b1 2c       	mov	r11, r1
    340a:	65 01       	movw	r12, r10
    340c:	f1 2c       	mov	r15, r1
    340e:	e1 2c       	mov	r14, r1
    3410:	00 e2       	ldi	r16, 0x20	; 32
    3412:	1e e4       	ldi	r17, 0x4E	; 78
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e4       	ldi	r20, 0x40	; 64
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	be 01       	movw	r22, r28
    341e:	6f 5f       	subi	r22, 0xFF	; 255
    3420:	7f 4f       	sbci	r23, 0xFF	; 255
    3422:	8b ec       	ldi	r24, 0xCB	; 203
    3424:	92 e0       	ldi	r25, 0x02	; 2
    3426:	0e 94 d6 10 	call	0x21ac	; 0x21ac <SequansControllerClass::waitForURC(char const*, char*, unsigned int, unsigned long, void (*)(), unsigned long, bool) [clone .constprop.47]>
begin():
    342a:	88 23       	and	r24, r24
    342c:	09 f4       	brne	.+2      	; 0x3430 <setup+0x86a>
    342e:	ab cf       	rjmp	.-170    	; 0x3386 <setup+0x7c0>
    3430:	8a 81       	ldd	r24, Y+2	; 0x02
    3432:	80 33       	cpi	r24, 0x30	; 48
    3434:	09 f0       	breq	.+2      	; 0x3438 <setup+0x872>
    3436:	a7 cf       	rjmp	.-178    	; 0x3386 <setup+0x7c0>
    3438:	8d eb       	ldi	r24, 0xBD	; 189
    343a:	92 e0       	ldi	r25, 0x02	; 2
    343c:	0e 94 ca 24 	call	0x4994	; 0x4994 <LogClass::info(__FlashStringHelper const*) [clone .constprop.23]>
    3440:	8a eb       	ldi	r24, 0xBA	; 186
    3442:	97 e0       	ldi	r25, 0x07	; 7
    3444:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <SequansControllerClass::unregisterCallback(__FlashStringHelper const*) [clone .constprop.55]>
getOperator():
    3448:	19 82       	std	Y+1, r1	; 0x01
    344a:	1a 82       	std	Y+2, r1	; 0x02
    344c:	fe 01       	movw	r30, r28
    344e:	33 96       	adiw	r30, 0x03	; 3
    3450:	8e e3       	ldi	r24, 0x3E	; 62
    3452:	df 01       	movw	r26, r30
    3454:	1d 92       	st	X+, r1
    3456:	8a 95       	dec	r24
    3458:	e9 f7       	brne	.-6      	; 0x3454 <setup+0x88e>
    345a:	f2 01       	movw	r30, r4
    345c:	11 92       	st	Z+, r1
    345e:	11 92       	st	Z+, r1
    3460:	8e e2       	ldi	r24, 0x2E	; 46
    3462:	df 01       	movw	r26, r30
    3464:	1d 92       	st	X+, r1
    3466:	8a 95       	dec	r24
    3468:	e9 f7       	brne	.-6      	; 0x3464 <setup+0x89e>
    346a:	1f 92       	push	r1
    346c:	1f 92       	push	r1
    346e:	1f 92       	push	r1
    3470:	1f 92       	push	r1
    3472:	85 e7       	ldi	r24, 0x75	; 117
    3474:	95 e0       	ldi	r25, 0x05	; 5
    3476:	9f 93       	push	r25
    3478:	8f 93       	push	r24
    347a:	0a ec       	ldi	r16, 0xCA	; 202
    347c:	19 e4       	ldi	r17, 0x49	; 73
    347e:	1f 93       	push	r17
    3480:	0f 93       	push	r16
    3482:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    3486:	1f 92       	push	r1
    3488:	80 e4       	ldi	r24, 0x40	; 64
    348a:	8f 93       	push	r24
    348c:	fe 01       	movw	r30, r28
    348e:	31 96       	adiw	r30, 0x01	; 1
    3490:	7f 01       	movw	r14, r30
    3492:	ff 93       	push	r31
    3494:	ef 93       	push	r30
    3496:	8c e6       	ldi	r24, 0x6C	; 108
    3498:	95 e0       	ldi	r25, 0x05	; 5
    349a:	9f 93       	push	r25
    349c:	8f 93       	push	r24
    349e:	1f 93       	push	r17
    34a0:	0f 93       	push	r16
    34a2:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    34a6:	2d b7       	in	r18, 0x3d	; 61
    34a8:	3e b7       	in	r19, 0x3e	; 62
    34aa:	20 5f       	subi	r18, 0xF0	; 240
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	2d bf       	out	0x3d, r18	; 61
    34b0:	3e bf       	out	0x3e, r19	; 62
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <setup+0x8f2>
    34b6:	10 c2       	rjmp	.+1056   	; 0x38d8 <setup+0xd12>
    34b8:	86 e4       	ldi	r24, 0x46	; 70
    34ba:	95 e0       	ldi	r25, 0x05	; 5
    34bc:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
_ZN6String4initEv():
    34c0:	d4 01       	movw	r26, r8
    34c2:	1d 92       	st	X+, r1
    34c4:	1c 92       	st	X, r1
    34c6:	11 97       	sbiw	r26, 0x01	; 1
    34c8:	12 96       	adiw	r26, 0x02	; 2
    34ca:	1d 92       	st	X+, r1
    34cc:	1c 92       	st	X, r1
    34ce:	13 97       	sbiw	r26, 0x03	; 3
    34d0:	14 96       	adiw	r26, 0x04	; 4
    34d2:	1d 92       	st	X+, r1
    34d4:	1c 92       	st	X, r1
    34d6:	15 97       	sbiw	r26, 0x05	; 5
copy():
    34d8:	6d e0       	ldi	r22, 0x0D	; 13
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	c4 01       	movw	r24, r8
    34de:	11 db       	rcall	.-2526   	; 0x2b02 <String::reserve(unsigned int)>
    34e0:	f4 01       	movw	r30, r8
    34e2:	20 81       	ld	r18, Z
    34e4:	31 81       	ldd	r19, Z+1	; 0x01
    34e6:	81 11       	cpse	r24, r1
    34e8:	12 c2       	rjmp	.+1060   	; 0x390e <setup+0xd48>
invalidate():
    34ea:	21 15       	cp	r18, r1
    34ec:	31 05       	cpc	r19, r1
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <setup+0x930>
    34f0:	c9 01       	movw	r24, r18
    34f2:	0e 94 ac 2c 	call	0x5958	; 0x5958 <free>
    34f6:	d4 01       	movw	r26, r8
    34f8:	1d 92       	st	X+, r1
    34fa:	1c 92       	st	X, r1
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	14 96       	adiw	r26, 0x04	; 4
    3500:	1d 92       	st	X+, r1
    3502:	1c 92       	st	X, r1
    3504:	15 97       	sbiw	r26, 0x05	; 5
    3506:	12 96       	adiw	r26, 0x02	; 2
    3508:	1d 92       	st	X+, r1
    350a:	1c 92       	st	X, r1
    350c:	13 97       	sbiw	r26, 0x03	; 3
setup():
    350e:	f4 01       	movw	r30, r8
    3510:	81 81       	ldd	r24, Z+1	; 0x01
    3512:	8f 93       	push	r24
    3514:	80 81       	ld	r24, Z
    3516:	8f 93       	push	r24
    3518:	89 ee       	ldi	r24, 0xE9	; 233
    351a:	96 e0       	ldi	r25, 0x06	; 6
    351c:	9f 93       	push	r25
    351e:	8f 93       	push	r24
    3520:	8c eb       	ldi	r24, 0xBC	; 188
    3522:	9e e4       	ldi	r25, 0x4E	; 78
    3524:	9f 93       	push	r25
    3526:	8f 93       	push	r24
    3528:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
__base_dtor ():
    352c:	d4 01       	movw	r26, r8
    352e:	8d 91       	ld	r24, X+
    3530:	9c 91       	ld	r25, X
    3532:	0e 94 ac 2c 	call	0x5958	; 0x5958 <free>
setup():
    3536:	87 e6       	ldi	r24, 0x67	; 103
    3538:	91 e4       	ldi	r25, 0x41	; 65
    353a:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
    353e:	85 e6       	ldi	r24, 0x65	; 101
    3540:	91 e4       	ldi	r25, 0x41	; 65
    3542:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
    3546:	85 e9       	ldi	r24, 0x95	; 149
    3548:	91 e4       	ldi	r25, 0x41	; 65
    354a:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
    354e:	85 e6       	ldi	r24, 0x65	; 101
    3550:	91 e4       	ldi	r25, 0x41	; 65
    3552:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
    3556:	88 e0       	ldi	r24, 0x08	; 8
    3558:	e6 e1       	ldi	r30, 0x16	; 22
    355a:	f0 e4       	ldi	r31, 0x40	; 64
    355c:	de 01       	movw	r26, r28
    355e:	af 5f       	subi	r26, 0xFF	; 255
    3560:	be 4f       	sbci	r27, 0xFE	; 254
    3562:	01 90       	ld	r0, Z+
    3564:	0d 92       	st	X+, r0
    3566:	8a 95       	dec	r24
    3568:	e1 f7       	brne	.-8      	; 0x3562 <setup+0x99c>
    356a:	88 e0       	ldi	r24, 0x08	; 8
    356c:	ee e1       	ldi	r30, 0x1E	; 30
    356e:	f0 e4       	ldi	r31, 0x40	; 64
    3570:	d4 01       	movw	r26, r8
    3572:	01 90       	ld	r0, Z+
    3574:	0d 92       	st	X+, r0
    3576:	8a 95       	dec	r24
    3578:	e1 f7       	brne	.-8      	; 0x3572 <setup+0x9ac>
    357a:	88 e0       	ldi	r24, 0x08	; 8
    357c:	e6 e2       	ldi	r30, 0x26	; 38
    357e:	f0 e4       	ldi	r31, 0x40	; 64
    3580:	de 01       	movw	r26, r28
    3582:	af 59       	subi	r26, 0x9F	; 159
    3584:	be 4f       	sbci	r27, 0xFE	; 254
    3586:	01 90       	ld	r0, Z+
    3588:	0d 92       	st	X+, r0
    358a:	8a 95       	dec	r24
    358c:	e1 f7       	brne	.-8      	; 0x3586 <setup+0x9c0>
    358e:	88 e0       	ldi	r24, 0x08	; 8
    3590:	ee e2       	ldi	r30, 0x2E	; 46
    3592:	f0 e4       	ldi	r31, 0x40	; 64
    3594:	de 01       	movw	r26, r28
    3596:	a7 59       	subi	r26, 0x97	; 151
    3598:	be 4f       	sbci	r27, 0xFE	; 254
    359a:	01 90       	ld	r0, Z+
    359c:	0d 92       	st	X+, r0
    359e:	8a 95       	dec	r24
    35a0:	e1 f7       	brne	.-8      	; 0x359a <setup+0x9d4>
    35a2:	88 e0       	ldi	r24, 0x08	; 8
    35a4:	e6 e3       	ldi	r30, 0x36	; 54
    35a6:	f0 e4       	ldi	r31, 0x40	; 64
    35a8:	de 01       	movw	r26, r28
    35aa:	af 58       	subi	r26, 0x8F	; 143
    35ac:	be 4f       	sbci	r27, 0xFE	; 254
    35ae:	01 90       	ld	r0, Z+
    35b0:	0d 92       	st	X+, r0
    35b2:	8a 95       	dec	r24
    35b4:	e1 f7       	brne	.-8      	; 0x35ae <setup+0x9e8>
    35b6:	88 e0       	ldi	r24, 0x08	; 8
    35b8:	ee e3       	ldi	r30, 0x3E	; 62
    35ba:	f0 e4       	ldi	r31, 0x40	; 64
    35bc:	de 01       	movw	r26, r28
    35be:	a7 58       	subi	r26, 0x87	; 135
    35c0:	be 4f       	sbci	r27, 0xFE	; 254
    35c2:	01 90       	ld	r0, Z+
    35c4:	0d 92       	st	X+, r0
    35c6:	8a 95       	dec	r24
    35c8:	e1 f7       	brne	.-8      	; 0x35c2 <setup+0x9fc>
    35ca:	88 e0       	ldi	r24, 0x08	; 8
    35cc:	e6 e4       	ldi	r30, 0x46	; 70
    35ce:	f0 e4       	ldi	r31, 0x40	; 64
    35d0:	de 01       	movw	r26, r28
    35d2:	af 57       	subi	r26, 0x7F	; 127
    35d4:	be 4f       	sbci	r27, 0xFE	; 254
    35d6:	01 90       	ld	r0, Z+
    35d8:	0d 92       	st	X+, r0
    35da:	8a 95       	dec	r24
    35dc:	e1 f7       	brne	.-8      	; 0x35d6 <setup+0xa10>
    35de:	88 e0       	ldi	r24, 0x08	; 8
    35e0:	ee e4       	ldi	r30, 0x4E	; 78
    35e2:	f0 e4       	ldi	r31, 0x40	; 64
    35e4:	de 01       	movw	r26, r28
    35e6:	a7 57       	subi	r26, 0x77	; 119
    35e8:	be 4f       	sbci	r27, 0xFE	; 254
    35ea:	01 90       	ld	r0, Z+
    35ec:	0d 92       	st	X+, r0
    35ee:	8a 95       	dec	r24
    35f0:	e1 f7       	brne	.-8      	; 0x35ea <setup+0xa24>
    35f2:	cf 56       	subi	r28, 0x6F	; 111
    35f4:	de 4f       	sbci	r29, 0xFE	; 254
    35f6:	18 82       	st	Y, r1
    35f8:	19 82       	std	Y+1, r1	; 0x01
    35fa:	1a 82       	std	Y+2, r1	; 0x02
    35fc:	1b 82       	std	Y+3, r1	; 0x03
    35fe:	c1 59       	subi	r28, 0x91	; 145
    3600:	d1 40       	sbci	r29, 0x01	; 1
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	a2 e4       	ldi	r26, 0x42	; 66
    3608:	b3 e4       	ldi	r27, 0x43	; 67
    360a:	cb 56       	subi	r28, 0x6B	; 107
    360c:	de 4f       	sbci	r29, 0xFE	; 254
    360e:	88 83       	st	Y, r24
    3610:	99 83       	std	Y+1, r25	; 0x01
    3612:	aa 83       	std	Y+2, r26	; 0x02
    3614:	bb 83       	std	Y+3, r27	; 0x03
    3616:	c5 59       	subi	r28, 0x95	; 149
    3618:	d1 40       	sbci	r29, 0x01	; 1
    361a:	c7 56       	subi	r28, 0x67	; 103
    361c:	de 4f       	sbci	r29, 0xFE	; 254
    361e:	18 82       	st	Y, r1
    3620:	19 82       	std	Y+1, r1	; 0x01
    3622:	1a 82       	std	Y+2, r1	; 0x02
    3624:	1b 82       	std	Y+3, r1	; 0x03
    3626:	c9 59       	subi	r28, 0x99	; 153
    3628:	d1 40       	sbci	r29, 0x01	; 1
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a4 e4       	ldi	r26, 0x44	; 68
    3630:	b3 e4       	ldi	r27, 0x43	; 67
    3632:	c3 56       	subi	r28, 0x63	; 99
    3634:	de 4f       	sbci	r29, 0xFE	; 254
    3636:	88 83       	st	Y, r24
    3638:	99 83       	std	Y+1, r25	; 0x01
    363a:	aa 83       	std	Y+2, r26	; 0x02
    363c:	bb 83       	std	Y+3, r27	; 0x03
    363e:	cd 59       	subi	r28, 0x9D	; 157
    3640:	d1 40       	sbci	r29, 0x01	; 1
    3642:	cf 55       	subi	r28, 0x5F	; 95
    3644:	de 4f       	sbci	r29, 0xFE	; 254
    3646:	18 82       	st	Y, r1
    3648:	19 82       	std	Y+1, r1	; 0x01
    364a:	1a 82       	std	Y+2, r1	; 0x02
    364c:	1b 82       	std	Y+3, r1	; 0x03
    364e:	c1 5a       	subi	r28, 0xA1	; 161
    3650:	d1 40       	sbci	r29, 0x01	; 1
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	a6 e4       	ldi	r26, 0x46	; 70
    3658:	b3 e4       	ldi	r27, 0x43	; 67
    365a:	cb 55       	subi	r28, 0x5B	; 91
    365c:	de 4f       	sbci	r29, 0xFE	; 254
    365e:	88 83       	st	Y, r24
    3660:	99 83       	std	Y+1, r25	; 0x01
    3662:	aa 83       	std	Y+2, r26	; 0x02
    3664:	bb 83       	std	Y+3, r27	; 0x03
    3666:	c5 5a       	subi	r28, 0xA5	; 165
    3668:	d1 40       	sbci	r29, 0x01	; 1
    366a:	c7 55       	subi	r28, 0x57	; 87
    366c:	de 4f       	sbci	r29, 0xFE	; 254
    366e:	18 82       	st	Y, r1
    3670:	19 82       	std	Y+1, r1	; 0x01
    3672:	1a 82       	std	Y+2, r1	; 0x02
    3674:	1b 82       	std	Y+3, r1	; 0x03
    3676:	c9 5a       	subi	r28, 0xA9	; 169
    3678:	d1 40       	sbci	r29, 0x01	; 1
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	a5 e4       	ldi	r26, 0x45	; 69
    3680:	b3 e4       	ldi	r27, 0x43	; 67
    3682:	c3 55       	subi	r28, 0x53	; 83
    3684:	de 4f       	sbci	r29, 0xFE	; 254
    3686:	88 83       	st	Y, r24
    3688:	99 83       	std	Y+1, r25	; 0x01
    368a:	aa 83       	std	Y+2, r26	; 0x02
    368c:	bb 83       	std	Y+3, r27	; 0x03
    368e:	cd 5a       	subi	r28, 0xAD	; 173
    3690:	d1 40       	sbci	r29, 0x01	; 1
    3692:	cf 54       	subi	r28, 0x4F	; 79
    3694:	de 4f       	sbci	r29, 0xFE	; 254
    3696:	18 82       	st	Y, r1
    3698:	19 82       	std	Y+1, r1	; 0x01
    369a:	1a 82       	std	Y+2, r1	; 0x02
    369c:	1b 82       	std	Y+3, r1	; 0x03
    369e:	c1 5b       	subi	r28, 0xB1	; 177
    36a0:	d1 40       	sbci	r29, 0x01	; 1
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	ac e3       	ldi	r26, 0x3C	; 60
    36a8:	b3 e4       	ldi	r27, 0x43	; 67
    36aa:	cb 54       	subi	r28, 0x4B	; 75
    36ac:	de 4f       	sbci	r29, 0xFE	; 254
    36ae:	88 83       	st	Y, r24
    36b0:	99 83       	std	Y+1, r25	; 0x01
    36b2:	aa 83       	std	Y+2, r26	; 0x02
    36b4:	bb 83       	std	Y+3, r27	; 0x03
    36b6:	c5 5b       	subi	r28, 0xB5	; 181
    36b8:	d1 40       	sbci	r29, 0x01	; 1
    36ba:	c7 54       	subi	r28, 0x47	; 71
    36bc:	de 4f       	sbci	r29, 0xFE	; 254
    36be:	18 82       	st	Y, r1
    36c0:	19 82       	std	Y+1, r1	; 0x01
    36c2:	1a 82       	std	Y+2, r1	; 0x02
    36c4:	1b 82       	std	Y+3, r1	; 0x03
    36c6:	c9 5b       	subi	r28, 0xB9	; 185
    36c8:	d1 40       	sbci	r29, 0x01	; 1
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	ab e3       	ldi	r26, 0x3B	; 59
    36d0:	b3 e4       	ldi	r27, 0x43	; 67
    36d2:	c3 54       	subi	r28, 0x43	; 67
    36d4:	de 4f       	sbci	r29, 0xFE	; 254
    36d6:	88 83       	st	Y, r24
    36d8:	99 83       	std	Y+1, r25	; 0x01
    36da:	aa 83       	std	Y+2, r26	; 0x02
    36dc:	bb 83       	std	Y+3, r27	; 0x03
    36de:	cd 5b       	subi	r28, 0xBD	; 189
    36e0:	d1 40       	sbci	r29, 0x01	; 1
    36e2:	cf 53       	subi	r28, 0x3F	; 63
    36e4:	de 4f       	sbci	r29, 0xFE	; 254
    36e6:	18 82       	st	Y, r1
    36e8:	19 82       	std	Y+1, r1	; 0x01
    36ea:	1a 82       	std	Y+2, r1	; 0x02
    36ec:	1b 82       	std	Y+3, r1	; 0x03
    36ee:	c1 5c       	subi	r28, 0xC1	; 193
    36f0:	d1 40       	sbci	r29, 0x01	; 1
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	af e3       	ldi	r26, 0x3F	; 63
    36f8:	b3 e4       	ldi	r27, 0x43	; 67
    36fa:	cb 53       	subi	r28, 0x3B	; 59
    36fc:	de 4f       	sbci	r29, 0xFE	; 254
    36fe:	88 83       	st	Y, r24
    3700:	99 83       	std	Y+1, r25	; 0x01
    3702:	aa 83       	std	Y+2, r26	; 0x02
    3704:	bb 83       	std	Y+3, r27	; 0x03
    3706:	c5 5c       	subi	r28, 0xC5	; 197
    3708:	d1 40       	sbci	r29, 0x01	; 1
    370a:	c7 53       	subi	r28, 0x37	; 55
    370c:	de 4f       	sbci	r29, 0xFE	; 254
    370e:	18 82       	st	Y, r1
    3710:	19 82       	std	Y+1, r1	; 0x01
    3712:	1a 82       	std	Y+2, r1	; 0x02
    3714:	1b 82       	std	Y+3, r1	; 0x03
    3716:	c9 5c       	subi	r28, 0xC9	; 201
    3718:	d1 40       	sbci	r29, 0x01	; 1
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	ae e3       	ldi	r26, 0x3E	; 62
    3720:	b3 e4       	ldi	r27, 0x43	; 67
    3722:	c3 53       	subi	r28, 0x33	; 51
    3724:	de 4f       	sbci	r29, 0xFE	; 254
    3726:	88 83       	st	Y, r24
    3728:	99 83       	std	Y+1, r25	; 0x01
    372a:	aa 83       	std	Y+2, r26	; 0x02
    372c:	bb 83       	std	Y+3, r27	; 0x03
    372e:	cd 5c       	subi	r28, 0xCD	; 205
    3730:	d1 40       	sbci	r29, 0x01	; 1
    3732:	88 e0       	ldi	r24, 0x08	; 8
    3734:	e6 e5       	ldi	r30, 0x56	; 86
    3736:	f0 e4       	ldi	r31, 0x40	; 64
    3738:	de 01       	movw	r26, r28
    373a:	af 52       	subi	r26, 0x2F	; 47
    373c:	be 4f       	sbci	r27, 0xFE	; 254
    373e:	01 90       	ld	r0, Z+
    3740:	0d 92       	st	X+, r0
    3742:	8a 95       	dec	r24
    3744:	e1 f7       	brne	.-8      	; 0x373e <setup+0xb78>
    3746:	88 e0       	ldi	r24, 0x08	; 8
    3748:	ee e5       	ldi	r30, 0x5E	; 94
    374a:	f0 e4       	ldi	r31, 0x40	; 64
    374c:	de 01       	movw	r26, r28
    374e:	a7 52       	subi	r26, 0x27	; 39
    3750:	be 4f       	sbci	r27, 0xFE	; 254
    3752:	01 90       	ld	r0, Z+
    3754:	0d 92       	st	X+, r0
    3756:	8a 95       	dec	r24
    3758:	e1 f7       	brne	.-8      	; 0x3752 <setup+0xb8c>
    375a:	88 e0       	ldi	r24, 0x08	; 8
    375c:	e6 e6       	ldi	r30, 0x66	; 102
    375e:	f0 e4       	ldi	r31, 0x40	; 64
    3760:	de 01       	movw	r26, r28
    3762:	af 51       	subi	r26, 0x1F	; 31
    3764:	be 4f       	sbci	r27, 0xFE	; 254
    3766:	01 90       	ld	r0, Z+
    3768:	0d 92       	st	X+, r0
    376a:	8a 95       	dec	r24
    376c:	e1 f7       	brne	.-8      	; 0x3766 <setup+0xba0>
    376e:	60 e2       	ldi	r22, 0x20	; 32
    3770:	73 e0       	ldi	r23, 0x03	; 3
    3772:	ce 01       	movw	r24, r28
    3774:	8f 5f       	subi	r24, 0xFF	; 255
    3776:	9e 4f       	sbci	r25, 0xFE	; 254
    3778:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    377c:	60 e2       	ldi	r22, 0x20	; 32
    377e:	73 e0       	ldi	r23, 0x03	; 3
    3780:	c4 01       	movw	r24, r8
    3782:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3786:	60 e2       	ldi	r22, 0x20	; 32
    3788:	73 e0       	ldi	r23, 0x03	; 3
    378a:	ce 01       	movw	r24, r28
    378c:	8f 59       	subi	r24, 0x9F	; 159
    378e:	9e 4f       	sbci	r25, 0xFE	; 254
    3790:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3794:	60 e2       	ldi	r22, 0x20	; 32
    3796:	73 e0       	ldi	r23, 0x03	; 3
    3798:	ce 01       	movw	r24, r28
    379a:	87 59       	subi	r24, 0x97	; 151
    379c:	9e 4f       	sbci	r25, 0xFE	; 254
    379e:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37a2:	60 e2       	ldi	r22, 0x20	; 32
    37a4:	73 e0       	ldi	r23, 0x03	; 3
    37a6:	ce 01       	movw	r24, r28
    37a8:	8f 58       	subi	r24, 0x8F	; 143
    37aa:	9e 4f       	sbci	r25, 0xFE	; 254
    37ac:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37b0:	60 e2       	ldi	r22, 0x20	; 32
    37b2:	73 e0       	ldi	r23, 0x03	; 3
    37b4:	ce 01       	movw	r24, r28
    37b6:	87 58       	subi	r24, 0x87	; 135
    37b8:	9e 4f       	sbci	r25, 0xFE	; 254
    37ba:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37be:	60 e2       	ldi	r22, 0x20	; 32
    37c0:	73 e0       	ldi	r23, 0x03	; 3
    37c2:	ce 01       	movw	r24, r28
    37c4:	8f 57       	subi	r24, 0x7F	; 127
    37c6:	9e 4f       	sbci	r25, 0xFE	; 254
    37c8:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37cc:	60 e2       	ldi	r22, 0x20	; 32
    37ce:	73 e0       	ldi	r23, 0x03	; 3
    37d0:	ce 01       	movw	r24, r28
    37d2:	8f 52       	subi	r24, 0x2F	; 47
    37d4:	9e 4f       	sbci	r25, 0xFE	; 254
    37d6:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37da:	60 e2       	ldi	r22, 0x20	; 32
    37dc:	73 e0       	ldi	r23, 0x03	; 3
    37de:	ce 01       	movw	r24, r28
    37e0:	87 52       	subi	r24, 0x27	; 39
    37e2:	9e 4f       	sbci	r25, 0xFE	; 254
    37e4:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37e8:	60 e2       	ldi	r22, 0x20	; 32
    37ea:	73 e0       	ldi	r23, 0x03	; 3
    37ec:	ce 01       	movw	r24, r28
    37ee:	8f 51       	subi	r24, 0x1F	; 31
    37f0:	9e 4f       	sbci	r25, 0xFE	; 254
    37f2:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    37f6:	6e eb       	ldi	r22, 0xBE	; 190
    37f8:	70 e0       	ldi	r23, 0x00	; 0
    37fa:	ce 01       	movw	r24, r28
    37fc:	87 57       	subi	r24, 0x77	; 119
    37fe:	9e 4f       	sbci	r25, 0xFE	; 254
    3800:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3804:	6e eb       	ldi	r22, 0xBE	; 190
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	ce 01       	movw	r24, r28
    380a:	8f 56       	subi	r24, 0x6F	; 111
    380c:	9e 4f       	sbci	r25, 0xFE	; 254
    380e:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3812:	6e eb       	ldi	r22, 0xBE	; 190
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	ce 01       	movw	r24, r28
    3818:	87 56       	subi	r24, 0x67	; 103
    381a:	9e 4f       	sbci	r25, 0xFE	; 254
    381c:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3820:	6e eb       	ldi	r22, 0xBE	; 190
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	ce 01       	movw	r24, r28
    3826:	8f 55       	subi	r24, 0x5F	; 95
    3828:	9e 4f       	sbci	r25, 0xFE	; 254
    382a:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    382e:	6e eb       	ldi	r22, 0xBE	; 190
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	ce 01       	movw	r24, r28
    3834:	87 55       	subi	r24, 0x57	; 87
    3836:	9e 4f       	sbci	r25, 0xFE	; 254
    3838:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    383c:	6e eb       	ldi	r22, 0xBE	; 190
    383e:	70 e0       	ldi	r23, 0x00	; 0
    3840:	ce 01       	movw	r24, r28
    3842:	8f 54       	subi	r24, 0x4F	; 79
    3844:	9e 4f       	sbci	r25, 0xFE	; 254
    3846:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    384a:	6e eb       	ldi	r22, 0xBE	; 190
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	ce 01       	movw	r24, r28
    3850:	87 54       	subi	r24, 0x47	; 71
    3852:	9e 4f       	sbci	r25, 0xFE	; 254
    3854:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3858:	6e eb       	ldi	r22, 0xBE	; 190
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	ce 01       	movw	r24, r28
    385e:	8f 53       	subi	r24, 0x3F	; 63
    3860:	9e 4f       	sbci	r25, 0xFE	; 254
    3862:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3866:	6e eb       	ldi	r22, 0xBE	; 190
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	ce 01       	movw	r24, r28
    386c:	87 53       	subi	r24, 0x37	; 55
    386e:	9e 4f       	sbci	r25, 0xFE	; 254
    3870:	0e 94 94 13 	call	0x2728	; 0x2728 <KNNClassifier::addExample(float const*, int) [clone .constprop.33]>
    3874:	8e ea       	ldi	r24, 0xAE	; 174
    3876:	91 e4       	ldi	r25, 0x41	; 65
    3878:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
getCount():
    387c:	e0 91 d5 4e 	lds	r30, 0x4ED5	; 0x804ed5 <anomKNN+0x4>
    3880:	f0 91 d6 4e 	lds	r31, 0x4ED6	; 0x804ed6 <anomKNN+0x5>
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	30 97       	sbiw	r30, 0x00	; 0
    3892:	09 f4       	brne	.+2      	; 0x3896 <setup+0xcd0>
    3894:	46 c0       	rjmp	.+140    	; 0x3922 <setup+0xd5c>
    3896:	bf ef       	ldi	r27, 0xFF	; 255
    3898:	6b 1a       	sub	r6, r27
    389a:	7b 0a       	sbc	r7, r27
next():
    389c:	06 80       	ldd	r0, Z+6	; 0x06
    389e:	f7 81       	ldd	r31, Z+7	; 0x07
    38a0:	e0 2d       	mov	r30, r0
    38a2:	f6 cf       	rjmp	.-20     	; 0x3890 <setup+0xcca>
begin():
    38a4:	1f 92       	push	r1
    38a6:	89 e0       	ldi	r24, 0x09	; 9
    38a8:	8f 93       	push	r24
    38aa:	87 e2       	ldi	r24, 0x27	; 39
    38ac:	8f 93       	push	r24
    38ae:	80 ec       	ldi	r24, 0xC0	; 192
    38b0:	8f 93       	push	r24
    38b2:	80 e6       	ldi	r24, 0x60	; 96
    38b4:	92 e0       	ldi	r25, 0x02	; 2
    38b6:	9f 93       	push	r25
    38b8:	8f 93       	push	r24
    38ba:	8c eb       	ldi	r24, 0xBC	; 188
    38bc:	9e e4       	ldi	r25, 0x4E	; 78
    38be:	9f 93       	push	r25
    38c0:	8f 93       	push	r24
    38c2:	0e 94 3f 0a 	call	0x147e	; 0x147e <LogClass::warnf(__FlashStringHelper const*, ...) [clone .constprop.53]>
    38c6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <LteClass::end() [clone .constprop.24]>
    38ca:	2d b7       	in	r18, 0x3d	; 61
    38cc:	3e b7       	in	r19, 0x3e	; 62
    38ce:	28 5f       	subi	r18, 0xF8	; 248
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	2d bf       	out	0x3d, r18	; 61
    38d4:	3e bf       	out	0x3e, r19	; 62
    38d6:	82 cb       	rjmp	.-2300   	; 0x2fdc <setup+0x416>
getOperator():
    38d8:	0a e3       	ldi	r16, 0x3A	; 58
    38da:	20 e3       	ldi	r18, 0x30	; 48
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	a2 01       	movw	r20, r4
    38e0:	62 e0       	ldi	r22, 0x02	; 2
    38e2:	c7 01       	movw	r24, r14
    38e4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <SequansControllerClass::extractValueFromCommandResponse(char*, unsigned char, char*, unsigned int, char) [clone .constprop.54]>
    38e8:	88 23       	and	r24, r24
    38ea:	09 f4       	brne	.+2      	; 0x38ee <setup+0xd28>
    38ec:	e5 cd       	rjmp	.-1078   	; 0x34b8 <setup+0x8f2>
    38ee:	82 01       	movw	r16, r4
    38f0:	0f 5f       	subi	r16, 0xFF	; 255
    38f2:	1f 4f       	sbci	r17, 0xFF	; 255
    38f4:	6f e2       	ldi	r22, 0x2F	; 47
    38f6:	70 e0       	ldi	r23, 0x00	; 0
    38f8:	c8 01       	movw	r24, r16
    38fa:	0e 94 e2 28 	call	0x51c4	; 0x51c4 <strnlen>
    38fe:	84 0d       	add	r24, r4
    3900:	95 1d       	adc	r25, r5
    3902:	dc 01       	movw	r26, r24
    3904:	1c 92       	st	X, r1
    3906:	b8 01       	movw	r22, r16
    3908:	c4 01       	movw	r24, r8
    390a:	4d d9       	rcall	.-3430   	; 0x2ba6 <String::String(char const*)>
    390c:	00 ce       	rjmp	.-1024   	; 0x350e <setup+0x948>
copy():
    390e:	8d e0       	ldi	r24, 0x0D	; 13
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	84 83       	std	Z+4, r24	; 0x04
    3914:	95 83       	std	Z+5, r25	; 0x05
    3916:	68 e3       	ldi	r22, 0x38	; 56
    3918:	75 e0       	ldi	r23, 0x05	; 5
    391a:	c9 01       	movw	r24, r18
    391c:	0e 94 9c 28 	call	0x5138	; 0x5138 <strcpy_P>
    3920:	f6 cd       	rjmp	.-1044   	; 0x350e <setup+0x948>
_ZN6String4initEv():
    3922:	8e 01       	movw	r16, r28
    3924:	07 51       	subi	r16, 0x17	; 23
    3926:	1e 4f       	sbci	r17, 0xFE	; 254
    3928:	f8 01       	movw	r30, r16
    392a:	10 82       	st	Z, r1
    392c:	11 82       	std	Z+1, r1	; 0x01
    392e:	12 82       	std	Z+2, r1	; 0x02
    3930:	13 82       	std	Z+3, r1	; 0x03
    3932:	14 82       	std	Z+4, r1	; 0x04
    3934:	15 82       	std	Z+5, r1	; 0x05
itoa():
    3936:	4a e0       	ldi	r20, 0x0A	; 10
    3938:	9e 01       	movw	r18, r28
    393a:	2f 5f       	subi	r18, 0xFF	; 255
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	79 01       	movw	r14, r18
    3940:	b9 01       	movw	r22, r18
    3942:	c3 01       	movw	r24, r6
    3944:	0e 94 14 29 	call	0x5228	; 0x5228 <__itoa_ncheck>
operator=():
    3948:	f7 01       	movw	r30, r14
    394a:	01 90       	ld	r0, Z+
    394c:	00 20       	and	r0, r0
    394e:	e9 f7       	brne	.-6      	; 0x394a <setup+0xd84>
    3950:	31 97       	sbiw	r30, 0x01	; 1
    3952:	af 01       	movw	r20, r30
    3954:	4e 19       	sub	r20, r14
    3956:	5f 09       	sbc	r21, r15
    3958:	b7 01       	movw	r22, r14
    395a:	c8 01       	movw	r24, r16
    395c:	fa d8       	rcall	.-3596   	; 0x2b52 <String::copy(char const*, unsigned int)>
setup():
    395e:	c8 01       	movw	r24, r16
    3960:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <LogClass::raw(String) [clone .constprop.36]>
__base_dtor ():
    3964:	d8 01       	movw	r26, r16
    3966:	8d 91       	ld	r24, X+
    3968:	9c 91       	ld	r25, X
    396a:	0e 94 ac 2c 	call	0x5958	; 0x5958 <free>
setup():
    396e:	85 e6       	ldi	r24, 0x65	; 101
    3970:	91 e4       	ldi	r25, 0x41	; 65
    3972:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
profileExists():
    3976:	19 82       	std	Y+1, r1	; 0x01
    3978:	1a 82       	std	Y+2, r1	; 0x02
    397a:	fe 01       	movw	r30, r28
    397c:	33 96       	adiw	r30, 0x03	; 3
    397e:	8e ef       	ldi	r24, 0xFE	; 254
    3980:	df 01       	movw	r26, r30
    3982:	1d 92       	st	X+, r1
    3984:	8a 95       	dec	r24
    3986:	e9 f7       	brne	.-6      	; 0x3982 <setup+0xdbc>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	8f 93       	push	r24
    398c:	1f 92       	push	r1
    398e:	ff 92       	push	r15
    3990:	ef 92       	push	r14
    3992:	84 e0       	ldi	r24, 0x04	; 4
    3994:	96 e0       	ldi	r25, 0x06	; 6
    3996:	9f 93       	push	r25
    3998:	8f 93       	push	r24
    399a:	8a ec       	ldi	r24, 0xCA	; 202
    399c:	99 e4       	ldi	r25, 0x49	; 73
    399e:	9f 93       	push	r25
    39a0:	8f 93       	push	r24
    39a2:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    39a6:	ed b7       	in	r30, 0x3d	; 61
    39a8:	fe b7       	in	r31, 0x3e	; 62
    39aa:	38 96       	adiw	r30, 0x08	; 8
    39ac:	ed bf       	out	0x3d, r30	; 61
    39ae:	fe bf       	out	0x3e, r31	; 62
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	49 f0       	breq	.+18     	; 0x39c6 <setup+0xe00>
    39b4:	83 ee       	ldi	r24, 0xE3	; 227
    39b6:	95 e0       	ldi	r25, 0x05	; 5
    39b8:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
configure():
    39bc:	81 e8       	ldi	r24, 0x81	; 129
    39be:	95 e0       	ldi	r25, 0x05	; 5
    39c0:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    39c4:	40 c0       	rjmp	.+128    	; 0x3a46 <setup+0xe80>
profileExists():
    39c6:	64 e6       	ldi	r22, 0x64	; 100
    39c8:	71 e4       	ldi	r23, 0x41	; 65
    39ca:	c7 01       	movw	r24, r14
    39cc:	0e 94 df 28 	call	0x51be	; 0x51be <strtok>
    39d0:	25 ec       	ldi	r18, 0xC5	; 197
    39d2:	e2 2e       	mov	r14, r18
    39d4:	21 e4       	ldi	r18, 0x41	; 65
    39d6:	f2 2e       	mov	r15, r18
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	81 f3       	breq	.-32     	; 0x39bc <setup+0xdf6>
    39dc:	1f 93       	push	r17
    39de:	0f 93       	push	r16
    39e0:	ff 92       	push	r15
    39e2:	ef 92       	push	r14
    39e4:	0b 96       	adiw	r24, 0x0b	; 11
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <sscanf>
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	d8 01       	movw	r26, r16
    39fc:	8d 91       	ld	r24, X+
    39fe:	9c 91       	ld	r25, X
    3a00:	03 97       	sbiw	r24, 0x03	; 3
    3a02:	b1 f5       	brne	.+108    	; 0x3a70 <setup+0xeaa>
configure():
    3a04:	1f 92       	push	r1
    3a06:	b1 e0       	ldi	r27, 0x01	; 1
    3a08:	bf 93       	push	r27
    3a0a:	bf 93       	push	r27
    3a0c:	8b eb       	ldi	r24, 0xBB	; 187
    3a0e:	8f 93       	push	r24
    3a10:	88 ec       	ldi	r24, 0xC8	; 200
    3a12:	91 e4       	ldi	r25, 0x41	; 65
    3a14:	9f 93       	push	r25
    3a16:	8f 93       	push	r24
    3a18:	1f 92       	push	r1
    3a1a:	1f 92       	push	r1
    3a1c:	1f 92       	push	r1
    3a1e:	1f 92       	push	r1
    3a20:	80 e1       	ldi	r24, 0x10	; 16
    3a22:	96 e0       	ldi	r25, 0x06	; 6
    3a24:	9f 93       	push	r25
    3a26:	8f 93       	push	r24
    3a28:	9a ec       	ldi	r25, 0xCA	; 202
    3a2a:	89 2e       	mov	r8, r25
    3a2c:	99 e4       	ldi	r25, 0x49	; 73
    3a2e:	99 2e       	mov	r9, r25
    3a30:	9f 92       	push	r9
    3a32:	8f 92       	push	r8
    3a34:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
setup():
    3a38:	ed b7       	in	r30, 0x3d	; 61
    3a3a:	fe b7       	in	r31, 0x3e	; 62
    3a3c:	3e 96       	adiw	r30, 0x0e	; 14
    3a3e:	ed bf       	out	0x3d, r30	; 61
    3a40:	fe bf       	out	0x3e, r31	; 62
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	e1 f0       	breq	.+56     	; 0x3a7e <setup+0xeb8>
    3a46:	88 ec       	ldi	r24, 0xC8	; 200
    3a48:	91 e4       	ldi	r25, 0x41	; 65
    3a4a:	9f 93       	push	r25
    3a4c:	8f 93       	push	r24
    3a4e:	8b eb       	ldi	r24, 0xBB	; 187
    3a50:	96 e0       	ldi	r25, 0x06	; 6
    3a52:	9f 93       	push	r25
    3a54:	8f 93       	push	r24
    3a56:	8c eb       	ldi	r24, 0xBC	; 188
    3a58:	9e e4       	ldi	r25, 0x4E	; 78
    3a5a:	9f 93       	push	r25
    3a5c:	8f 93       	push	r24
    3a5e:	0e 94 30 0a 	call	0x1460	; 0x1460 <LogClass::errorf(__FlashStringHelper const*, ...) [clone .constprop.57]>
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	ba ca       	rjmp	.-2700   	; 0x2fe4 <setup+0x41e>
profileExists():
    3a70:	64 e6       	ldi	r22, 0x64	; 100
    3a72:	71 e4       	ldi	r23, 0x41	; 65
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	0e 94 df 28 	call	0x51be	; 0x51be <strtok>
    3a7c:	ad cf       	rjmp	.-166    	; 0x39d8 <setup+0xe12>
setup():
    3a7e:	44 e0       	ldi	r20, 0x04	; 4
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	67 ef       	ldi	r22, 0xF7	; 247
    3a84:	71 e4       	ldi	r23, 0x41	; 65
    3a86:	86 e1       	ldi	r24, 0x16	; 22
    3a88:	92 e4       	ldi	r25, 0x42	; 66
    3a8a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]>
    3a8e:	29 83       	std	Y+1, r18	; 0x01
    3a90:	3a 83       	std	Y+2, r19	; 0x02
    3a92:	4b 83       	std	Y+3, r20	; 0x03
    3a94:	5c 83       	std	Y+4, r21	; 0x04
    3a96:	6d 83       	std	Y+5, r22	; 0x05
    3a98:	7e 83       	std	Y+6, r23	; 0x06
    3a9a:	8f 83       	std	Y+7, r24	; 0x07
    3a9c:	98 87       	std	Y+8, r25	; 0x08
    3a9e:	cb 80       	ldd	r12, Y+3	; 0x03
    3aa0:	dc 80       	ldd	r13, Y+4	; 0x04
    3aa2:	ed 80       	ldd	r14, Y+5	; 0x05
    3aa4:	fe 80       	ldd	r15, Y+6	; 0x06
    3aa6:	ff 92       	push	r15
    3aa8:	ef 92       	push	r14
    3aaa:	df 92       	push	r13
    3aac:	cf 92       	push	r12
    3aae:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab0:	8f 93       	push	r24
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	8f 93       	push	r24
    3ab6:	8e e8       	ldi	r24, 0x8E	; 142
    3ab8:	96 e0       	ldi	r25, 0x06	; 6
    3aba:	9f 93       	push	r25
    3abc:	8f 93       	push	r24
    3abe:	8c eb       	ldi	r24, 0xBC	; 188
    3ac0:	9e e4       	ldi	r25, 0x4E	; 78
    3ac2:	9f 93       	push	r25
    3ac4:	8f 93       	push	r24
    3ac6:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    3aca:	f0 e1       	ldi	r31, 0x10	; 16
    3acc:	cf 0e       	add	r12, r31
    3ace:	d1 1c       	adc	r13, r1
    3ad0:	e1 1c       	adc	r14, r1
    3ad2:	f1 1c       	adc	r15, r1
readBody():
    3ad4:	2d b7       	in	r18, 0x3d	; 61
    3ad6:	3e b7       	in	r19, 0x3e	; 62
    3ad8:	26 5f       	subi	r18, 0xF6	; 246
    3ada:	3f 4f       	sbci	r19, 0xFF	; 255
    3adc:	2d bf       	out	0x3d, r18	; 61
    3ade:	3e bf       	out	0x3e, r19	; 62
    3ae0:	2d b6       	in	r2, 0x3d	; 61
    3ae2:	3e b6       	in	r3, 0x3e	; 62
    3ae4:	8d b7       	in	r24, 0x3d	; 61
    3ae6:	9e b7       	in	r25, 0x3e	; 62
    3ae8:	8c 19       	sub	r24, r12
    3aea:	9d 09       	sbc	r25, r13
    3aec:	8d bf       	out	0x3d, r24	; 61
    3aee:	9e bf       	out	0x3e, r25	; 62
    3af0:	ad b7       	in	r26, 0x3d	; 61
    3af2:	be b7       	in	r27, 0x3e	; 62
    3af4:	11 96       	adiw	r26, 0x01	; 1
    3af6:	5d 01       	movw	r10, r26
    3af8:	26 01       	movw	r4, r12
    3afa:	37 01       	movw	r6, r14
    3afc:	66 24       	eor	r6, r6
    3afe:	77 24       	eor	r7, r7
    3b00:	d3 01       	movw	r26, r6
    3b02:	c2 01       	movw	r24, r4
    3b04:	80 54       	subi	r24, 0x40	; 64
    3b06:	91 09       	sbc	r25, r1
    3b08:	a1 09       	sbc	r26, r1
    3b0a:	b1 09       	sbc	r27, r1
    3b0c:	8d 39       	cpi	r24, 0x9D	; 157
    3b0e:	95 40       	sbci	r25, 0x05	; 5
    3b10:	a1 05       	cpc	r26, r1
    3b12:	b1 05       	cpc	r27, r1
    3b14:	30 f5       	brcc	.+76     	; 0x3b62 <setup+0xf9c>
    3b16:	1f 92       	push	r1
    3b18:	1f 92       	push	r1
    3b1a:	1f 92       	push	r1
    3b1c:	1f 92       	push	r1
    3b1e:	80 e8       	ldi	r24, 0x80	; 128
    3b20:	96 e0       	ldi	r25, 0x06	; 6
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	9f 92       	push	r9
    3b28:	8f 92       	push	r8
    3b2a:	0e 94 4e 0c 	call	0x189c	; 0x189c <SequansControllerClass::writeCommand(__FlashStringHelper const*, char*, unsigned int, ...) [clone .constprop.61]>
    3b2e:	7f 92       	push	r7
    3b30:	6f 92       	push	r6
    3b32:	5f 92       	push	r5
    3b34:	4f 92       	push	r4
    3b36:	f1 e0       	ldi	r31, 0x01	; 1
    3b38:	ff 93       	push	r31
    3b3a:	8c e6       	ldi	r24, 0x6C	; 108
    3b3c:	96 e0       	ldi	r25, 0x06	; 6
    3b3e:	9f 93       	push	r25
    3b40:	8f 93       	push	r24
    3b42:	9f 92       	push	r9
    3b44:	8f 92       	push	r8
    3b46:	0e 94 6d 0b 	call	0x16da	; 0x16da <SequansControllerClass::writeString(__FlashStringHelper const*, bool, ...) [clone .constprop.65]>
    3b4a:	2d b7       	in	r18, 0x3d	; 61
    3b4c:	3e b7       	in	r19, 0x3e	; 62
    3b4e:	2f 5e       	subi	r18, 0xEF	; 239
    3b50:	3f 4f       	sbci	r19, 0xFF	; 255
    3b52:	2d bf       	out	0x3d, r18	; 61
    3b54:	3e bf       	out	0x3e, r19	; 62
    3b56:	81 11       	cpse	r24, r1
    3b58:	07 c0       	rjmp	.+14     	; 0x3b68 <setup+0xfa2>
    3b5a:	8a e3       	ldi	r24, 0x3A	; 58
    3b5c:	96 e0       	ldi	r25, 0x06	; 6
    3b5e:	0e 94 32 0c 	call	0x1864	; 0x1864 <LogClass::error(__FlashStringHelper const*) [clone .constprop.74]>
    3b62:	66 e6       	ldi	r22, 0x66	; 102
    3b64:	71 e4       	ldi	r23, 0x41	; 65
    3b66:	0e c0       	rjmp	.+28     	; 0x3b84 <setup+0xfbe>
setup():
    3b68:	83 e0       	ldi	r24, 0x03	; 3
    3b6a:	98 2e       	mov	r9, r24
readBody():
    3b6c:	0e 94 6f 09 	call	0x12de	; 0x12de <SequansControllerClass::readByte() [clone .constprop.78]>
    3b70:	cc 97       	sbiw	r24, 0x3c	; 60
    3b72:	e1 f7       	brne	.-8      	; 0x3b6c <setup+0xfa6>
    3b74:	9a 94       	dec	r9
    3b76:	91 10       	cpse	r9, r1
    3b78:	f9 cf       	rjmp	.-14     	; 0x3b6c <setup+0xfa6>
    3b7a:	b6 01       	movw	r22, r12
    3b7c:	c5 01       	movw	r24, r10
    3b7e:	0e 94 bf 0a 	call	0x157e	; 0x157e <SequansControllerClass::readResponse(char*, unsigned int) [clone .constprop.77]>
    3b82:	b5 01       	movw	r22, r10
    3b84:	c8 01       	movw	r24, r16
    3b86:	0f d8       	rcall	.-4066   	; 0x2ba6 <String::String(char const*)>
    3b88:	2d be       	out	0x3d, r2	; 61
    3b8a:	3e be       	out	0x3e, r3	; 62
equals():
    3b8c:	d8 01       	movw	r26, r16
    3b8e:	14 96       	adiw	r26, 0x04	; 4
    3b90:	8d 91       	ld	r24, X+
    3b92:	9c 91       	ld	r25, X
    3b94:	15 97       	sbiw	r26, 0x05	; 5
    3b96:	89 2b       	or	r24, r25
    3b98:	b9 f0       	breq	.+46     	; 0x3bc8 <setup+0x1002>
    3b9a:	ed 91       	ld	r30, X+
    3b9c:	fc 91       	ld	r31, X
setup():
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 23       	and	r24, r24
    3ba2:	91 f0       	breq	.+36     	; 0x3bc8 <setup+0x1002>
    3ba4:	ff 93       	push	r31
    3ba6:	ef 93       	push	r30
    3ba8:	83 e8       	ldi	r24, 0x83	; 131
    3baa:	96 e0       	ldi	r25, 0x06	; 6
    3bac:	9f 93       	push	r25
    3bae:	8f 93       	push	r24
    3bb0:	8c eb       	ldi	r24, 0xBC	; 188
    3bb2:	9e e4       	ldi	r25, 0x4E	; 78
    3bb4:	9f 93       	push	r25
    3bb6:	8f 93       	push	r24
    3bb8:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	89 e3       	ldi	r24, 0x39	; 57
    3bca:	92 e4       	ldi	r25, 0x42	; 66
    3bcc:	0e 94 05 0c 	call	0x180a	; 0x180a <LogClass::raw(char const*) [clone .constprop.82]>
__base_dtor ():
    3bd0:	f8 01       	movw	r30, r16
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	0e 94 ac 2c 	call	0x5958	; 0x5958 <free>
    3bda:	04 ca       	rjmp	.-3064   	; 0x2fe4 <setup+0x41e>

00003bdc <__vector_31>:
__vector_31():
    3bdc:	ef 93       	push	r30
    3bde:	ff 93       	push	r31
    3be0:	e6 ec       	ldi	r30, 0xC6	; 198
    3be2:	f9 e4       	ldi	r31, 0x49	; 73
    3be4:	8f 93       	push	r24
    3be6:	8f b7       	in	r24, 0x3f	; 63
    3be8:	8f 93       	push	r24
    3bea:	80 81       	ld	r24, Z
    3bec:	8f 5f       	subi	r24, 0xFF	; 255
    3bee:	80 83       	st	Z, r24
    3bf0:	81 81       	ldd	r24, Z+1	; 0x01
    3bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf4:	81 83       	std	Z+1, r24	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfa:	82 83       	std	Z+2, r24	; 0x02
    3bfc:	83 81       	ldd	r24, Z+3	; 0x03
    3bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3c00:	83 83       	std	Z+3, r24	; 0x03
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	80 93 26 0b 	sts	0x0B26, r24	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7e0b26>
    3c08:	8f 91       	pop	r24
    3c0a:	8f bf       	out	0x3f, r24	; 63
    3c0c:	8f 91       	pop	r24
    3c0e:	ff 91       	pop	r31
    3c10:	ef 91       	pop	r30
    3c12:	18 95       	reti

00003c14 <__vector_35>:
__vector_35():
    3c14:	0f 93       	push	r16
    3c16:	0a e0       	ldi	r16, 0x0A	; 10
    3c18:	0f c0       	rjmp	.+30     	; 0x3c38 <isrBody>

00003c1a <__vector_46>:
__vector_46():
    3c1a:	0f 93       	push	r16
    3c1c:	08 e0       	ldi	r16, 0x08	; 8
    3c1e:	0c c0       	rjmp	.+24     	; 0x3c38 <isrBody>

00003c20 <__vector_24>:
__vector_24():
    3c20:	0f 93       	push	r16
    3c22:	06 e0       	ldi	r16, 0x06	; 6
    3c24:	09 c0       	rjmp	.+18     	; 0x3c38 <isrBody>

00003c26 <__vector_30>:
__vector_30():
    3c26:	0f 93       	push	r16
    3c28:	04 e0       	ldi	r16, 0x04	; 4
    3c2a:	06 c0       	rjmp	.+12     	; 0x3c38 <isrBody>

00003c2c <__vector_45>:
__vector_45():
    3c2c:	0f 93       	push	r16
    3c2e:	02 e0       	ldi	r16, 0x02	; 2
    3c30:	03 c0       	rjmp	.+6      	; 0x3c38 <isrBody>

00003c32 <__vector_8>:
__vector_8():
    3c32:	0f 93       	push	r16
    3c34:	00 e0       	ldi	r16, 0x00	; 0
    3c36:	00 c0       	rjmp	.+0      	; 0x3c38 <isrBody>

00003c38 <isrBody>:
isrBody():
    3c38:	0f 92       	push	r0
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	0f 92       	push	r0
    3c3e:	0b b6       	in	r0, 0x3b	; 59
    3c40:	0f 92       	push	r0
    3c42:	1f 92       	push	r1
    3c44:	11 24       	eor	r1, r1
    3c46:	ff 92       	push	r15
    3c48:	1f 93       	push	r17
    3c4a:	2f 93       	push	r18
    3c4c:	3f 93       	push	r19
    3c4e:	4f 93       	push	r20
    3c50:	5f 93       	push	r21
    3c52:	6f 93       	push	r22
    3c54:	7f 93       	push	r23
    3c56:	8f 93       	push	r24
    3c58:	9f 93       	push	r25
    3c5a:	af 93       	push	r26
    3c5c:	bf 93       	push	r27
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	ef 93       	push	r30
    3c64:	ff 93       	push	r31
    3c66:	a2 e0       	ldi	r26, 0x02	; 2
    3c68:	b0 e4       	ldi	r27, 0x40	; 64
    3c6a:	a0 0f       	add	r26, r16
    3c6c:	b1 1d       	adc	r27, r1
    3c6e:	cd 91       	ld	r28, X+
    3c70:	dc 91       	ld	r29, X
    3c72:	00 0f       	add	r16, r16
    3c74:	0d 5f       	subi	r16, 0xFD	; 253
    3c76:	a0 2f       	mov	r26, r16
    3c78:	b0 e0       	ldi	r27, 0x00	; 0
    3c7a:	fc 90       	ld	r15, X
    3c7c:	10 97       	sbiw	r26, 0x00	; 0
    3c7e:	61 f0       	breq	.+24     	; 0x3c98 <AIntEnd>
    3c80:	1f 2d       	mov	r17, r15

00003c82 <AIntLoop>:
    3c82:	16 95       	lsr	r17
    3c84:	18 f0       	brcs	.+6      	; 0x3c8c <AIntLoop+0xa>
    3c86:	41 f0       	breq	.+16     	; 0x3c98 <AIntEnd>
    3c88:	22 96       	adiw	r28, 0x02	; 2
    3c8a:	fb cf       	rjmp	.-10     	; 0x3c82 <AIntLoop>
    3c8c:	e9 91       	ld	r30, Y+
    3c8e:	f9 91       	ld	r31, Y+
    3c90:	30 97       	sbiw	r30, 0x00	; 0
    3c92:	b9 f3       	breq	.-18     	; 0x3c82 <AIntLoop>
    3c94:	09 95       	icall
    3c96:	f5 cf       	rjmp	.-22     	; 0x3c82 <AIntLoop>

00003c98 <AIntEnd>:
    3c98:	a0 2f       	mov	r26, r16
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	fc 92       	st	X, r15
    3c9e:	ff 91       	pop	r31
    3ca0:	ef 91       	pop	r30
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	bf 91       	pop	r27
    3ca8:	af 91       	pop	r26
    3caa:	9f 91       	pop	r25
    3cac:	8f 91       	pop	r24
    3cae:	7f 91       	pop	r23
    3cb0:	6f 91       	pop	r22
    3cb2:	5f 91       	pop	r21
    3cb4:	4f 91       	pop	r20
    3cb6:	3f 91       	pop	r19
    3cb8:	2f 91       	pop	r18
    3cba:	1f 91       	pop	r17
    3cbc:	ff 90       	pop	r15
    3cbe:	1f 90       	pop	r1
    3cc0:	0f 90       	pop	r0
    3cc2:	0b be       	out	0x3b, r0	; 59
    3cc4:	0f 90       	pop	r0
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	0f 90       	pop	r0
    3cca:	0f 91       	pop	r16
    3ccc:	18 95       	reti

00003cce <__vector_54>:
__vector_54():
    3cce:	ef 93       	push	r30
    3cd0:	ff 93       	push	r31
    3cd2:	f8 98       	cbi	0x1f, 0	; 31
    3cd4:	e9 e2       	ldi	r30, 0x29	; 41
    3cd6:	fe e4       	ldi	r31, 0x4E	; 78
    3cd8:	0b c0       	rjmp	.+22     	; 0x3cf0 <_do_dre()>

00003cda <__vector_53>:
__vector_53():
    3cda:	ef 93       	push	r30
    3cdc:	ff 93       	push	r31
    3cde:	f8 98       	cbi	0x1f, 0	; 31
    3ce0:	e9 e2       	ldi	r30, 0x29	; 41
    3ce2:	fe e4       	ldi	r31, 0x4E	; 78
    3ce4:	34 c0       	rjmp	.+104    	; 0x3d4e <_do_rxc()>

00003ce6 <__vector_55>:
__vector_55():
    3ce6:	ef 93       	push	r30
    3ce8:	ff 93       	push	r31
    3cea:	e9 e2       	ldi	r30, 0x29	; 41
    3cec:	fe e4       	ldi	r31, 0x4E	; 78
    3cee:	5f c0       	rjmp	.+190    	; 0x3dae <_do_txc()>

00003cf0 <_do_dre()>:
_Z7_do_drev():
    3cf0:	2f 93       	push	r18
    3cf2:	2f b7       	in	r18, 0x3f	; 63
    3cf4:	2f 93       	push	r18
    3cf6:	8f 93       	push	r24
    3cf8:	9f 93       	push	r25
    3cfa:	af 93       	push	r26
    3cfc:	bf 93       	push	r27
    3cfe:	68 94       	set

00003d00 <_poll_dre>:
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	c0 85       	ldd	r28, Z+8	; 0x08
    3d08:	d8 e0       	ldi	r29, 0x08	; 8
    3d0a:	92 89       	ldd	r25, Z+18	; 0x12
    3d0c:	df 01       	movw	r26, r30
    3d0e:	a9 0f       	add	r26, r25
    3d10:	b2 1f       	adc	r27, r18
    3d12:	ad 5a       	subi	r26, 0xAD	; 173
    3d14:	bf 4f       	sbci	r27, 0xFF	; 255
    3d16:	8c 91       	ld	r24, X
    3d18:	20 e4       	ldi	r18, 0x40	; 64
    3d1a:	2c 83       	std	Y+4, r18	; 0x04
    3d1c:	8a 83       	std	Y+2, r24	; 0x02
    3d1e:	9f 5f       	subi	r25, 0xFF	; 255
    3d20:	9f 73       	andi	r25, 0x3F	; 63
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	21 89       	ldd	r18, Z+17	; 0x11
    3d26:	29 13       	cpse	r18, r25
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <_done_dre_irq>
    3d2a:	8f 7d       	andi	r24, 0xDF	; 223
    3d2c:	8d 83       	std	Y+5, r24	; 0x05

00003d2e <_done_dre_irq>:
    3d2e:	92 8b       	std	Z+18, r25	; 0x12
    3d30:	df 91       	pop	r29
    3d32:	cf 91       	pop	r28
    3d34:	16 f0       	brts	.+4      	; 0x3d3a <_done_dre_irq+0xc>
    3d36:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_poll_dre_done>
    3d3a:	bf 91       	pop	r27
    3d3c:	af 91       	pop	r26
    3d3e:	9f 91       	pop	r25
    3d40:	8f 91       	pop	r24
    3d42:	2f 91       	pop	r18
    3d44:	2f bf       	out	0x3f, r18	; 63
    3d46:	2f 91       	pop	r18
    3d48:	ff 91       	pop	r31
    3d4a:	ef 91       	pop	r30
    3d4c:	18 95       	reti

00003d4e <_do_rxc()>:
_Z7_do_rxcv():
    3d4e:	2f 93       	push	r18
    3d50:	2f b7       	in	r18, 0x3f	; 63
    3d52:	2f 93       	push	r18
    3d54:	3f 93       	push	r19
    3d56:	8f 93       	push	r24
    3d58:	9f 93       	push	r25
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	c0 85       	ldd	r28, Z+8	; 0x08
    3d60:	d8 e0       	ldi	r29, 0x08	; 8
    3d62:	2e 81       	ldd	r18, Y+6	; 0x06
    3d64:	2f 7e       	andi	r18, 0xEF	; 239
    3d66:	2e 83       	std	Y+6, r18	; 0x06
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	98 81       	ld	r25, Y
    3d6c:	86 74       	andi	r24, 0x46	; 70
    3d6e:	88 0f       	add	r24, r24
    3d70:	36 85       	ldd	r19, Z+14	; 0x0e
    3d72:	38 2b       	or	r19, r24
    3d74:	82 fd       	sbrc	r24, 2
    3d76:	0d c0       	rjmp	.+26     	; 0x3d92 <_end_rxc>
    3d78:	c7 85       	ldd	r28, Z+15	; 0x0f
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	8c 0f       	add	r24, r28
    3d7e:	8f 73       	andi	r24, 0x3F	; 63
    3d80:	20 89       	ldd	r18, Z+16	; 0x10
    3d82:	28 17       	cp	r18, r24
    3d84:	91 f0       	breq	.+36     	; 0x3daa <_buff_full_rxc>
    3d86:	ce 0f       	add	r28, r30
    3d88:	df 2f       	mov	r29, r31
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	d2 1f       	adc	r29, r18
    3d8e:	9b 8b       	std	Y+19, r25	; 0x13
    3d90:	87 87       	std	Z+15, r24	; 0x0f

00003d92 <_end_rxc>:
    3d92:	36 87       	std	Z+14, r19	; 0x0e
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	9f 91       	pop	r25
    3d9a:	8f 91       	pop	r24
    3d9c:	3f 91       	pop	r19
    3d9e:	2f 91       	pop	r18
    3da0:	2f bf       	out	0x3f, r18	; 63
    3da2:	2f 91       	pop	r18
    3da4:	ff 91       	pop	r31
    3da6:	ef 91       	pop	r30
    3da8:	18 95       	reti

00003daa <_buff_full_rxc>:
    3daa:	30 64       	ori	r19, 0x40	; 64
    3dac:	f2 cf       	rjmp	.-28     	; 0x3d92 <_end_rxc>

00003dae <_do_txc()>:
_Z7_do_txcv():
    3dae:	8f 93       	push	r24
    3db0:	8f b7       	in	r24, 0x3f	; 63
    3db2:	8f 93       	push	r24
    3db4:	9f 93       	push	r25
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	c0 85       	ldd	r28, Z+8	; 0x08
    3dbc:	d8 e0       	ldi	r29, 0x08	; 8
    3dbe:	9d 81       	ldd	r25, Y+5	; 0x05

00003dc0 <_txc_flush_rx>:
    3dc0:	88 81       	ld	r24, Y
    3dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc4:	87 fd       	sbrc	r24, 7
    3dc6:	fc cf       	rjmp	.-8      	; 0x3dc0 <_txc_flush_rx>
    3dc8:	9f 7b       	andi	r25, 0xBF	; 191
    3dca:	90 68       	ori	r25, 0x80	; 128
    3dcc:	9d 83       	std	Y+5, r25	; 0x05
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	9f 91       	pop	r25
    3dd4:	8f 91       	pop	r24
    3dd6:	8f bf       	out	0x3f, r24	; 63
    3dd8:	8f 91       	pop	r24
    3dda:	ff 91       	pop	r31
    3ddc:	ef 91       	pop	r30
    3dde:	18 95       	reti

00003de0 <__vector_42>:
__vector_42():
    3de0:	1f 92       	push	r1
    3de2:	0f 92       	push	r0
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	0f 92       	push	r0
    3de8:	11 24       	eor	r1, r1
    3dea:	0b b6       	in	r0, 0x3b	; 59
    3dec:	0f 92       	push	r0
    3dee:	2f 93       	push	r18
    3df0:	3f 93       	push	r19
    3df2:	4f 93       	push	r20
    3df4:	5f 93       	push	r21
    3df6:	6f 93       	push	r22
    3df8:	7f 93       	push	r23
    3dfa:	8f 93       	push	r24
    3dfc:	9f 93       	push	r25
    3dfe:	af 93       	push	r26
    3e00:	bf 93       	push	r27
    3e02:	ef 93       	push	r30
    3e04:	ff 93       	push	r31
onSlaveIRQ():
    3e06:	87 ed       	ldi	r24, 0xD7	; 215
    3e08:	9b e4       	ldi	r25, 0x4B	; 75
    3e0a:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_HandleSlaveIRQ>
__vector_42():
    3e0e:	ff 91       	pop	r31
    3e10:	ef 91       	pop	r30
    3e12:	bf 91       	pop	r27
    3e14:	af 91       	pop	r26
    3e16:	9f 91       	pop	r25
    3e18:	8f 91       	pop	r24
    3e1a:	7f 91       	pop	r23
    3e1c:	6f 91       	pop	r22
    3e1e:	5f 91       	pop	r21
    3e20:	4f 91       	pop	r20
    3e22:	3f 91       	pop	r19
    3e24:	2f 91       	pop	r18
    3e26:	0f 90       	pop	r0
    3e28:	0b be       	out	0x3b, r0	; 59
    3e2a:	0f 90       	pop	r0
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	0f 90       	pop	r0
    3e30:	1f 90       	pop	r1
    3e32:	18 95       	reti

00003e34 <__vector_18>:
__vector_18():
    3e34:	1f 92       	push	r1
    3e36:	0f 92       	push	r0
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	0f 92       	push	r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	0b b6       	in	r0, 0x3b	; 59
    3e40:	0f 92       	push	r0
    3e42:	2f 93       	push	r18
    3e44:	3f 93       	push	r19
    3e46:	4f 93       	push	r20
    3e48:	5f 93       	push	r21
    3e4a:	6f 93       	push	r22
    3e4c:	7f 93       	push	r23
    3e4e:	8f 93       	push	r24
    3e50:	9f 93       	push	r25
    3e52:	af 93       	push	r26
    3e54:	bf 93       	push	r27
    3e56:	ef 93       	push	r30
    3e58:	ff 93       	push	r31
onSlaveIRQ():
    3e5a:	80 ef       	ldi	r24, 0xF0	; 240
    3e5c:	9c e4       	ldi	r25, 0x4C	; 76
    3e5e:	0e 94 ff 07 	call	0xffe	; 0xffe <TWI_HandleSlaveIRQ>
__vector_18():
    3e62:	ff 91       	pop	r31
    3e64:	ef 91       	pop	r30
    3e66:	bf 91       	pop	r27
    3e68:	af 91       	pop	r26
    3e6a:	9f 91       	pop	r25
    3e6c:	8f 91       	pop	r24
    3e6e:	7f 91       	pop	r23
    3e70:	6f 91       	pop	r22
    3e72:	5f 91       	pop	r21
    3e74:	4f 91       	pop	r20
    3e76:	3f 91       	pop	r19
    3e78:	2f 91       	pop	r18
    3e7a:	0f 90       	pop	r0
    3e7c:	0b be       	out	0x3b, r0	; 59
    3e7e:	0f 90       	pop	r0
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	0f 90       	pop	r0
    3e84:	1f 90       	pop	r1
    3e86:	18 95       	reti

00003e88 <__vector_33>:
__vector_33():
    3e88:	1f 92       	push	r1
    3e8a:	0f 92       	push	r0
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	0f 92       	push	r0
    3e90:	11 24       	eor	r1, r1
    3e92:	0b b6       	in	r0, 0x3b	; 59
    3e94:	0f 92       	push	r0
    3e96:	8f 93       	push	r24
    3e98:	9f 93       	push	r25
    3e9a:	ef 93       	push	r30
    3e9c:	ff 93       	push	r31
    3e9e:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
    3ea2:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    3ea6:	89 2b       	or	r24, r25
    3ea8:	39 f1       	breq	.+78     	; 0x3ef8 <__vector_33+0x70>
    3eaa:	80 91 e9 44 	lds	r24, 0x44E9	; 0x8044e9 <tx_tail_index>
    3eae:	90 91 ea 44 	lds	r25, 0x44EA	; 0x8044ea <tx_tail_index+0x1>
    3eb2:	01 96       	adiw	r24, 0x01	; 1
    3eb4:	91 70       	andi	r25, 0x01	; 1
    3eb6:	80 93 e9 44 	sts	0x44E9, r24	; 0x8044e9 <tx_tail_index>
    3eba:	90 93 ea 44 	sts	0x44EA, r25	; 0x8044ea <tx_tail_index+0x1>
    3ebe:	e0 91 e9 44 	lds	r30, 0x44E9	; 0x8044e9 <tx_tail_index>
    3ec2:	f0 91 ea 44 	lds	r31, 0x44EA	; 0x8044ea <tx_tail_index+0x1>
    3ec6:	e5 51       	subi	r30, 0x15	; 21
    3ec8:	fb 4b       	sbci	r31, 0xBB	; 187
    3eca:	80 81       	ld	r24, Z
    3ecc:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7e0822>
    3ed0:	80 91 ed 46 	lds	r24, 0x46ED	; 0x8046ed <tx_num_elements>
    3ed4:	90 91 ee 46 	lds	r25, 0x46EE	; 0x8046ee <tx_num_elements+0x1>
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	80 93 ed 46 	sts	0x46ED, r24	; 0x8046ed <tx_num_elements>
    3ede:	90 93 ee 46 	sts	0x46EE, r25	; 0x8046ee <tx_num_elements+0x1>
    3ee2:	ff 91       	pop	r31
    3ee4:	ef 91       	pop	r30
    3ee6:	9f 91       	pop	r25
    3ee8:	8f 91       	pop	r24
    3eea:	0f 90       	pop	r0
    3eec:	0b be       	out	0x3b, r0	; 59
    3eee:	0f 90       	pop	r0
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	0f 90       	pop	r0
    3ef4:	1f 90       	pop	r1
    3ef6:	18 95       	reti
    3ef8:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    3efc:	8f 7d       	andi	r24, 0xDF	; 223
    3efe:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <__TEXT_REGION_LENGTH__+0x7e0825>
    3f02:	ef cf       	rjmp	.-34     	; 0x3ee2 <__vector_33+0x5a>

00003f04 <__vector_32>:
__vector_32():
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	0f 92       	push	r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	0b b6       	in	r0, 0x3b	; 59
    3f10:	0f 92       	push	r0
    3f12:	0f 93       	push	r16
    3f14:	1f 93       	push	r17
    3f16:	2f 93       	push	r18
    3f18:	3f 93       	push	r19
    3f1a:	4f 93       	push	r20
    3f1c:	5f 93       	push	r21
    3f1e:	6f 93       	push	r22
    3f20:	7f 93       	push	r23
    3f22:	8f 93       	push	r24
    3f24:	9f 93       	push	r25
    3f26:	af 93       	push	r26
    3f28:	bf 93       	push	r27
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	ef 93       	push	r30
    3f30:	ff 93       	push	r31
    3f32:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
    3f36:	20 91 c4 49 	lds	r18, 0x49C4	; 0x8049c4 <rx_head_index>
    3f3a:	30 91 c5 49 	lds	r19, 0x49C5	; 0x8049c5 <rx_head_index+0x1>
    3f3e:	2f 5f       	subi	r18, 0xFF	; 255
    3f40:	3f 4f       	sbci	r19, 0xFF	; 255
    3f42:	31 70       	andi	r19, 0x01	; 1
    3f44:	20 93 c4 49 	sts	0x49C4, r18	; 0x8049c4 <rx_head_index>
    3f48:	30 93 c5 49 	sts	0x49C5, r19	; 0x8049c5 <rx_head_index+0x1>
    3f4c:	e0 91 c4 49 	lds	r30, 0x49C4	; 0x8049c4 <rx_head_index>
    3f50:	f0 91 c5 49 	lds	r31, 0x49C5	; 0x8049c5 <rx_head_index+0x1>
    3f54:	e5 53       	subi	r30, 0x35	; 53
    3f56:	f6 4b       	sbci	r31, 0xB6	; 182
    3f58:	80 83       	st	Z, r24
    3f5a:	20 91 cd 4b 	lds	r18, 0x4BCD	; 0x804bcd <rx_num_elements>
    3f5e:	30 91 ce 4b 	lds	r19, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	20 93 cd 4b 	sts	0x4BCD, r18	; 0x804bcd <rx_num_elements>
    3f6a:	30 93 ce 4b 	sts	0x4BCE, r19	; 0x804bce <rx_num_elements+0x1>
    3f6e:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    3f72:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    3f76:	21 30       	cpi	r18, 0x01	; 1
    3f78:	31 05       	cpc	r19, r1
    3f7a:	71 f1       	breq	.+92     	; 0x3fd8 <__vector_32+0xd4>
    3f7c:	08 f4       	brcc	.+2      	; 0x3f80 <__vector_32+0x7c>
    3f7e:	47 c0       	rjmp	.+142    	; 0x400e <__DATA_REGION_LENGTH__+0xe>
    3f80:	22 30       	cpi	r18, 0x02	; 2
    3f82:	31 05       	cpc	r19, r1
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <__vector_32+0x84>
    3f86:	d7 c0       	rjmp	.+430    	; 0x4136 <__DATA_REGION_LENGTH__+0x136>
    3f88:	23 30       	cpi	r18, 0x03	; 3
    3f8a:	31 05       	cpc	r19, r1
    3f8c:	61 f4       	brne	.+24     	; 0x3fa6 <__vector_32+0xa2>
    3f8e:	8b 32       	cpi	r24, 0x2B	; 43
    3f90:	51 f4       	brne	.+20     	; 0x3fa6 <__vector_32+0xa2>
    3f92:	10 92 e7 44 	sts	0x44E7, r1	; 0x8044e7 <urc_identifier_buffer_length>
    3f96:	10 92 e8 44 	sts	0x44E8, r1	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    3fa2:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    3fa6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <rtsUpdate()>
    3faa:	ff 91       	pop	r31
    3fac:	ef 91       	pop	r30
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
    3fb2:	bf 91       	pop	r27
    3fb4:	af 91       	pop	r26
    3fb6:	9f 91       	pop	r25
    3fb8:	8f 91       	pop	r24
    3fba:	7f 91       	pop	r23
    3fbc:	6f 91       	pop	r22
    3fbe:	5f 91       	pop	r21
    3fc0:	4f 91       	pop	r20
    3fc2:	3f 91       	pop	r19
    3fc4:	2f 91       	pop	r18
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	0f 90       	pop	r0
    3fcc:	0b be       	out	0x3b, r0	; 59
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti
    3fd8:	90 ed       	ldi	r25, 0xD0	; 208
    3fda:	98 0f       	add	r25, r24
    3fdc:	9a 30       	cpi	r25, 0x0A	; 10
    3fde:	18 f4       	brcc	.+6      	; 0x3fe6 <__vector_32+0xe2>
    3fe0:	83 e0       	ldi	r24, 0x03	; 3
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	dc cf       	rjmp	.-72     	; 0x3f9e <__vector_32+0x9a>
    3fe6:	20 91 e7 44 	lds	r18, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    3fea:	30 91 e8 44 	lds	r19, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    3fee:	a9 01       	movw	r20, r18
    3ff0:	4f 5f       	subi	r20, 0xFF	; 255
    3ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff4:	40 93 e7 44 	sts	0x44E7, r20	; 0x8044e7 <urc_identifier_buffer_length>
    3ff8:	50 93 e8 44 	sts	0x44E8, r21	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    3ffc:	25 53       	subi	r18, 0x35	; 53
    3ffe:	3b 4b       	sbci	r19, 0xBB	; 187
    4000:	f9 01       	movw	r30, r18
    4002:	80 83       	st	Z, r24
    4004:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
    4008:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    400c:	cc cf       	rjmp	.-104    	; 0x3fa6 <__vector_32+0xa2>
    400e:	8a 33       	cpi	r24, 0x3A	; 58
    4010:	19 f0       	breq	.+6      	; 0x4018 <__DATA_REGION_LENGTH__+0x18>
    4012:	8d 30       	cpi	r24, 0x0D	; 13
    4014:	09 f0       	breq	.+2      	; 0x4018 <__DATA_REGION_LENGTH__+0x18>
    4016:	77 c0       	rjmp	.+238    	; 0x4106 <__DATA_REGION_LENGTH__+0x106>
    4018:	83 e0       	ldi	r24, 0x03	; 3
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    4020:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    4024:	10 e0       	ldi	r17, 0x00	; 0
    4026:	00 e0       	ldi	r16, 0x00	; 0
    4028:	e8 01       	movw	r28, r16
    402a:	85 e0       	ldi	r24, 0x05	; 5
    402c:	cc 0f       	add	r28, r28
    402e:	dd 1f       	adc	r29, r29
    4030:	8a 95       	dec	r24
    4032:	e1 f7       	brne	.-8      	; 0x402c <__DATA_REGION_LENGTH__+0x2c>
    4034:	cc 57       	subi	r28, 0x7C	; 124
    4036:	d7 4b       	sbci	r29, 0xB7	; 183
    4038:	2c 8d       	ldd	r18, Y+28	; 0x1c
    403a:	80 91 e7 44 	lds	r24, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    403e:	90 91 e8 44 	lds	r25, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    4042:	28 17       	cp	r18, r24
    4044:	19 06       	cpc	r1, r25
    4046:	09 f0       	breq	.+2      	; 0x404a <__DATA_REGION_LENGTH__+0x4a>
    4048:	57 c0       	rjmp	.+174    	; 0x40f8 <__DATA_REGION_LENGTH__+0xf8>
    404a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    404c:	50 e0       	ldi	r21, 0x00	; 0
    404e:	be 01       	movw	r22, r28
    4050:	8b ec       	ldi	r24, 0xCB	; 203
    4052:	94 e4       	ldi	r25, 0x44	; 68
    4054:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <memcmp>
    4058:	89 2b       	or	r24, r25
    405a:	09 f0       	breq	.+2      	; 0x405e <__DATA_REGION_LENGTH__+0x5e>
    405c:	4d c0       	rjmp	.+154    	; 0x40f8 <__DATA_REGION_LENGTH__+0xf8>
    405e:	00 93 ca 44 	sts	0x44CA, r16	; 0x8044ca <urc_index>
    4062:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4064:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4066:	80 93 c8 44 	sts	0x44C8, r24	; 0x8044c8 <urc_current_callback>
    406a:	90 93 c9 44 	sts	0x44C9, r25	; 0x8044c9 <urc_current_callback+0x1>
    406e:	82 e0       	ldi	r24, 0x02	; 2
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    4076:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    407a:	e0 91 ca 44 	lds	r30, 0x44CA	; 0x8044ca <urc_index>
    407e:	80 e2       	ldi	r24, 0x20	; 32
    4080:	e8 9f       	mul	r30, r24
    4082:	f0 01       	movw	r30, r0
    4084:	11 24       	eor	r1, r1
    4086:	ec 57       	subi	r30, 0x7C	; 124
    4088:	f7 4b       	sbci	r31, 0xB7	; 183
    408a:	85 8d       	ldd	r24, Z+29	; 0x1d
    408c:	88 23       	and	r24, r24
    408e:	59 f1       	breq	.+86     	; 0x40e6 <__DATA_REGION_LENGTH__+0xe6>
    4090:	80 91 e7 44 	lds	r24, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    4094:	90 91 e8 44 	lds	r25, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    4098:	20 91 cd 4b 	lds	r18, 0x4BCD	; 0x804bcd <rx_num_elements>
    409c:	30 91 ce 4b 	lds	r19, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    40a0:	02 96       	adiw	r24, 0x02	; 2
    40a2:	28 17       	cp	r18, r24
    40a4:	39 07       	cpc	r19, r25
    40a6:	f8 f0       	brcs	.+62     	; 0x40e6 <__DATA_REGION_LENGTH__+0xe6>
    40a8:	80 91 c4 49 	lds	r24, 0x49C4	; 0x8049c4 <rx_head_index>
    40ac:	90 91 c5 49 	lds	r25, 0x49C5	; 0x8049c5 <rx_head_index+0x1>
    40b0:	20 91 e7 44 	lds	r18, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    40b4:	30 91 e8 44 	lds	r19, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    40b8:	02 97       	sbiw	r24, 0x02	; 2
    40ba:	82 1b       	sub	r24, r18
    40bc:	93 0b       	sbc	r25, r19
    40be:	91 70       	andi	r25, 0x01	; 1
    40c0:	80 93 c4 49 	sts	0x49C4, r24	; 0x8049c4 <rx_head_index>
    40c4:	90 93 c5 49 	sts	0x49C5, r25	; 0x8049c5 <rx_head_index+0x1>
    40c8:	20 91 e7 44 	lds	r18, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    40cc:	30 91 e8 44 	lds	r19, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    40d0:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
    40d4:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    40d8:	02 97       	sbiw	r24, 0x02	; 2
    40da:	82 1b       	sub	r24, r18
    40dc:	93 0b       	sbc	r25, r19
    40de:	80 93 cd 4b 	sts	0x4BCD, r24	; 0x804bcd <rx_num_elements>
    40e2:	90 93 ce 4b 	sts	0x4BCE, r25	; 0x804bce <rx_num_elements+0x1>
    40e6:	10 92 c6 44 	sts	0x44C6, r1	; 0x8044c6 <urc_data_buffer_length>
    40ea:	10 92 c7 44 	sts	0x44C7, r1	; 0x8044c7 <urc_data_buffer_length+0x1>
    40ee:	10 92 e7 44 	sts	0x44E7, r1	; 0x8044e7 <urc_identifier_buffer_length>
    40f2:	10 92 e8 44 	sts	0x44E8, r1	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    40f6:	57 cf       	rjmp	.-338    	; 0x3fa6 <__vector_32+0xa2>
    40f8:	0f 5f       	subi	r16, 0xFF	; 255
    40fa:	1f 4f       	sbci	r17, 0xFF	; 255
    40fc:	0a 30       	cpi	r16, 0x0A	; 10
    40fe:	11 05       	cpc	r17, r1
    4100:	09 f0       	breq	.+2      	; 0x4104 <__DATA_REGION_LENGTH__+0x104>
    4102:	92 cf       	rjmp	.-220    	; 0x4028 <__DATA_REGION_LENGTH__+0x28>
    4104:	f4 cf       	rjmp	.-24     	; 0x40ee <__DATA_REGION_LENGTH__+0xee>
    4106:	20 91 e7 44 	lds	r18, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    410a:	30 91 e8 44 	lds	r19, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    410e:	2c 31       	cpi	r18, 0x1C	; 28
    4110:	31 05       	cpc	r19, r1
    4112:	09 f4       	brne	.+2      	; 0x4116 <__DATA_REGION_LENGTH__+0x116>
    4114:	65 cf       	rjmp	.-310    	; 0x3fe0 <__vector_32+0xdc>
    4116:	20 91 e7 44 	lds	r18, 0x44E7	; 0x8044e7 <urc_identifier_buffer_length>
    411a:	30 91 e8 44 	lds	r19, 0x44E8	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    411e:	a9 01       	movw	r20, r18
    4120:	4f 5f       	subi	r20, 0xFF	; 255
    4122:	5f 4f       	sbci	r21, 0xFF	; 255
    4124:	40 93 e7 44 	sts	0x44E7, r20	; 0x8044e7 <urc_identifier_buffer_length>
    4128:	50 93 e8 44 	sts	0x44E8, r21	; 0x8044e8 <urc_identifier_buffer_length+0x1>
    412c:	25 53       	subi	r18, 0x35	; 53
    412e:	3b 4b       	sbci	r19, 0xBB	; 187
    4130:	f9 01       	movw	r30, r18
    4132:	80 83       	st	Z, r24
    4134:	38 cf       	rjmp	.-400    	; 0x3fa6 <__vector_32+0xa2>
    4136:	8d 30       	cpi	r24, 0x0D	; 13
    4138:	19 f0       	breq	.+6      	; 0x4140 <__DATA_REGION_LENGTH__+0x140>
    413a:	8a 30       	cpi	r24, 0x0A	; 10
    413c:	09 f0       	breq	.+2      	; 0x4140 <__DATA_REGION_LENGTH__+0x140>
    413e:	57 c0       	rjmp	.+174    	; 0x41ee <__DATA_REGION_LENGTH__+0x1ee>
    4140:	e0 91 c6 44 	lds	r30, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    4144:	f0 91 c7 44 	lds	r31, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    4148:	ea 5b       	subi	r30, 0xBA	; 186
    414a:	fc 4b       	sbci	r31, 0xBC	; 188
    414c:	10 82       	st	Z, r1
    414e:	e0 91 ca 44 	lds	r30, 0x44CA	; 0x8044ca <urc_index>
    4152:	80 e2       	ldi	r24, 0x20	; 32
    4154:	e8 9f       	mul	r30, r24
    4156:	f0 01       	movw	r30, r0
    4158:	11 24       	eor	r1, r1
    415a:	ec 57       	subi	r30, 0x7C	; 124
    415c:	f7 4b       	sbci	r31, 0xB7	; 183
    415e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4160:	88 23       	and	r24, r24
    4162:	41 f1       	breq	.+80     	; 0x41b4 <__DATA_REGION_LENGTH__+0x1b4>
    4164:	20 91 cd 4b 	lds	r18, 0x4BCD	; 0x804bcd <rx_num_elements>
    4168:	30 91 ce 4b 	lds	r19, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    416c:	80 91 c6 44 	lds	r24, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    4170:	90 91 c7 44 	lds	r25, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    4174:	28 17       	cp	r18, r24
    4176:	39 07       	cpc	r19, r25
    4178:	e8 f0       	brcs	.+58     	; 0x41b4 <__DATA_REGION_LENGTH__+0x1b4>
    417a:	80 91 c4 49 	lds	r24, 0x49C4	; 0x8049c4 <rx_head_index>
    417e:	90 91 c5 49 	lds	r25, 0x49C5	; 0x8049c5 <rx_head_index+0x1>
    4182:	20 91 c6 44 	lds	r18, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    4186:	30 91 c7 44 	lds	r19, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    418a:	82 1b       	sub	r24, r18
    418c:	93 0b       	sbc	r25, r19
    418e:	91 70       	andi	r25, 0x01	; 1
    4190:	80 93 c4 49 	sts	0x49C4, r24	; 0x8049c4 <rx_head_index>
    4194:	90 93 c5 49 	sts	0x49C5, r25	; 0x8049c5 <rx_head_index+0x1>
    4198:	80 91 cd 4b 	lds	r24, 0x4BCD	; 0x804bcd <rx_num_elements>
    419c:	90 91 ce 4b 	lds	r25, 0x4BCE	; 0x804bce <rx_num_elements+0x1>
    41a0:	20 91 c6 44 	lds	r18, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    41a4:	30 91 c7 44 	lds	r19, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    41a8:	82 1b       	sub	r24, r18
    41aa:	93 0b       	sbc	r25, r19
    41ac:	80 93 cd 4b 	sts	0x4BCD, r24	; 0x804bcd <rx_num_elements>
    41b0:	90 93 ce 4b 	sts	0x4BCE, r25	; 0x804bce <rx_num_elements+0x1>
    41b4:	e0 91 c8 44 	lds	r30, 0x44C8	; 0x8044c8 <urc_current_callback>
    41b8:	f0 91 c9 44 	lds	r31, 0x44C9	; 0x8044c9 <urc_current_callback+0x1>
    41bc:	30 97       	sbiw	r30, 0x00	; 0
    41be:	61 f0       	breq	.+24     	; 0x41d8 <__DATA_REGION_LENGTH__+0x1d8>
    41c0:	c0 e8       	ldi	r28, 0x80	; 128
    41c2:	c0 93 45 04 	sts	0x0445, r28	; 0x800445 <__TEXT_REGION_LENGTH__+0x7e0445>
    41c6:	86 e4       	ldi	r24, 0x46	; 70
    41c8:	93 e4       	ldi	r25, 0x43	; 67
    41ca:	09 95       	icall
    41cc:	10 92 c8 44 	sts	0x44C8, r1	; 0x8044c8 <urc_current_callback>
    41d0:	10 92 c9 44 	sts	0x44C9, r1	; 0x8044c9 <urc_current_callback+0x1>
    41d4:	c0 93 46 04 	sts	0x0446, r28	; 0x800446 <__TEXT_REGION_LENGTH__+0x7e0446>
    41d8:	83 e0       	ldi	r24, 0x03	; 3
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    41e0:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    41e4:	10 92 c6 44 	sts	0x44C6, r1	; 0x8044c6 <urc_data_buffer_length>
    41e8:	10 92 c7 44 	sts	0x44C7, r1	; 0x8044c7 <urc_data_buffer_length+0x1>
    41ec:	dc ce       	rjmp	.-584    	; 0x3fa6 <__vector_32+0xa2>
    41ee:	20 91 c6 44 	lds	r18, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    41f2:	30 91 c7 44 	lds	r19, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    41f6:	20 38       	cpi	r18, 0x80	; 128
    41f8:	31 40       	sbci	r19, 0x01	; 1
    41fa:	09 f4       	brne	.+2      	; 0x41fe <__DATA_REGION_LENGTH__+0x1fe>
    41fc:	f1 ce       	rjmp	.-542    	; 0x3fe0 <__vector_32+0xdc>
    41fe:	20 91 c6 44 	lds	r18, 0x44C6	; 0x8044c6 <urc_data_buffer_length>
    4202:	30 91 c7 44 	lds	r19, 0x44C7	; 0x8044c7 <urc_data_buffer_length+0x1>
    4206:	a9 01       	movw	r20, r18
    4208:	4f 5f       	subi	r20, 0xFF	; 255
    420a:	5f 4f       	sbci	r21, 0xFF	; 255
    420c:	40 93 c6 44 	sts	0x44C6, r20	; 0x8044c6 <urc_data_buffer_length>
    4210:	50 93 c7 44 	sts	0x44C7, r21	; 0x8044c7 <urc_data_buffer_length+0x1>
    4214:	2a 5b       	subi	r18, 0xBA	; 186
    4216:	3c 4b       	sbci	r19, 0xBC	; 188
    4218:	8b cf       	rjmp	.-234    	; 0x4130 <__DATA_REGION_LENGTH__+0x130>

0000421a <__vector_6>:
__vector_6():
    421a:	1f 92       	push	r1
    421c:	0f 92       	push	r0
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	0f 92       	push	r0
    4222:	11 24       	eor	r1, r1
    4224:	8f 93       	push	r24
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7e0153>
    422c:	80 93 44 43 	sts	0x4344, r24	; 0x804344 <pit_triggered>
    4230:	8f 91       	pop	r24
    4232:	0f 90       	pop	r0
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	0f 90       	pop	r0
    4238:	1f 90       	pop	r1
    423a:	18 95       	reti

0000423c <countPulseASM>:
countPulseASM():
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:70

countPulseASM:

.LM0:
.LFBB1:
    push r12   ;   ;  130 pushqi1/1 [length = 1]
    423c:	cf 92       	push	r12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:71
    push r13   ;   ;  131 pushqi1/1 [length = 1]
    423e:	df 92       	push	r13
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:72
    push r14   ;   ;  132 pushqi1/1 [length = 1]
    4240:	ef 92       	push	r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:73
    push r15   ;   ;  133 pushqi1/1 [length = 1]
    4242:	ff 92       	push	r15
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:74
    push r16   ;   ;  134 pushqi1/1 [length = 1]
    4244:	0f 93       	push	r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:75
    push r17   ;   ;  135 pushqi1/1 [length = 1]
    4246:	1f 93       	push	r17
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:80
/* prologue: function */
/* frame size = 0 */
/* stack size = 6 */
.L__stack_usage = 6
    mov r30,r24  ;  port, port   ;  2 *movhi/1  [length = 2]
    4248:	e8 2f       	mov	r30, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:81
    mov r31,r25  ;  port, port
    424a:	f9 2f       	mov	r31, r25
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:87
/*     unsigned long width = 0;
***     // wait for any previous pulse to end
***     while ((*port & bit) == stateMask)
*/
.LM1:
    rjmp .L2   ;   ;  181 jump  [length = 1]
    424c:	08 c0       	rjmp	.+16     	; 0x425e <countPulseASM+0x22>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:91
.L4:
/*         if (--maxloops == 0) */
.LM2:
    rjmp .LM2A ; waste an extra 5 cycles
    424e:	00 c0       	rjmp	.+0      	; 0x4250 <countPulseASM+0x14>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:93
.LM2A:
    rjmp .LM2B ;
    4250:	00 c0       	rjmp	.+0      	; 0x4252 <countPulseASM+0x16>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:95
.LM2B:
    nop ;
    4252:	00 00       	nop
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:96
    subi r16,1   ;  maxloops,  ;  17  addsi3/2  [length = 4]
    4254:	01 50       	subi	r16, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:97
    sbc r17, r1   ;  maxloops
    4256:	11 09       	sbc	r17, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:98
    sbc r18, r1   ;  maxloops
    4258:	21 09       	sbc	r18, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:99
    sbc r19, r1   ;  maxloops
    425a:	31 09       	sbc	r19, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:100
    breq .L13  ; ,   ;  19  branch  [length = 1]
    425c:	49 f1       	breq	.+82     	; 0x42b0 <countPulseASM+0x74>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:104
.L2:
/*         if (--maxloops == 0) */
.LM3:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  22  movqi_insn/4  [length = 1]
    425e:	90 81       	ld	r25, Z
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:105
    and r25,r22  ;  D.1554, bit  ;  24  andqi3/1  [length = 1]
    4260:	96 23       	and	r25, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:106
    cp r25,r20   ;  D.1554, stateMask  ;  25  *cmpqi/2  [length = 1]
    4262:	94 17       	cp	r25, r20
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:107
    breq .L4   ; ,   ;  26  branch  [length = 1]
    4264:	a1 f3       	breq	.-24     	; 0x424e <countPulseASM+0x12>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:108
    rjmp .L6   ;   ;  184 jump  [length = 1]
    4266:	08 c0       	rjmp	.+16     	; 0x4278 <countPulseASM+0x3c>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:117
***     // wait for the pulse to start
***     while ((*port & bit) != stateMask)
***         if (--maxloops == 0)
*/
.LM4:
    rjmp .LM4A ; waste an extra 5 cycles
    4268:	00 c0       	rjmp	.+0      	; 0x426a <countPulseASM+0x2e>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:119
.LM4A:
    rjmp .LM4B ;
    426a:	00 c0       	rjmp	.+0      	; 0x426c <countPulseASM+0x30>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:121
.LM4B:
    nop ;
    426c:	00 00       	nop
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:122
    subi r16,1   ;  maxloops,  ;  31  addsi3/2  [length = 4]
    426e:	01 50       	subi	r16, 0x01	; 1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:123
    sbc r17, r1   ;  maxloops
    4270:	11 09       	sbc	r17, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:124
    sbc r18, r1   ;  maxloops
    4272:	21 09       	sbc	r18, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:125
    sbc r19, r1   ;  maxloops
    4274:	31 09       	sbc	r19, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:126
    breq .L13  ; ,   ;  33  branch  [length = 1]
    4276:	e1 f0       	breq	.+56     	; 0x42b0 <countPulseASM+0x74>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:130
.L6:
/*         if (--maxloops == 0) */
.LM5:
    ld r25,Z   ;  D.1554, *port_7(D)   ;  41  movqi_insn/4  [length = 1]
    4278:	90 81       	ld	r25, Z
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:131
    and r25,r22  ;  D.1554, bit  ;  43  andqi3/1  [length = 1]
    427a:	96 23       	and	r25, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:132
    cpse r25,r20   ;  D.1554, stateMask  ;  44  enable_interrupt-3  [length = 1]
    427c:	94 13       	cpse	r25, r20
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:133
    rjmp .L7   ;
    427e:	f4 cf       	rjmp	.-24     	; 0x4268 <countPulseASM+0x2c>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:134
    mov r12, r1   ;  width  ;  7 *movsi/2  [length = 4]
    4280:	c1 2c       	mov	r12, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:135
    mov r13, r1   ;  width
    4282:	d1 2c       	mov	r13, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:136
    mov r14, r1   ;  width
    4284:	e1 2c       	mov	r14, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:137
    mov r15, r1   ;  width
    4286:	f1 2c       	mov	r15, r1
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:138
    rjmp .L9   ;   ;  186 jump  [length = 1]
    4288:	0a c0       	rjmp	.+20     	; 0x429e <countPulseASM+0x62>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:147
***     // wait for the pulse to stop
***     while ((*port & bit) == stateMask) {
***         if (++width == maxloops)
*/
.LM6:
    ldi r24,-1   ; ,   ;  50  addsi3/3  [length = 5]
    428a:	8f ef       	ldi	r24, 0xFF	; 255
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:148
    sub r12,r24  ;  width,
    428c:	c8 1a       	sub	r12, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:149
    sbc r13,r24  ;  width,
    428e:	d8 0a       	sbc	r13, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:150
    sbc r14,r24  ;  width,
    4290:	e8 0a       	sbc	r14, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:151
    sbc r15,r24  ;  width,
    4292:	f8 0a       	sbc	r15, r24
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:152
    cp r16,r12   ;  maxloops, width  ;  51  *cmpsi/2  [length = 4]
    4294:	0c 15       	cp	r16, r12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:153
    cpc r17,r13  ;  maxloops, width
    4296:	1d 05       	cpc	r17, r13
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:154
    cpc r18,r14  ;  maxloops, width
    4298:	2e 05       	cpc	r18, r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:155
    cpc r19,r15  ;  maxloops, width
    429a:	3f 05       	cpc	r19, r15
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:156
    breq .L13  ; ,   ;  52  branch  [length = 1]
    429c:	49 f0       	breq	.+18     	; 0x42b0 <countPulseASM+0x74>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:160
.L9:
/*         if (++width == maxloops) */
.LM7:
    ld r24,Z   ;  D.1554, *port_7(D)   ;  60  movqi_insn/4  [length = 1]
    429e:	80 81       	ld	r24, Z
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:161
    and r24,r22  ;  D.1554, bit  ;  62  andqi3/1  [length = 1]
    42a0:	86 23       	and	r24, r22
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:162
    cp r24,r20   ;  D.1554, stateMask  ;  63  *cmpqi/2  [length = 1]
    42a2:	84 17       	cp	r24, r20
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:163
    breq .L10  ; ,   ;  64  branch  [length = 1]
    42a4:	91 f3       	breq	.-28     	; 0x428a <countPulseASM+0x4e>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:169
/*             return 0;
***     }
***     return width;
*/
.LM8:
    mov r22,r12  ;  D.1553, width  ;  108 movqi_insn/1  [length = 1]
    42a6:	6c 2d       	mov	r22, r12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:170
    mov r23,r13  ;  D.1553, width  ;  109 movqi_insn/1  [length = 1]
    42a8:	7d 2d       	mov	r23, r13
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:171
    mov r24,r14  ;  D.1553, width  ;  110 movqi_insn/1  [length = 1]
    42aa:	8e 2d       	mov	r24, r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:172
    mov r25,r15  ;  D.1553, width  ;  111 movqi_insn/1  [length = 1]
    42ac:	9f 2d       	mov	r25, r15
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:173
    rjmp .LM11 ;
    42ae:	04 c0       	rjmp	.+8      	; 0x42b8 <countPulseASM+0x7c>
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:177
/* epilogue start */
.L13:
.LM10:
    ldi r22,0  ;  D.1553   ;  120 movqi_insn/1  [length = 1]
    42b0:	60 e0       	ldi	r22, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:178
    ldi r23,0  ;  D.1553   ;  121 movqi_insn/1  [length = 1]
    42b2:	70 e0       	ldi	r23, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:179
    ldi r24,0  ;  D.1553   ;  122 movqi_insn/1  [length = 1]
    42b4:	80 e0       	ldi	r24, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:180
    ldi r25,0  ;  D.1553   ;  123 movqi_insn/1  [length = 1]
    42b6:	90 e0       	ldi	r25, 0x00	; 0
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:183
/* epilogue start */
.LM11:
    pop r17  ;   ;  138 popqi [length = 1]
    42b8:	1f 91       	pop	r17
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:184
    pop r16  ;   ;  139 popqi [length = 1]
    42ba:	0f 91       	pop	r16
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:185
    pop r15  ;   ;  140 popqi [length = 1]
    42bc:	ff 90       	pop	r15
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:186
    pop r14  ;   ;  141 popqi [length = 1]
    42be:	ef 90       	pop	r14
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:187
    pop r13  ;   ;  142 popqi [length = 1]
    42c0:	df 90       	pop	r13
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:188
    pop r12  ;   ;  143 popqi [length = 1]
    42c2:	cf 90       	pop	r12
/home/mrmemory/.arduino15/packages/DxCore/hardware/megaavr/1.5.11/cores/dxcore/wiring_pulse.S:189
    ret  ;  144 return_from_epilogue  [length = 1]
    42c4:	08 95       	ret

000042c6 <vfprintf>:
vfprintf():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:822
    42c6:	2f 92       	push	r2
    42c8:	3f 92       	push	r3
    42ca:	4f 92       	push	r4
    42cc:	5f 92       	push	r5
    42ce:	6f 92       	push	r6
    42d0:	7f 92       	push	r7
    42d2:	8f 92       	push	r8
    42d4:	9f 92       	push	r9
    42d6:	af 92       	push	r10
    42d8:	bf 92       	push	r11
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	2f 97       	sbiw	r28, 0x0f	; 15
    42f0:	cd bf       	out	0x3d, r28	; 61
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	6c 01       	movw	r12, r24
    42f6:	1b 01       	movw	r2, r22
    42f8:	5a 01       	movw	r10, r20
    42fa:	fc 01       	movw	r30, r24
    42fc:	16 82       	std	Z+6, r1	; 0x06
    42fe:	17 82       	std	Z+7, r1	; 0x07
    4300:	83 81       	ldd	r24, Z+3	; 0x03
    4302:	9e 01       	movw	r18, r28
    4304:	2f 5f       	subi	r18, 0xFF	; 255
    4306:	3f 4f       	sbci	r19, 0xFF	; 255
    4308:	49 01       	movw	r8, r18
    430a:	81 fd       	sbrc	r24, 1
    430c:	ce c0       	rjmp	.+412    	; 0x44aa <vfprintf+0x1e4>
    430e:	8f ef       	ldi	r24, 0xFF	; 255
    4310:	9f ef       	ldi	r25, 0xFF	; 255
    4312:	d4 c2       	rjmp	.+1448   	; 0x48bc <vfprintf+0x5f6>
    4314:	f1 2c       	mov	r15, r1
    4316:	51 2c       	mov	r5, r1
    4318:	00 e0       	ldi	r16, 0x00	; 0
    431a:	00 32       	cpi	r16, 0x20	; 32
    431c:	38 f4       	brcc	.+14     	; 0x432c <vfprintf+0x66>
    431e:	8b 32       	cpi	r24, 0x2B	; 43
    4320:	09 f1       	breq	.+66     	; 0x4364 <vfprintf+0x9e>
    4322:	90 f4       	brcc	.+36     	; 0x4348 <vfprintf+0x82>
    4324:	80 32       	cpi	r24, 0x20	; 32
    4326:	f9 f0       	breq	.+62     	; 0x4366 <vfprintf+0xa0>
    4328:	83 32       	cpi	r24, 0x23	; 35
    432a:	09 f1       	breq	.+66     	; 0x436e <vfprintf+0xa8>
    432c:	07 fd       	sbrc	r16, 7
    432e:	34 c0       	rjmp	.+104    	; 0x4398 <vfprintf+0xd2>
    4330:	20 ed       	ldi	r18, 0xD0	; 208
    4332:	28 0f       	add	r18, r24
    4334:	2a 30       	cpi	r18, 0x0A	; 10
    4336:	20 f5       	brcc	.+72     	; 0x4380 <vfprintf+0xba>
    4338:	06 ff       	sbrs	r16, 6
    433a:	1b c0       	rjmp	.+54     	; 0x4372 <vfprintf+0xac>
    433c:	fa e0       	ldi	r31, 0x0A	; 10
    433e:	ff 9e       	mul	r15, r31
    4340:	20 0d       	add	r18, r0
    4342:	11 24       	eor	r1, r1
    4344:	f2 2e       	mov	r15, r18
    4346:	05 c0       	rjmp	.+10     	; 0x4352 <vfprintf+0x8c>
    4348:	8d 32       	cpi	r24, 0x2D	; 45
    434a:	79 f0       	breq	.+30     	; 0x436a <vfprintf+0xa4>
    434c:	80 33       	cpi	r24, 0x30	; 48
    434e:	71 f7       	brne	.-36     	; 0x432c <vfprintf+0x66>
    4350:	01 60       	ori	r16, 0x01	; 1
    4352:	f1 01       	movw	r30, r2
    4354:	93 fd       	sbrc	r25, 3
    4356:	85 91       	lpm	r24, Z+
    4358:	93 ff       	sbrs	r25, 3
    435a:	81 91       	ld	r24, Z+
    435c:	1f 01       	movw	r2, r30
    435e:	81 11       	cpse	r24, r1
    4360:	dc cf       	rjmp	.-72     	; 0x431a <vfprintf+0x54>
    4362:	1a c0       	rjmp	.+52     	; 0x4398 <vfprintf+0xd2>
    4364:	02 60       	ori	r16, 0x02	; 2
    4366:	04 60       	ori	r16, 0x04	; 4
    4368:	f4 cf       	rjmp	.-24     	; 0x4352 <vfprintf+0x8c>
    436a:	08 60       	ori	r16, 0x08	; 8
    436c:	f2 cf       	rjmp	.-28     	; 0x4352 <vfprintf+0x8c>
    436e:	00 61       	ori	r16, 0x10	; 16
    4370:	f0 cf       	rjmp	.-32     	; 0x4352 <vfprintf+0x8c>
    4372:	3a e0       	ldi	r19, 0x0A	; 10
    4374:	53 9e       	mul	r5, r19
    4376:	20 0d       	add	r18, r0
    4378:	11 24       	eor	r1, r1
    437a:	52 2e       	mov	r5, r18
    437c:	00 62       	ori	r16, 0x20	; 32
    437e:	e9 cf       	rjmp	.-46     	; 0x4352 <vfprintf+0x8c>
    4380:	8e 32       	cpi	r24, 0x2E	; 46
    4382:	21 f4       	brne	.+8      	; 0x438c <vfprintf+0xc6>
    4384:	06 fd       	sbrc	r16, 6
    4386:	97 c2       	rjmp	.+1326   	; 0x48b6 <vfprintf+0x5f0>
    4388:	00 64       	ori	r16, 0x40	; 64
    438a:	e3 cf       	rjmp	.-58     	; 0x4352 <vfprintf+0x8c>
    438c:	8c 36       	cpi	r24, 0x6C	; 108
    438e:	11 f4       	brne	.+4      	; 0x4394 <vfprintf+0xce>
    4390:	00 68       	ori	r16, 0x80	; 128
    4392:	df cf       	rjmp	.-66     	; 0x4352 <vfprintf+0x8c>
    4394:	88 36       	cpi	r24, 0x68	; 104
    4396:	e9 f2       	breq	.-70     	; 0x4352 <vfprintf+0x8c>
    4398:	9b eb       	ldi	r25, 0xBB	; 187
    439a:	98 0f       	add	r25, r24
    439c:	93 30       	cpi	r25, 0x03	; 3
    439e:	08 f0       	brcs	.+2      	; 0x43a2 <vfprintf+0xdc>
    43a0:	5c c0       	rjmp	.+184    	; 0x445a <vfprintf+0x194>
    43a2:	00 61       	ori	r16, 0x10	; 16
    43a4:	80 5e       	subi	r24, 0xE0	; 224
    43a6:	06 fd       	sbrc	r16, 6
    43a8:	02 c0       	rjmp	.+4      	; 0x43ae <vfprintf+0xe8>
    43aa:	46 e0       	ldi	r20, 0x06	; 6
    43ac:	f4 2e       	mov	r15, r20
    43ae:	10 2f       	mov	r17, r16
    43b0:	1f 73       	andi	r17, 0x3F	; 63
    43b2:	85 36       	cpi	r24, 0x65	; 101
    43b4:	09 f0       	breq	.+2      	; 0x43b8 <vfprintf+0xf2>
    43b6:	58 c0       	rjmp	.+176    	; 0x4468 <vfprintf+0x1a2>
    43b8:	10 64       	ori	r17, 0x40	; 64
    43ba:	17 ff       	sbrs	r17, 7
    43bc:	5e c0       	rjmp	.+188    	; 0x447a <vfprintf+0x1b4>
    43be:	8f 2d       	mov	r24, r15
    43c0:	9b e3       	ldi	r25, 0x3B	; 59
    43c2:	9f 15       	cp	r25, r15
    43c4:	08 f4       	brcc	.+2      	; 0x43c8 <vfprintf+0x102>
    43c6:	8b e3       	ldi	r24, 0x3B	; 59
    43c8:	44 24       	eor	r4, r4
    43ca:	43 94       	inc	r4
    43cc:	48 0e       	add	r4, r24
    43ce:	27 e0       	ldi	r18, 0x07	; 7
    43d0:	35 01       	movw	r6, r10
    43d2:	f4 e0       	ldi	r31, 0x04	; 4
    43d4:	6f 0e       	add	r6, r31
    43d6:	71 1c       	adc	r7, r1
    43d8:	f5 01       	movw	r30, r10
    43da:	60 81       	ld	r22, Z
    43dc:	71 81       	ldd	r23, Z+1	; 0x01
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	04 2d       	mov	r16, r4
    43e4:	a4 01       	movw	r20, r8
    43e6:	ba d5       	rcall	.+2932   	; 0x4f5c <__ftoa_engine>
    43e8:	5c 01       	movw	r10, r24
    43ea:	f9 81       	ldd	r31, Y+1	; 0x01
    43ec:	fc 87       	std	Y+12, r31	; 0x0c
    43ee:	f0 ff       	sbrs	r31, 0
    43f0:	03 c0       	rjmp	.+6      	; 0x43f8 <vfprintf+0x132>
    43f2:	0d e2       	ldi	r16, 0x2D	; 45
    43f4:	f3 ff       	sbrs	r31, 3
    43f6:	07 c0       	rjmp	.+14     	; 0x4406 <vfprintf+0x140>
    43f8:	0b e2       	ldi	r16, 0x2B	; 43
    43fa:	11 fd       	sbrc	r17, 1
    43fc:	04 c0       	rjmp	.+8      	; 0x4406 <vfprintf+0x140>
    43fe:	01 2f       	mov	r16, r17
    4400:	04 70       	andi	r16, 0x04	; 4
    4402:	12 fd       	sbrc	r17, 2
    4404:	00 e2       	ldi	r16, 0x20	; 32
    4406:	2c 85       	ldd	r18, Y+12	; 0x0c
    4408:	2c 70       	andi	r18, 0x0C	; 12
    440a:	e2 2e       	mov	r14, r18
    440c:	09 f4       	brne	.+2      	; 0x4410 <vfprintf+0x14a>
    440e:	67 c0       	rjmp	.+206    	; 0x44de <vfprintf+0x218>
    4410:	01 11       	cpse	r16, r1
    4412:	b9 c2       	rjmp	.+1394   	; 0x4986 <vfprintf+0x6c0>
    4414:	f3 e0       	ldi	r31, 0x03	; 3
    4416:	e1 2c       	mov	r14, r1
    4418:	f5 15       	cp	r31, r5
    441a:	90 f4       	brcc	.+36     	; 0x4440 <vfprintf+0x17a>
    441c:	83 e0       	ldi	r24, 0x03	; 3
    441e:	e5 2c       	mov	r14, r5
    4420:	e8 1a       	sub	r14, r24
    4422:	13 fd       	sbrc	r17, 3
    4424:	07 c0       	rjmp	.+14     	; 0x4434 <vfprintf+0x16e>
    4426:	b6 01       	movw	r22, r12
    4428:	80 e2       	ldi	r24, 0x20	; 32
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	28 d7       	rcall	.+3664   	; 0x527e <fputc>
    442e:	ea 94       	dec	r14
    4430:	e1 10       	cpse	r14, r1
    4432:	f9 cf       	rjmp	.-14     	; 0x4426 <vfprintf+0x160>
    4434:	00 23       	and	r16, r16
    4436:	21 f0       	breq	.+8      	; 0x4440 <vfprintf+0x17a>
    4438:	b6 01       	movw	r22, r12
    443a:	80 2f       	mov	r24, r16
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	1f d7       	rcall	.+3646   	; 0x527e <fputc>
    4440:	3c 85       	ldd	r19, Y+12	; 0x0c
    4442:	24 ef       	ldi	r18, 0xF4	; 244
    4444:	a2 2e       	mov	r10, r18
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	b2 2e       	mov	r11, r18
    444a:	33 fd       	sbrc	r19, 3
    444c:	04 c0       	rjmp	.+8      	; 0x4456 <vfprintf+0x190>
    444e:	98 ef       	ldi	r25, 0xF8	; 248
    4450:	a9 2e       	mov	r10, r25
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	b9 2e       	mov	r11, r25
    4456:	10 71       	andi	r17, 0x10	; 16
    4458:	21 c0       	rjmp	.+66     	; 0x449c <vfprintf+0x1d6>
    445a:	9b e9       	ldi	r25, 0x9B	; 155
    445c:	98 0f       	add	r25, r24
    445e:	93 30       	cpi	r25, 0x03	; 3
    4460:	08 f0       	brcs	.+2      	; 0x4464 <vfprintf+0x19e>
    4462:	39 c1       	rjmp	.+626    	; 0x46d6 <vfprintf+0x410>
    4464:	0f 7e       	andi	r16, 0xEF	; 239
    4466:	9f cf       	rjmp	.-194    	; 0x43a6 <vfprintf+0xe0>
    4468:	86 36       	cpi	r24, 0x66	; 102
    446a:	11 f4       	brne	.+4      	; 0x4470 <vfprintf+0x1aa>
    446c:	10 68       	ori	r17, 0x80	; 128
    446e:	a5 cf       	rjmp	.-182    	; 0x43ba <vfprintf+0xf4>
    4470:	ff 20       	and	r15, r15
    4472:	09 f4       	brne	.+2      	; 0x4476 <vfprintf+0x1b0>
    4474:	a2 cf       	rjmp	.-188    	; 0x43ba <vfprintf+0xf4>
    4476:	fa 94       	dec	r15
    4478:	a0 cf       	rjmp	.-192    	; 0x43ba <vfprintf+0xf4>
    447a:	e7 e0       	ldi	r30, 0x07	; 7
    447c:	2f 2d       	mov	r18, r15
    447e:	ef 15       	cp	r30, r15
    4480:	18 f4       	brcc	.+6      	; 0x4488 <vfprintf+0x1c2>
    4482:	27 e0       	ldi	r18, 0x07	; 7
    4484:	37 e0       	ldi	r19, 0x07	; 7
    4486:	f3 2e       	mov	r15, r19
    4488:	41 2c       	mov	r4, r1
    448a:	a2 cf       	rjmp	.-188    	; 0x43d0 <vfprintf+0x10a>
    448c:	11 11       	cpse	r17, r1
    448e:	80 52       	subi	r24, 0x20	; 32
    4490:	b6 01       	movw	r22, r12
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	f4 d6       	rcall	.+3560   	; 0x527e <fputc>
    4496:	8f ef       	ldi	r24, 0xFF	; 255
    4498:	a8 1a       	sub	r10, r24
    449a:	b8 0a       	sbc	r11, r24
    449c:	f5 01       	movw	r30, r10
    449e:	84 91       	lpm	r24, Z
    44a0:	81 11       	cpse	r24, r1
    44a2:	f4 cf       	rjmp	.-24     	; 0x448c <vfprintf+0x1c6>
    44a4:	e1 10       	cpse	r14, r1
    44a6:	69 c2       	rjmp	.+1234   	; 0x497a <vfprintf+0x6b4>
    44a8:	53 01       	movw	r10, r6
    44aa:	f6 01       	movw	r30, r12
    44ac:	93 81       	ldd	r25, Z+3	; 0x03
    44ae:	f1 01       	movw	r30, r2
    44b0:	93 fd       	sbrc	r25, 3
    44b2:	85 91       	lpm	r24, Z+
    44b4:	93 ff       	sbrs	r25, 3
    44b6:	81 91       	ld	r24, Z+
    44b8:	1f 01       	movw	r2, r30
    44ba:	88 23       	and	r24, r24
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <vfprintf+0x1fa>
    44be:	fb c1       	rjmp	.+1014   	; 0x48b6 <vfprintf+0x5f0>
    44c0:	85 32       	cpi	r24, 0x25	; 37
    44c2:	41 f4       	brne	.+16     	; 0x44d4 <vfprintf+0x20e>
    44c4:	93 fd       	sbrc	r25, 3
    44c6:	85 91       	lpm	r24, Z+
    44c8:	93 ff       	sbrs	r25, 3
    44ca:	81 91       	ld	r24, Z+
    44cc:	1f 01       	movw	r2, r30
    44ce:	85 32       	cpi	r24, 0x25	; 37
    44d0:	09 f0       	breq	.+2      	; 0x44d4 <vfprintf+0x20e>
    44d2:	20 cf       	rjmp	.-448    	; 0x4314 <vfprintf+0x4e>
    44d4:	b6 01       	movw	r22, r12
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	d2 d6       	rcall	.+3492   	; 0x527e <fputc>
    44da:	35 01       	movw	r6, r10
    44dc:	e5 cf       	rjmp	.-54     	; 0x44a8 <vfprintf+0x1e2>
    44de:	17 ff       	sbrs	r17, 7
    44e0:	6c c0       	rjmp	.+216    	; 0x45ba <vfprintf+0x2f4>
    44e2:	4a 0c       	add	r4, r10
    44e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    44e6:	f4 ff       	sbrs	r31, 4
    44e8:	04 c0       	rjmp	.+8      	; 0x44f2 <vfprintf+0x22c>
    44ea:	8a 81       	ldd	r24, Y+2	; 0x02
    44ec:	81 33       	cpi	r24, 0x31	; 49
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <vfprintf+0x22c>
    44f0:	4a 94       	dec	r4
    44f2:	14 14       	cp	r1, r4
    44f4:	0c f0       	brlt	.+2      	; 0x44f8 <vfprintf+0x232>
    44f6:	83 c0       	rjmp	.+262    	; 0x45fe <vfprintf+0x338>
    44f8:	28 e0       	ldi	r18, 0x08	; 8
    44fa:	24 15       	cp	r18, r4
    44fc:	10 f4       	brcc	.+4      	; 0x4502 <vfprintf+0x23c>
    44fe:	88 e0       	ldi	r24, 0x08	; 8
    4500:	48 2e       	mov	r4, r24
    4502:	85 e0       	ldi	r24, 0x05	; 5
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	17 ff       	sbrs	r17, 7
    4508:	06 c0       	rjmp	.+12     	; 0x4516 <vfprintf+0x250>
    450a:	c5 01       	movw	r24, r10
    450c:	b7 fe       	sbrs	r11, 7
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <vfprintf+0x24e>
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	01 11       	cpse	r16, r1
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	ff 20       	and	r15, r15
    451c:	31 f0       	breq	.+12     	; 0x452a <vfprintf+0x264>
    451e:	2f 2d       	mov	r18, r15
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	2f 5f       	subi	r18, 0xFF	; 255
    4524:	3f 4f       	sbci	r19, 0xFF	; 255
    4526:	82 0f       	add	r24, r18
    4528:	93 1f       	adc	r25, r19
    452a:	58 16       	cp	r5, r24
    452c:	19 06       	cpc	r1, r25
    452e:	19 f0       	breq	.+6      	; 0x4536 <vfprintf+0x270>
    4530:	14 f0       	brlt	.+4      	; 0x4536 <vfprintf+0x270>
    4532:	e5 2c       	mov	r14, r5
    4534:	e8 1a       	sub	r14, r24
    4536:	81 2f       	mov	r24, r17
    4538:	89 70       	andi	r24, 0x09	; 9
    453a:	11 f4       	brne	.+4      	; 0x4540 <vfprintf+0x27a>
    453c:	e1 10       	cpse	r14, r1
    453e:	64 c0       	rjmp	.+200    	; 0x4608 <vfprintf+0x342>
    4540:	00 23       	and	r16, r16
    4542:	21 f0       	breq	.+8      	; 0x454c <vfprintf+0x286>
    4544:	b6 01       	movw	r22, r12
    4546:	80 2f       	mov	r24, r16
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	99 d6       	rcall	.+3378   	; 0x527e <fputc>
    454c:	13 fd       	sbrc	r17, 3
    454e:	02 c0       	rjmp	.+4      	; 0x4554 <vfprintf+0x28e>
    4550:	e1 10       	cpse	r14, r1
    4552:	60 c0       	rjmp	.+192    	; 0x4614 <vfprintf+0x34e>
    4554:	17 ff       	sbrs	r17, 7
    4556:	77 c0       	rjmp	.+238    	; 0x4646 <vfprintf+0x380>
    4558:	85 01       	movw	r16, r10
    455a:	b7 fe       	sbrs	r11, 7
    455c:	02 c0       	rjmp	.+4      	; 0x4562 <vfprintf+0x29c>
    455e:	10 e0       	ldi	r17, 0x00	; 0
    4560:	00 e0       	ldi	r16, 0x00	; 0
    4562:	c5 01       	movw	r24, r10
    4564:	84 19       	sub	r24, r4
    4566:	91 09       	sbc	r25, r1
    4568:	2c 01       	movw	r4, r24
    456a:	6f 2d       	mov	r22, r15
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	ee 27       	eor	r30, r30
    4570:	ff 27       	eor	r31, r31
    4572:	e6 1b       	sub	r30, r22
    4574:	f7 0b       	sbc	r31, r23
    4576:	ee 87       	std	Y+14, r30	; 0x0e
    4578:	ff 87       	std	Y+15, r31	; 0x0f
    457a:	0f 3f       	cpi	r16, 0xFF	; 255
    457c:	10 07       	cpc	r17, r16
    457e:	21 f4       	brne	.+8      	; 0x4588 <vfprintf+0x2c2>
    4580:	b6 01       	movw	r22, r12
    4582:	8e e2       	ldi	r24, 0x2E	; 46
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	7b d6       	rcall	.+3318   	; 0x527e <fputc>
    4588:	a0 16       	cp	r10, r16
    458a:	b1 06       	cpc	r11, r17
    458c:	0c f4       	brge	.+2      	; 0x4590 <vfprintf+0x2ca>
    458e:	48 c0       	rjmp	.+144    	; 0x4620 <vfprintf+0x35a>
    4590:	40 16       	cp	r4, r16
    4592:	51 06       	cpc	r5, r17
    4594:	0c f0       	brlt	.+2      	; 0x4598 <vfprintf+0x2d2>
    4596:	44 c0       	rjmp	.+136    	; 0x4620 <vfprintf+0x35a>
    4598:	f5 01       	movw	r30, r10
    459a:	e0 1b       	sub	r30, r16
    459c:	f1 0b       	sbc	r31, r17
    459e:	e8 0d       	add	r30, r8
    45a0:	f9 1d       	adc	r31, r9
    45a2:	81 81       	ldd	r24, Z+1	; 0x01
    45a4:	01 50       	subi	r16, 0x01	; 1
    45a6:	11 09       	sbc	r17, r1
    45a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    45aa:	3f 85       	ldd	r19, Y+15	; 0x0f
    45ac:	02 17       	cp	r16, r18
    45ae:	13 07       	cpc	r17, r19
    45b0:	cc f1       	brlt	.+114    	; 0x4624 <vfprintf+0x35e>
    45b2:	b6 01       	movw	r22, r12
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	63 d6       	rcall	.+3270   	; 0x527e <fputc>
    45b8:	e0 cf       	rjmp	.-64     	; 0x457a <vfprintf+0x2b4>
    45ba:	16 fd       	sbrc	r17, 6
    45bc:	a2 cf       	rjmp	.-188    	; 0x4502 <vfprintf+0x23c>
    45be:	ef 2d       	mov	r30, r15
    45c0:	f0 e0       	ldi	r31, 0x00	; 0
    45c2:	ea 15       	cp	r30, r10
    45c4:	fb 05       	cpc	r31, r11
    45c6:	34 f0       	brlt	.+12     	; 0x45d4 <vfprintf+0x30e>
    45c8:	3c ef       	ldi	r19, 0xFC	; 252
    45ca:	a3 16       	cp	r10, r19
    45cc:	3f ef       	ldi	r19, 0xFF	; 255
    45ce:	b3 06       	cpc	r11, r19
    45d0:	0c f0       	brlt	.+2      	; 0x45d4 <vfprintf+0x30e>
    45d2:	10 68       	ori	r17, 0x80	; 128
    45d4:	32 96       	adiw	r30, 0x02	; 2
    45d6:	e8 0d       	add	r30, r8
    45d8:	f9 1d       	adc	r31, r9
    45da:	01 c0       	rjmp	.+2      	; 0x45de <vfprintf+0x318>
    45dc:	fa 94       	dec	r15
    45de:	ff 20       	and	r15, r15
    45e0:	19 f0       	breq	.+6      	; 0x45e8 <vfprintf+0x322>
    45e2:	82 91       	ld	r24, -Z
    45e4:	80 33       	cpi	r24, 0x30	; 48
    45e6:	d1 f3       	breq	.-12     	; 0x45dc <vfprintf+0x316>
    45e8:	17 ff       	sbrs	r17, 7
    45ea:	8b cf       	rjmp	.-234    	; 0x4502 <vfprintf+0x23c>
    45ec:	44 24       	eor	r4, r4
    45ee:	43 94       	inc	r4
    45f0:	4f 0c       	add	r4, r15
    45f2:	fa 14       	cp	r15, r10
    45f4:	1b 04       	cpc	r1, r11
    45f6:	31 f0       	breq	.+12     	; 0x4604 <vfprintf+0x33e>
    45f8:	2c f0       	brlt	.+10     	; 0x4604 <vfprintf+0x33e>
    45fa:	fa 18       	sub	r15, r10
    45fc:	82 cf       	rjmp	.-252    	; 0x4502 <vfprintf+0x23c>
    45fe:	44 24       	eor	r4, r4
    4600:	43 94       	inc	r4
    4602:	7f cf       	rjmp	.-258    	; 0x4502 <vfprintf+0x23c>
    4604:	f1 2c       	mov	r15, r1
    4606:	7d cf       	rjmp	.-262    	; 0x4502 <vfprintf+0x23c>
    4608:	b6 01       	movw	r22, r12
    460a:	80 e2       	ldi	r24, 0x20	; 32
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	37 d6       	rcall	.+3182   	; 0x527e <fputc>
    4610:	ea 94       	dec	r14
    4612:	94 cf       	rjmp	.-216    	; 0x453c <vfprintf+0x276>
    4614:	b6 01       	movw	r22, r12
    4616:	80 e3       	ldi	r24, 0x30	; 48
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	31 d6       	rcall	.+3170   	; 0x527e <fputc>
    461c:	ea 94       	dec	r14
    461e:	98 cf       	rjmp	.-208    	; 0x4550 <vfprintf+0x28a>
    4620:	80 e3       	ldi	r24, 0x30	; 48
    4622:	c0 cf       	rjmp	.-128    	; 0x45a4 <vfprintf+0x2de>
    4624:	a0 16       	cp	r10, r16
    4626:	b1 06       	cpc	r11, r17
    4628:	41 f4       	brne	.+16     	; 0x463a <vfprintf+0x374>
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	96 33       	cpi	r25, 0x36	; 54
    462e:	48 f4       	brcc	.+18     	; 0x4642 <vfprintf+0x37c>
    4630:	95 33       	cpi	r25, 0x35	; 53
    4632:	19 f4       	brne	.+6      	; 0x463a <vfprintf+0x374>
    4634:	3c 85       	ldd	r19, Y+12	; 0x0c
    4636:	34 ff       	sbrs	r19, 4
    4638:	04 c0       	rjmp	.+8      	; 0x4642 <vfprintf+0x37c>
    463a:	b6 01       	movw	r22, r12
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	1f d6       	rcall	.+3134   	; 0x527e <fputc>
    4640:	31 cf       	rjmp	.-414    	; 0x44a4 <vfprintf+0x1de>
    4642:	81 e3       	ldi	r24, 0x31	; 49
    4644:	fa cf       	rjmp	.-12     	; 0x463a <vfprintf+0x374>
    4646:	8a 81       	ldd	r24, Y+2	; 0x02
    4648:	81 33       	cpi	r24, 0x31	; 49
    464a:	19 f0       	breq	.+6      	; 0x4652 <vfprintf+0x38c>
    464c:	9c 85       	ldd	r25, Y+12	; 0x0c
    464e:	9f 7e       	andi	r25, 0xEF	; 239
    4650:	9c 87       	std	Y+12, r25	; 0x0c
    4652:	b6 01       	movw	r22, r12
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	13 d6       	rcall	.+3110   	; 0x527e <fputc>
    4658:	ff 20       	and	r15, r15
    465a:	99 f0       	breq	.+38     	; 0x4682 <vfprintf+0x3bc>
    465c:	b6 01       	movw	r22, r12
    465e:	8e e2       	ldi	r24, 0x2E	; 46
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0d d6       	rcall	.+3098   	; 0x527e <fputc>
    4664:	f3 94       	inc	r15
    4666:	f3 94       	inc	r15
    4668:	e2 e0       	ldi	r30, 0x02	; 2
    466a:	01 e0       	ldi	r16, 0x01	; 1
    466c:	0e 0f       	add	r16, r30
    466e:	e8 0d       	add	r30, r8
    4670:	f9 2d       	mov	r31, r9
    4672:	f1 1d       	adc	r31, r1
    4674:	80 81       	ld	r24, Z
    4676:	b6 01       	movw	r22, r12
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	01 d6       	rcall	.+3074   	; 0x527e <fputc>
    467c:	e0 2f       	mov	r30, r16
    467e:	0f 11       	cpse	r16, r15
    4680:	f4 cf       	rjmp	.-24     	; 0x466a <vfprintf+0x3a4>
    4682:	85 e6       	ldi	r24, 0x65	; 101
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	14 ff       	sbrs	r17, 4
    4688:	02 c0       	rjmp	.+4      	; 0x468e <vfprintf+0x3c8>
    468a:	85 e4       	ldi	r24, 0x45	; 69
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	b6 01       	movw	r22, r12
    4690:	f6 d5       	rcall	.+3052   	; 0x527e <fputc>
    4692:	b7 fc       	sbrc	r11, 7
    4694:	06 c0       	rjmp	.+12     	; 0x46a2 <vfprintf+0x3dc>
    4696:	a1 14       	cp	r10, r1
    4698:	b1 04       	cpc	r11, r1
    469a:	b1 f4       	brne	.+44     	; 0x46c8 <vfprintf+0x402>
    469c:	ec 85       	ldd	r30, Y+12	; 0x0c
    469e:	e4 ff       	sbrs	r30, 4
    46a0:	13 c0       	rjmp	.+38     	; 0x46c8 <vfprintf+0x402>
    46a2:	b1 94       	neg	r11
    46a4:	a1 94       	neg	r10
    46a6:	b1 08       	sbc	r11, r1
    46a8:	8d e2       	ldi	r24, 0x2D	; 45
    46aa:	b6 01       	movw	r22, r12
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	e7 d5       	rcall	.+3022   	; 0x527e <fputc>
    46b0:	80 e3       	ldi	r24, 0x30	; 48
    46b2:	2a e0       	ldi	r18, 0x0A	; 10
    46b4:	a2 16       	cp	r10, r18
    46b6:	b1 04       	cpc	r11, r1
    46b8:	4c f4       	brge	.+18     	; 0x46cc <vfprintf+0x406>
    46ba:	b6 01       	movw	r22, r12
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	df d5       	rcall	.+3006   	; 0x527e <fputc>
    46c0:	b6 01       	movw	r22, r12
    46c2:	c5 01       	movw	r24, r10
    46c4:	c0 96       	adiw	r24, 0x30	; 48
    46c6:	bb cf       	rjmp	.-138    	; 0x463e <vfprintf+0x378>
    46c8:	8b e2       	ldi	r24, 0x2B	; 43
    46ca:	ef cf       	rjmp	.-34     	; 0x46aa <vfprintf+0x3e4>
    46cc:	8f 5f       	subi	r24, 0xFF	; 255
    46ce:	fa e0       	ldi	r31, 0x0A	; 10
    46d0:	af 1a       	sub	r10, r31
    46d2:	b1 08       	sbc	r11, r1
    46d4:	ee cf       	rjmp	.-36     	; 0x46b2 <vfprintf+0x3ec>
    46d6:	83 36       	cpi	r24, 0x63	; 99
    46d8:	c1 f0       	breq	.+48     	; 0x470a <vfprintf+0x444>
    46da:	83 37       	cpi	r24, 0x73	; 115
    46dc:	69 f1       	breq	.+90     	; 0x4738 <vfprintf+0x472>
    46de:	83 35       	cpi	r24, 0x53	; 83
    46e0:	09 f0       	breq	.+2      	; 0x46e4 <vfprintf+0x41e>
    46e2:	57 c0       	rjmp	.+174    	; 0x4792 <vfprintf+0x4cc>
    46e4:	35 01       	movw	r6, r10
    46e6:	f2 e0       	ldi	r31, 0x02	; 2
    46e8:	6f 0e       	add	r6, r31
    46ea:	71 1c       	adc	r7, r1
    46ec:	f5 01       	movw	r30, r10
    46ee:	a0 80       	ld	r10, Z
    46f0:	b1 80       	ldd	r11, Z+1	; 0x01
    46f2:	6f 2d       	mov	r22, r15
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	06 fd       	sbrc	r16, 6
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <vfprintf+0x438>
    46fa:	6f ef       	ldi	r22, 0xFF	; 255
    46fc:	7f ef       	ldi	r23, 0xFF	; 255
    46fe:	c5 01       	movw	r24, r10
    4700:	39 d5       	rcall	.+2674   	; 0x5174 <strnlen_P>
    4702:	8c 87       	std	Y+12, r24	; 0x0c
    4704:	9d 87       	std	Y+13, r25	; 0x0d
    4706:	00 68       	ori	r16, 0x80	; 128
    4708:	0d c0       	rjmp	.+26     	; 0x4724 <vfprintf+0x45e>
    470a:	35 01       	movw	r6, r10
    470c:	32 e0       	ldi	r19, 0x02	; 2
    470e:	63 0e       	add	r6, r19
    4710:	71 1c       	adc	r7, r1
    4712:	f5 01       	movw	r30, r10
    4714:	80 81       	ld	r24, Z
    4716:	89 83       	std	Y+1, r24	; 0x01
    4718:	21 e0       	ldi	r18, 0x01	; 1
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	2c 87       	std	Y+12, r18	; 0x0c
    471e:	3d 87       	std	Y+13, r19	; 0x0d
    4720:	54 01       	movw	r10, r8
    4722:	0f 77       	andi	r16, 0x7F	; 127
    4724:	03 fd       	sbrc	r16, 3
    4726:	06 c0       	rjmp	.+12     	; 0x4734 <vfprintf+0x46e>
    4728:	2c 85       	ldd	r18, Y+12	; 0x0c
    472a:	3d 85       	ldd	r19, Y+13	; 0x0d
    472c:	52 16       	cp	r5, r18
    472e:	13 06       	cpc	r1, r19
    4730:	09 f0       	breq	.+2      	; 0x4734 <vfprintf+0x46e>
    4732:	a0 f4       	brcc	.+40     	; 0x475c <vfprintf+0x496>
    4734:	e5 2c       	mov	r14, r5
    4736:	28 c0       	rjmp	.+80     	; 0x4788 <vfprintf+0x4c2>
    4738:	35 01       	movw	r6, r10
    473a:	32 e0       	ldi	r19, 0x02	; 2
    473c:	63 0e       	add	r6, r19
    473e:	71 1c       	adc	r7, r1
    4740:	f5 01       	movw	r30, r10
    4742:	a0 80       	ld	r10, Z
    4744:	b1 80       	ldd	r11, Z+1	; 0x01
    4746:	6f 2d       	mov	r22, r15
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	06 fd       	sbrc	r16, 6
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <vfprintf+0x48c>
    474e:	6f ef       	ldi	r22, 0xFF	; 255
    4750:	7f ef       	ldi	r23, 0xFF	; 255
    4752:	c5 01       	movw	r24, r10
    4754:	37 d5       	rcall	.+2670   	; 0x51c4 <strnlen>
    4756:	8c 87       	std	Y+12, r24	; 0x0c
    4758:	9d 87       	std	Y+13, r25	; 0x0d
    475a:	e3 cf       	rjmp	.-58     	; 0x4722 <vfprintf+0x45c>
    475c:	b6 01       	movw	r22, r12
    475e:	80 e2       	ldi	r24, 0x20	; 32
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	8d d5       	rcall	.+2842   	; 0x527e <fputc>
    4764:	5a 94       	dec	r5
    4766:	e0 cf       	rjmp	.-64     	; 0x4728 <vfprintf+0x462>
    4768:	f5 01       	movw	r30, r10
    476a:	07 fd       	sbrc	r16, 7
    476c:	85 91       	lpm	r24, Z+
    476e:	07 ff       	sbrs	r16, 7
    4770:	81 91       	ld	r24, Z+
    4772:	5f 01       	movw	r10, r30
    4774:	b6 01       	movw	r22, r12
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	82 d5       	rcall	.+2820   	; 0x527e <fputc>
    477a:	e1 10       	cpse	r14, r1
    477c:	ea 94       	dec	r14
    477e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4780:	9d 85       	ldd	r25, Y+13	; 0x0d
    4782:	01 97       	sbiw	r24, 0x01	; 1
    4784:	8c 87       	std	Y+12, r24	; 0x0c
    4786:	9d 87       	std	Y+13, r25	; 0x0d
    4788:	ec 85       	ldd	r30, Y+12	; 0x0c
    478a:	fd 85       	ldd	r31, Y+13	; 0x0d
    478c:	ef 2b       	or	r30, r31
    478e:	61 f7       	brne	.-40     	; 0x4768 <vfprintf+0x4a2>
    4790:	89 ce       	rjmp	.-750    	; 0x44a4 <vfprintf+0x1de>
    4792:	84 36       	cpi	r24, 0x64	; 100
    4794:	19 f0       	breq	.+6      	; 0x479c <vfprintf+0x4d6>
    4796:	89 36       	cpi	r24, 0x69	; 105
    4798:	09 f0       	breq	.+2      	; 0x479c <vfprintf+0x4d6>
    479a:	70 c0       	rjmp	.+224    	; 0x487c <vfprintf+0x5b6>
    479c:	35 01       	movw	r6, r10
    479e:	07 ff       	sbrs	r16, 7
    47a0:	62 c0       	rjmp	.+196    	; 0x4866 <vfprintf+0x5a0>
    47a2:	f4 e0       	ldi	r31, 0x04	; 4
    47a4:	6f 0e       	add	r6, r31
    47a6:	71 1c       	adc	r7, r1
    47a8:	f5 01       	movw	r30, r10
    47aa:	60 81       	ld	r22, Z
    47ac:	71 81       	ldd	r23, Z+1	; 0x01
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	93 81       	ldd	r25, Z+3	; 0x03
    47b2:	10 2f       	mov	r17, r16
    47b4:	1f 76       	andi	r17, 0x6F	; 111
    47b6:	97 ff       	sbrs	r25, 7
    47b8:	08 c0       	rjmp	.+16     	; 0x47ca <vfprintf+0x504>
    47ba:	90 95       	com	r25
    47bc:	80 95       	com	r24
    47be:	70 95       	com	r23
    47c0:	61 95       	neg	r22
    47c2:	7f 4f       	sbci	r23, 0xFF	; 255
    47c4:	8f 4f       	sbci	r24, 0xFF	; 255
    47c6:	9f 4f       	sbci	r25, 0xFF	; 255
    47c8:	10 68       	ori	r17, 0x80	; 128
    47ca:	2a e0       	ldi	r18, 0x0A	; 10
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	a4 01       	movw	r20, r8
    47d0:	95 d5       	rcall	.+2858   	; 0x52fc <__ultoa_invert>
    47d2:	a8 2e       	mov	r10, r24
    47d4:	a8 18       	sub	r10, r8
    47d6:	ba 2c       	mov	r11, r10
    47d8:	01 2f       	mov	r16, r17
    47da:	16 ff       	sbrs	r17, 6
    47dc:	0a c0       	rjmp	.+20     	; 0x47f2 <vfprintf+0x52c>
    47de:	0e 7f       	andi	r16, 0xFE	; 254
    47e0:	af 14       	cp	r10, r15
    47e2:	38 f4       	brcc	.+14     	; 0x47f2 <vfprintf+0x52c>
    47e4:	14 ff       	sbrs	r17, 4
    47e6:	04 c0       	rjmp	.+8      	; 0x47f0 <vfprintf+0x52a>
    47e8:	12 fd       	sbrc	r17, 2
    47ea:	02 c0       	rjmp	.+4      	; 0x47f0 <vfprintf+0x52a>
    47ec:	01 2f       	mov	r16, r17
    47ee:	0e 7e       	andi	r16, 0xEE	; 238
    47f0:	bf 2c       	mov	r11, r15
    47f2:	04 ff       	sbrs	r16, 4
    47f4:	9c c0       	rjmp	.+312    	; 0x492e <vfprintf+0x668>
    47f6:	fe 01       	movw	r30, r28
    47f8:	ea 0d       	add	r30, r10
    47fa:	f1 1d       	adc	r31, r1
    47fc:	80 81       	ld	r24, Z
    47fe:	80 33       	cpi	r24, 0x30	; 48
    4800:	09 f0       	breq	.+2      	; 0x4804 <vfprintf+0x53e>
    4802:	8e c0       	rjmp	.+284    	; 0x4920 <vfprintf+0x65a>
    4804:	09 7e       	andi	r16, 0xE9	; 233
    4806:	f0 2f       	mov	r31, r16
    4808:	f8 70       	andi	r31, 0x08	; 8
    480a:	ef 2e       	mov	r14, r31
    480c:	03 fd       	sbrc	r16, 3
    480e:	9d c0       	rjmp	.+314    	; 0x494a <vfprintf+0x684>
    4810:	00 ff       	sbrs	r16, 0
    4812:	97 c0       	rjmp	.+302    	; 0x4942 <vfprintf+0x67c>
    4814:	fa 2c       	mov	r15, r10
    4816:	b5 14       	cp	r11, r5
    4818:	10 f4       	brcc	.+4      	; 0x481e <vfprintf+0x558>
    481a:	f5 0c       	add	r15, r5
    481c:	fb 18       	sub	r15, r11
    481e:	04 ff       	sbrs	r16, 4
    4820:	9a c0       	rjmp	.+308    	; 0x4956 <vfprintf+0x690>
    4822:	b6 01       	movw	r22, r12
    4824:	80 e3       	ldi	r24, 0x30	; 48
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	2a d5       	rcall	.+2644   	; 0x527e <fputc>
    482a:	02 ff       	sbrs	r16, 2
    482c:	08 c0       	rjmp	.+16     	; 0x483e <vfprintf+0x578>
    482e:	88 e7       	ldi	r24, 0x78	; 120
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	01 ff       	sbrs	r16, 1
    4834:	02 c0       	rjmp	.+4      	; 0x483a <vfprintf+0x574>
    4836:	88 e5       	ldi	r24, 0x58	; 88
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	b6 01       	movw	r22, r12
    483c:	20 d5       	rcall	.+2624   	; 0x527e <fputc>
    483e:	af 14       	cp	r10, r15
    4840:	08 f4       	brcc	.+2      	; 0x4844 <vfprintf+0x57e>
    4842:	95 c0       	rjmp	.+298    	; 0x496e <vfprintf+0x6a8>
    4844:	aa 94       	dec	r10
    4846:	0a 2d       	mov	r16, r10
    4848:	10 e0       	ldi	r17, 0x00	; 0
    484a:	0f 5f       	subi	r16, 0xFF	; 255
    484c:	1f 4f       	sbci	r17, 0xFF	; 255
    484e:	08 0d       	add	r16, r8
    4850:	19 1d       	adc	r17, r9
    4852:	f8 01       	movw	r30, r16
    4854:	82 91       	ld	r24, -Z
    4856:	8f 01       	movw	r16, r30
    4858:	b6 01       	movw	r22, r12
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	10 d5       	rcall	.+2592   	; 0x527e <fputc>
    485e:	80 16       	cp	r8, r16
    4860:	91 06       	cpc	r9, r17
    4862:	b9 f7       	brne	.-18     	; 0x4852 <vfprintf+0x58c>
    4864:	1f ce       	rjmp	.-962    	; 0x44a4 <vfprintf+0x1de>
    4866:	f2 e0       	ldi	r31, 0x02	; 2
    4868:	6f 0e       	add	r6, r31
    486a:	71 1c       	adc	r7, r1
    486c:	f5 01       	movw	r30, r10
    486e:	60 81       	ld	r22, Z
    4870:	71 81       	ldd	r23, Z+1	; 0x01
    4872:	07 2e       	mov	r0, r23
    4874:	00 0c       	add	r0, r0
    4876:	88 0b       	sbc	r24, r24
    4878:	99 0b       	sbc	r25, r25
    487a:	9b cf       	rjmp	.-202    	; 0x47b2 <vfprintf+0x4ec>
    487c:	10 2f       	mov	r17, r16
    487e:	85 37       	cpi	r24, 0x75	; 117
    4880:	a1 f4       	brne	.+40     	; 0x48aa <vfprintf+0x5e4>
    4882:	1f 7e       	andi	r17, 0xEF	; 239
    4884:	2a e0       	ldi	r18, 0x0A	; 10
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	35 01       	movw	r6, r10
    488a:	17 ff       	sbrs	r17, 7
    488c:	40 c0       	rjmp	.+128    	; 0x490e <vfprintf+0x648>
    488e:	f4 e0       	ldi	r31, 0x04	; 4
    4890:	6f 0e       	add	r6, r31
    4892:	71 1c       	adc	r7, r1
    4894:	f5 01       	movw	r30, r10
    4896:	60 81       	ld	r22, Z
    4898:	71 81       	ldd	r23, Z+1	; 0x01
    489a:	82 81       	ldd	r24, Z+2	; 0x02
    489c:	93 81       	ldd	r25, Z+3	; 0x03
    489e:	a4 01       	movw	r20, r8
    48a0:	2d d5       	rcall	.+2650   	; 0x52fc <__ultoa_invert>
    48a2:	a8 2e       	mov	r10, r24
    48a4:	a8 18       	sub	r10, r8
    48a6:	1f 77       	andi	r17, 0x7F	; 127
    48a8:	96 cf       	rjmp	.-212    	; 0x47d6 <vfprintf+0x510>
    48aa:	19 7f       	andi	r17, 0xF9	; 249
    48ac:	8f 36       	cpi	r24, 0x6F	; 111
    48ae:	61 f1       	breq	.+88     	; 0x4908 <vfprintf+0x642>
    48b0:	d8 f4       	brcc	.+54     	; 0x48e8 <vfprintf+0x622>
    48b2:	88 35       	cpi	r24, 0x58	; 88
    48b4:	21 f1       	breq	.+72     	; 0x48fe <vfprintf+0x638>
    48b6:	f6 01       	movw	r30, r12
    48b8:	86 81       	ldd	r24, Z+6	; 0x06
    48ba:	97 81       	ldd	r25, Z+7	; 0x07
    48bc:	2f 96       	adiw	r28, 0x0f	; 15
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	de bf       	out	0x3e, r29	; 62
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	1f 91       	pop	r17
    48c8:	0f 91       	pop	r16
    48ca:	ff 90       	pop	r15
    48cc:	ef 90       	pop	r14
    48ce:	df 90       	pop	r13
    48d0:	cf 90       	pop	r12
    48d2:	bf 90       	pop	r11
    48d4:	af 90       	pop	r10
    48d6:	9f 90       	pop	r9
    48d8:	8f 90       	pop	r8
    48da:	7f 90       	pop	r7
    48dc:	6f 90       	pop	r6
    48de:	5f 90       	pop	r5
    48e0:	4f 90       	pop	r4
    48e2:	3f 90       	pop	r3
    48e4:	2f 90       	pop	r2
    48e6:	08 95       	ret
    48e8:	80 37       	cpi	r24, 0x70	; 112
    48ea:	39 f0       	breq	.+14     	; 0x48fa <vfprintf+0x634>
    48ec:	88 37       	cpi	r24, 0x78	; 120
    48ee:	19 f7       	brne	.-58     	; 0x48b6 <vfprintf+0x5f0>
    48f0:	14 fd       	sbrc	r17, 4
    48f2:	14 60       	ori	r17, 0x04	; 4
    48f4:	20 e1       	ldi	r18, 0x10	; 16
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	c7 cf       	rjmp	.-114    	; 0x4888 <vfprintf+0x5c2>
    48fa:	10 61       	ori	r17, 0x10	; 16
    48fc:	f9 cf       	rjmp	.-14     	; 0x48f0 <vfprintf+0x62a>
    48fe:	04 fd       	sbrc	r16, 4
    4900:	16 60       	ori	r17, 0x06	; 6
    4902:	20 e1       	ldi	r18, 0x10	; 16
    4904:	32 e0       	ldi	r19, 0x02	; 2
    4906:	c0 cf       	rjmp	.-128    	; 0x4888 <vfprintf+0x5c2>
    4908:	28 e0       	ldi	r18, 0x08	; 8
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	bd cf       	rjmp	.-134    	; 0x4888 <vfprintf+0x5c2>
    490e:	f2 e0       	ldi	r31, 0x02	; 2
    4910:	6f 0e       	add	r6, r31
    4912:	71 1c       	adc	r7, r1
    4914:	f5 01       	movw	r30, r10
    4916:	60 81       	ld	r22, Z
    4918:	71 81       	ldd	r23, Z+1	; 0x01
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	bf cf       	rjmp	.-130    	; 0x489e <vfprintf+0x5d8>
    4920:	02 fd       	sbrc	r16, 2
    4922:	02 c0       	rjmp	.+4      	; 0x4928 <vfprintf+0x662>
    4924:	b3 94       	inc	r11
    4926:	6f cf       	rjmp	.-290    	; 0x4806 <vfprintf+0x540>
    4928:	b3 94       	inc	r11
    492a:	b3 94       	inc	r11
    492c:	6c cf       	rjmp	.-296    	; 0x4806 <vfprintf+0x540>
    492e:	80 2f       	mov	r24, r16
    4930:	86 78       	andi	r24, 0x86	; 134
    4932:	09 f4       	brne	.+2      	; 0x4936 <vfprintf+0x670>
    4934:	68 cf       	rjmp	.-304    	; 0x4806 <vfprintf+0x540>
    4936:	f6 cf       	rjmp	.-20     	; 0x4924 <vfprintf+0x65e>
    4938:	b6 01       	movw	r22, r12
    493a:	80 e2       	ldi	r24, 0x20	; 32
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	9f d4       	rcall	.+2366   	; 0x527e <fputc>
    4940:	b3 94       	inc	r11
    4942:	b5 14       	cp	r11, r5
    4944:	c8 f3       	brcs	.-14     	; 0x4938 <vfprintf+0x672>
    4946:	e1 2c       	mov	r14, r1
    4948:	6a cf       	rjmp	.-300    	; 0x481e <vfprintf+0x558>
    494a:	e5 2c       	mov	r14, r5
    494c:	eb 18       	sub	r14, r11
    494e:	b5 14       	cp	r11, r5
    4950:	08 f4       	brcc	.+2      	; 0x4954 <vfprintf+0x68e>
    4952:	65 cf       	rjmp	.-310    	; 0x481e <vfprintf+0x558>
    4954:	f8 cf       	rjmp	.-16     	; 0x4946 <vfprintf+0x680>
    4956:	80 2f       	mov	r24, r16
    4958:	86 78       	andi	r24, 0x86	; 134
    495a:	09 f4       	brne	.+2      	; 0x495e <vfprintf+0x698>
    495c:	70 cf       	rjmp	.-288    	; 0x483e <vfprintf+0x578>
    495e:	8b e2       	ldi	r24, 0x2B	; 43
    4960:	01 ff       	sbrs	r16, 1
    4962:	80 e2       	ldi	r24, 0x20	; 32
    4964:	07 fd       	sbrc	r16, 7
    4966:	8d e2       	ldi	r24, 0x2D	; 45
    4968:	b6 01       	movw	r22, r12
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	67 cf       	rjmp	.-306    	; 0x483c <vfprintf+0x576>
    496e:	b6 01       	movw	r22, r12
    4970:	80 e3       	ldi	r24, 0x30	; 48
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	84 d4       	rcall	.+2312   	; 0x527e <fputc>
    4976:	fa 94       	dec	r15
    4978:	62 cf       	rjmp	.-316    	; 0x483e <vfprintf+0x578>
    497a:	b6 01       	movw	r22, r12
    497c:	80 e2       	ldi	r24, 0x20	; 32
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	7e d4       	rcall	.+2300   	; 0x527e <fputc>
    4982:	ea 94       	dec	r14
    4984:	8f cd       	rjmp	.-1250   	; 0x44a4 <vfprintf+0x1de>
    4986:	24 e0       	ldi	r18, 0x04	; 4
    4988:	e1 2c       	mov	r14, r1
    498a:	25 15       	cp	r18, r5
    498c:	08 f0       	brcs	.+2      	; 0x4990 <vfprintf+0x6ca>
    498e:	54 cd       	rjmp	.-1368   	; 0x4438 <vfprintf+0x172>
    4990:	84 e0       	ldi	r24, 0x04	; 4
    4992:	45 cd       	rjmp	.-1398   	; 0x441e <vfprintf+0x158>

00004994 <LogClass::info(__FlashStringHelper const*) [clone .constprop.23]>:
info():
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
print():
    4998:	20 91 be 4e 	lds	r18, 0x4EBE	; 0x804ebe <Log+0x2>
    499c:	30 91 bf 4e 	lds	r19, 0x4EBF	; 0x804ebf <Log+0x3>
    49a0:	23 30       	cpi	r18, 0x03	; 3
    49a2:	31 05       	cpc	r19, r1
    49a4:	94 f0       	brlt	.+36     	; 0x49ca <LogClass::info(__FlashStringHelper const*) [clone .constprop.23]+0x36>
    49a6:	ec 01       	movw	r28, r24
    49a8:	6b e0       	ldi	r22, 0x0B	; 11
    49aa:	72 e0       	ldi	r23, 0x02	; 2
    49ac:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    49b0:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
    49b4:	0e 94 b0 06 	call	0xd60	; 0xd60 <Print::print(__FlashStringHelper const*)>
    49b8:	be 01       	movw	r22, r28
    49ba:	80 91 bc 4e 	lds	r24, 0x4EBC	; 0x804ebc <Log>
    49be:	90 91 bd 4e 	lds	r25, 0x4EBD	; 0x804ebd <Log+0x1>
info():
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
print():
    49c6:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <Print::println(__FlashStringHelper const*)>
info():
    49ca:	df 91       	pop	r29
    49cc:	cf 91       	pop	r28
    49ce:	08 95       	ret

000049d0 <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673>:
_GLOBAL__I_65535_0_anomalydetector.ino.cpp.o.9673():
    49d0:	10 92 2b 4e 	sts	0x4E2B, r1	; 0x804e2b <Serial3+0x2>
    49d4:	10 92 2c 4e 	sts	0x4E2C, r1	; 0x804e2c <Serial3+0x3>
    49d8:	88 ee       	ldi	r24, 0xE8	; 232
    49da:	93 e0       	ldi	r25, 0x03	; 3
    49dc:	a0 e0       	ldi	r26, 0x00	; 0
    49de:	b0 e0       	ldi	r27, 0x00	; 0
    49e0:	80 93 2d 4e 	sts	0x4E2D, r24	; 0x804e2d <Serial3+0x4>
    49e4:	90 93 2e 4e 	sts	0x4E2E, r25	; 0x804e2e <Serial3+0x5>
    49e8:	a0 93 2f 4e 	sts	0x4E2F, r26	; 0x804e2f <Serial3+0x6>
    49ec:	b0 93 30 4e 	sts	0x4E30, r27	; 0x804e30 <Serial3+0x7>
    49f0:	2a e2       	ldi	r18, 0x2A	; 42
    49f2:	31 e4       	ldi	r19, 0x41	; 65
    49f4:	20 93 29 4e 	sts	0x4E29, r18	; 0x804e29 <Serial3>
    49f8:	30 93 2a 4e 	sts	0x4E2A, r19	; 0x804e2a <Serial3+0x1>
    49fc:	20 e6       	ldi	r18, 0x60	; 96
    49fe:	38 e0       	ldi	r19, 0x08	; 8
    4a00:	20 93 31 4e 	sts	0x4E31, r18	; 0x804e31 <Serial3+0x8>
    4a04:	30 93 32 4e 	sts	0x4E32, r19	; 0x804e32 <Serial3+0x9>
    4a08:	26 ee       	ldi	r18, 0xE6	; 230
    4a0a:	3b e0       	ldi	r19, 0x0B	; 11
    4a0c:	20 93 33 4e 	sts	0x4E33, r18	; 0x804e33 <Serial3+0xa>
    4a10:	30 93 34 4e 	sts	0x4E34, r19	; 0x804e34 <Serial3+0xb>
    4a14:	22 e0       	ldi	r18, 0x02	; 2
    4a16:	20 93 35 4e 	sts	0x4E35, r18	; 0x804e35 <Serial3+0xc>
    4a1a:	10 92 36 4e 	sts	0x4E36, r1	; 0x804e36 <Serial3+0xd>
    4a1e:	10 92 37 4e 	sts	0x4E37, r1	; 0x804e37 <Serial3+0xe>
    4a22:	10 92 ea 4c 	sts	0x4CEA, r1	; 0x804cea <Wire+0x2>
    4a26:	10 92 eb 4c 	sts	0x4CEB, r1	; 0x804ceb <Wire+0x3>
    4a2a:	80 93 ec 4c 	sts	0x4CEC, r24	; 0x804cec <Wire+0x4>
    4a2e:	90 93 ed 4c 	sts	0x4CED, r25	; 0x804ced <Wire+0x5>
    4a32:	a0 93 ee 4c 	sts	0x4CEE, r26	; 0x804cee <Wire+0x6>
    4a36:	b0 93 ef 4c 	sts	0x4CEF, r27	; 0x804cef <Wire+0x7>
    4a3a:	2c e3       	ldi	r18, 0x3C	; 60
    4a3c:	31 e4       	ldi	r19, 0x41	; 65
    4a3e:	20 93 e8 4c 	sts	0x4CE8, r18	; 0x804ce8 <Wire>
    4a42:	30 93 e9 4c 	sts	0x4CE9, r19	; 0x804ce9 <Wire+0x1>
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	59 e0       	ldi	r21, 0x09	; 9
    4a4a:	40 93 f0 4c 	sts	0x4CF0, r20	; 0x804cf0 <Wire+0x8>
    4a4e:	50 93 f1 4c 	sts	0x4CF1, r21	; 0x804cf1 <Wire+0x9>
    4a52:	10 92 d1 4b 	sts	0x4BD1, r1	; 0x804bd1 <Wire1+0x2>
    4a56:	10 92 d2 4b 	sts	0x4BD2, r1	; 0x804bd2 <Wire1+0x3>
    4a5a:	80 93 d3 4b 	sts	0x4BD3, r24	; 0x804bd3 <Wire1+0x4>
    4a5e:	90 93 d4 4b 	sts	0x4BD4, r25	; 0x804bd4 <Wire1+0x5>
    4a62:	a0 93 d5 4b 	sts	0x4BD5, r26	; 0x804bd5 <Wire1+0x6>
    4a66:	b0 93 d6 4b 	sts	0x4BD6, r27	; 0x804bd6 <Wire1+0x7>
    4a6a:	20 93 cf 4b 	sts	0x4BCF, r18	; 0x804bcf <Wire1>
    4a6e:	30 93 d0 4b 	sts	0x4BD0, r19	; 0x804bd0 <Wire1+0x1>
    4a72:	80 e2       	ldi	r24, 0x20	; 32
    4a74:	99 e0       	ldi	r25, 0x09	; 9
    4a76:	80 93 d7 4b 	sts	0x4BD7, r24	; 0x804bd7 <Wire1+0x8>
    4a7a:	90 93 d8 4b 	sts	0x4BD8, r25	; 0x804bd8 <Wire1+0x9>
    4a7e:	80 91 01 4e 	lds	r24, 0x4E01	; 0x804e01 <guard variable for SequansControllerClass::instance()::instance>
    4a82:	81 11       	cpse	r24, r1
    4a84:	03 c0       	rjmp	.+6      	; 0x4a8c <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0xbc>
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 01 4e 	sts	0x4E01, r24	; 0x804e01 <guard variable for SequansControllerClass::instance()::instance>
    4a8c:	80 91 09 4e 	lds	r24, 0x4E09	; 0x804e09 <guard variable for SecurityProfileClass::instance()::instance>
    4a90:	81 11       	cpse	r24, r1
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0xca>
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	80 93 09 4e 	sts	0x4E09, r24	; 0x804e09 <guard variable for SecurityProfileClass::instance()::instance>
    4a9a:	80 91 11 4e 	lds	r24, 0x4E11	; 0x804e11 <guard variable for MqttClientClass::instance()::instance>
    4a9e:	81 11       	cpse	r24, r1
    4aa0:	03 c0       	rjmp	.+6      	; 0x4aa8 <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0xd8>
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	80 93 11 4e 	sts	0x4E11, r24	; 0x804e11 <guard variable for MqttClientClass::instance()::instance>
    4aa8:	80 91 19 4e 	lds	r24, 0x4E19	; 0x804e19 <guard variable for LteClass::instance()::instance>
    4aac:	81 11       	cpse	r24, r1
    4aae:	03 c0       	rjmp	.+6      	; 0x4ab6 <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0xe6>
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	80 93 19 4e 	sts	0x4E19, r24	; 0x804e19 <guard variable for LteClass::instance()::instance>
    4ab6:	80 91 21 4e 	lds	r24, 0x4E21	; 0x804e21 <guard variable for LowPowerClass::instance()::instance>
    4aba:	81 11       	cpse	r24, r1
    4abc:	03 c0       	rjmp	.+6      	; 0x4ac4 <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0xf4>
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	80 93 21 4e 	sts	0x4E21, r24	; 0x804e21 <guard variable for LowPowerClass::instance()::instance>
    4ac4:	89 e2       	ldi	r24, 0x29	; 41
    4ac6:	9e e4       	ldi	r25, 0x4E	; 78
    4ac8:	80 93 bc 4e 	sts	0x4EBC, r24	; 0x804ebc <Log>
    4acc:	90 93 bd 4e 	sts	0x4EBD, r25	; 0x804ebd <Log+0x1>
    4ad0:	83 e0       	ldi	r24, 0x03	; 3
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	80 93 be 4e 	sts	0x4EBE, r24	; 0x804ebe <Log+0x2>
    4ad8:	90 93 bf 4e 	sts	0x4EBF, r25	; 0x804ebf <Log+0x3>
    4adc:	80 91 c0 4e 	lds	r24, 0x4EC0	; 0x804ec0 <guard variable for HttpClientClass::instance()::instance>
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	03 c0       	rjmp	.+6      	; 0x4aea <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0x11a>
    4ae4:	81 e0       	ldi	r24, 0x01	; 1
    4ae6:	80 93 c0 4e 	sts	0x4EC0, r24	; 0x804ec0 <guard variable for HttpClientClass::instance()::instance>
    4aea:	80 91 c9 4e 	lds	r24, 0x4EC9	; 0x804ec9 <guard variable for ECC608Class::instance()::instance>
    4aee:	81 11       	cpse	r24, r1
    4af0:	05 c0       	rjmp	.+10     	; 0x4afc <global constructors keyed to 65535_0_anomalydetector.ino.cpp.o.9673+0x12c>
    4af2:	10 92 c8 4e 	sts	0x4EC8, r1	; 0x804ec8 <ECC608Class::instance()::instance>
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	80 93 c9 4e 	sts	0x4EC9, r24	; 0x804ec9 <guard variable for ECC608Class::instance()::instance>
    4afc:	8e e4       	ldi	r24, 0x4E	; 78
    4afe:	91 e4       	ldi	r25, 0x41	; 65
    4b00:	80 93 d1 4e 	sts	0x4ED1, r24	; 0x804ed1 <anomKNN>
    4b04:	90 93 d2 4e 	sts	0x4ED2, r25	; 0x804ed2 <anomKNN+0x1>
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	80 93 d3 4e 	sts	0x4ED3, r24	; 0x804ed3 <anomKNN+0x2>
    4b10:	90 93 d4 4e 	sts	0x4ED4, r25	; 0x804ed4 <anomKNN+0x3>
    4b14:	10 92 d5 4e 	sts	0x4ED5, r1	; 0x804ed5 <anomKNN+0x4>
    4b18:	10 92 d6 4e 	sts	0x4ED6, r1	; 0x804ed6 <anomKNN+0x5>
    4b1c:	08 95       	ret

00004b1e <main>:
main():
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	29 97       	sbiw	r28, 0x09	; 9
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	de bf       	out	0x3e, r29	; 62
init_clock():
    4b2c:	88 ed       	ldi	r24, 0xD8	; 216
    4b2e:	94 e2       	ldi	r25, 0x24	; 36
    4b30:	84 bf       	out	0x34, r24	; 52
    4b32:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
init_TCA0():
    4b36:	21 e0       	ldi	r18, 0x01	; 1
    4b38:	20 93 03 0a 	sts	0x0A03, r18	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7e0a03>
    4b3c:	8e ef       	ldi	r24, 0xFE	; 254
    4b3e:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
    4b42:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
    4b46:	9b e0       	ldi	r25, 0x0B	; 11
    4b48:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7e0a00>
init_timers():
    4b4c:	32 e0       	ldi	r19, 0x02	; 2
    4b4e:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
init_TCA1():
    4b52:	20 93 43 0a 	sts	0x0A43, r18	; 0x800a43 <__TEXT_REGION_LENGTH__+0x7e0a43>
    4b56:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <__TEXT_REGION_LENGTH__+0x7e0a66>
    4b5a:	80 93 67 0a 	sts	0x0A67, r24	; 0x800a67 <__TEXT_REGION_LENGTH__+0x7e0a67>
    4b5e:	90 93 40 0a 	sts	0x0A40, r25	; 0x800a40 <__TEXT_REGION_LENGTH__+0x7e0a40>
init_TCBs():
    4b62:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <__TEXT_REGION_LENGTH__+0x7e05e7>
    4b66:	37 e0       	ldi	r19, 0x07	; 7
    4b68:	30 93 01 0b 	sts	0x0B01, r19	; 0x800b01 <__TEXT_REGION_LENGTH__+0x7e0b01>
    4b6c:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
    4b70:	10 92 0d 0b 	sts	0x0B0D, r1	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
    4b74:	95 e0       	ldi	r25, 0x05	; 5
    4b76:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <__TEXT_REGION_LENGTH__+0x7e0b00>
    4b7a:	30 93 11 0b 	sts	0x0B11, r19	; 0x800b11 <__TEXT_REGION_LENGTH__+0x7e0b11>
    4b7e:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <__TEXT_REGION_LENGTH__+0x7e0b1c>
    4b82:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <__TEXT_REGION_LENGTH__+0x7e0b1d>
    4b86:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <__TEXT_REGION_LENGTH__+0x7e0b10>
    4b8a:	30 93 31 0b 	sts	0x0B31, r19	; 0x800b31 <__TEXT_REGION_LENGTH__+0x7e0b31>
    4b8e:	80 93 3c 0b 	sts	0x0B3C, r24	; 0x800b3c <__TEXT_REGION_LENGTH__+0x7e0b3c>
    4b92:	10 92 3d 0b 	sts	0x0B3D, r1	; 0x800b3d <__TEXT_REGION_LENGTH__+0x7e0b3d>
    4b96:	90 93 30 0b 	sts	0x0B30, r25	; 0x800b30 <__TEXT_REGION_LENGTH__+0x7e0b30>
init_TCD0():
    4b9a:	4f ef       	ldi	r20, 0xFF	; 255
    4b9c:	5f e0       	ldi	r21, 0x0F	; 15
    4b9e:	40 93 aa 0b 	sts	0x0BAA, r20	; 0x800baa <__TEXT_REGION_LENGTH__+0x7e0baa>
    4ba2:	50 93 ab 0b 	sts	0x0BAB, r21	; 0x800bab <__TEXT_REGION_LENGTH__+0x7e0bab>
    4ba6:	80 e8       	ldi	r24, 0x80	; 128
    4ba8:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <__TEXT_REGION_LENGTH__+0x7e0b82>
    4bac:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <__TEXT_REGION_LENGTH__+0x7e0b81>
    4bb0:	4b ef       	ldi	r20, 0xFB	; 251
    4bb2:	53 e0       	ldi	r21, 0x03	; 3
    4bb4:	40 93 ae 0b 	sts	0x0BAE, r20	; 0x800bae <__TEXT_REGION_LENGTH__+0x7e0bae>
    4bb8:	50 93 af 0b 	sts	0x0BAF, r21	; 0x800baf <__TEXT_REGION_LENGTH__+0x7e0baf>
    4bbc:	81 e7       	ldi	r24, 0x71	; 113
    4bbe:	80 93 80 0b 	sts	0x0B80, r24	; 0x800b80 <__TEXT_REGION_LENGTH__+0x7e0b80>
init_ADC0():
    4bc2:	e0 e0       	ldi	r30, 0x00	; 0
    4bc4:	f6 e0       	ldi	r31, 0x06	; 6
    4bc6:	92 83       	std	Z+2, r25	; 0x02
    4bc8:	8e e0       	ldi	r24, 0x0E	; 14
    4bca:	85 83       	std	Z+5, r24	; 0x05
    4bcc:	80 e6       	ldi	r24, 0x60	; 96
    4bce:	83 83       	std	Z+3, r24	; 0x03
    4bd0:	90 83       	st	Z, r25
analogReference():
    4bd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4bd6:	88 7f       	andi	r24, 0xF8	; 248
    4bd8:	85 60       	ori	r24, 0x05	; 5
    4bda:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
DACReference():
    4bde:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    4be2:	88 7f       	andi	r24, 0xF8	; 248
    4be4:	85 60       	ori	r24, 0x05	; 5
    4be6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
init_millis():
    4bea:	8f ed       	ldi	r24, 0xDF	; 223
    4bec:	9e e2       	ldi	r25, 0x2E	; 46
    4bee:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <__TEXT_REGION_LENGTH__+0x7e0b2c>
    4bf2:	90 93 2d 0b 	sts	0x0B2D, r25	; 0x800b2d <__TEXT_REGION_LENGTH__+0x7e0b2d>
    4bf6:	20 93 25 0b 	sts	0x0B25, r18	; 0x800b25 <__TEXT_REGION_LENGTH__+0x7e0b25>
    4bfa:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <__TEXT_REGION_LENGTH__+0x7e0b21>
    4bfe:	83 e0       	ldi	r24, 0x03	; 3
    4c00:	80 93 20 0b 	sts	0x0B20, r24	; 0x800b20 <__TEXT_REGION_LENGTH__+0x7e0b20>
main():
    4c04:	78 94       	sei
    4c06:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <setup>
pulseIn():
    4c0a:	48 e1       	ldi	r20, 0x18	; 24
    4c0c:	84 2e       	mov	r8, r20
    4c0e:	91 2c       	mov	r9, r1
    4c10:	a1 2c       	mov	r10, r1
    4c12:	b1 2c       	mov	r11, r1
loop():
    4c14:	41 2c       	mov	r4, r1
    4c16:	51 2c       	mov	r5, r1
    4c18:	50 e8       	ldi	r21, 0x80	; 128
    4c1a:	65 2e       	mov	r6, r21
    4c1c:	5f e3       	ldi	r21, 0x3F	; 63
    4c1e:	75 2e       	mov	r7, r21
    4c20:	6c eb       	ldi	r22, 0xBC	; 188
    4c22:	26 2e       	mov	r2, r22
    4c24:	6e e4       	ldi	r22, 0x4E	; 78
    4c26:	36 2e       	mov	r3, r22
pulseIn():
    4c28:	00 e6       	ldi	r16, 0x60	; 96
    4c2a:	13 ee       	ldi	r17, 0xE3	; 227
    4c2c:	26 e1       	ldi	r18, 0x16	; 22
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	40 e1       	ldi	r20, 0x10	; 16
    4c32:	60 e1       	ldi	r22, 0x10	; 16
    4c34:	88 e0       	ldi	r24, 0x08	; 8
    4c36:	94 e0       	ldi	r25, 0x04	; 4
    4c38:	01 db       	rcall	.-2558   	; 0x423c <countPulseASM>
    4c3a:	61 15       	cp	r22, r1
    4c3c:	71 05       	cpc	r23, r1
    4c3e:	81 05       	cpc	r24, r1
    4c40:	91 05       	cpc	r25, r1
    4c42:	81 f0       	breq	.+32     	; 0x4c64 <main+0x146>
    4c44:	6f 5f       	subi	r22, 0xFF	; 255
    4c46:	7f 4f       	sbci	r23, 0xFF	; 255
    4c48:	8f 4f       	sbci	r24, 0xFF	; 255
    4c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c4c:	34 e0       	ldi	r19, 0x04	; 4
    4c4e:	66 0f       	add	r22, r22
    4c50:	77 1f       	adc	r23, r23
    4c52:	88 1f       	adc	r24, r24
    4c54:	99 1f       	adc	r25, r25
    4c56:	3a 95       	dec	r19
    4c58:	d1 f7       	brne	.-12     	; 0x4c4e <main+0x130>
    4c5a:	a5 01       	movw	r20, r10
    4c5c:	94 01       	movw	r18, r8
    4c5e:	b5 d5       	rcall	.+2922   	; 0x57ca <__udivmodsi4>
    4c60:	ca 01       	movw	r24, r20
    4c62:	b9 01       	movw	r22, r18
loop():
    4c64:	60 93 f6 46 	sts	0x46F6, r22	; 0x8046f6 <durationHigh>
    4c68:	70 93 f7 46 	sts	0x46F7, r23	; 0x8046f7 <durationHigh+0x1>
    4c6c:	80 93 f8 46 	sts	0x46F8, r24	; 0x8046f8 <durationHigh+0x2>
    4c70:	90 93 f9 46 	sts	0x46F9, r25	; 0x8046f9 <durationHigh+0x3>
pulseIn():
    4c74:	00 e6       	ldi	r16, 0x60	; 96
    4c76:	13 ee       	ldi	r17, 0xE3	; 227
    4c78:	26 e1       	ldi	r18, 0x16	; 22
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	40 e0       	ldi	r20, 0x00	; 0
    4c7e:	60 e1       	ldi	r22, 0x10	; 16
    4c80:	88 e0       	ldi	r24, 0x08	; 8
    4c82:	94 e0       	ldi	r25, 0x04	; 4
    4c84:	db da       	rcall	.-2634   	; 0x423c <countPulseASM>
    4c86:	6b 01       	movw	r12, r22
    4c88:	7c 01       	movw	r14, r24
    4c8a:	c1 14       	cp	r12, r1
    4c8c:	d1 04       	cpc	r13, r1
    4c8e:	e1 04       	cpc	r14, r1
    4c90:	f1 04       	cpc	r15, r1
    4c92:	99 f0       	breq	.+38     	; 0x4cba <main+0x19c>
    4c94:	2f ef       	ldi	r18, 0xFF	; 255
    4c96:	c2 1a       	sub	r12, r18
    4c98:	d2 0a       	sbc	r13, r18
    4c9a:	e2 0a       	sbc	r14, r18
    4c9c:	f2 0a       	sbc	r15, r18
    4c9e:	c7 01       	movw	r24, r14
    4ca0:	b6 01       	movw	r22, r12
    4ca2:	24 e0       	ldi	r18, 0x04	; 4
    4ca4:	66 0f       	add	r22, r22
    4ca6:	77 1f       	adc	r23, r23
    4ca8:	88 1f       	adc	r24, r24
    4caa:	99 1f       	adc	r25, r25
    4cac:	2a 95       	dec	r18
    4cae:	d1 f7       	brne	.-12     	; 0x4ca4 <main+0x186>
    4cb0:	a5 01       	movw	r20, r10
    4cb2:	94 01       	movw	r18, r8
    4cb4:	8a d5       	rcall	.+2836   	; 0x57ca <__udivmodsi4>
    4cb6:	69 01       	movw	r12, r18
    4cb8:	7a 01       	movw	r14, r20
loop():
    4cba:	c0 92 f2 46 	sts	0x46F2, r12	; 0x8046f2 <durationLow>
    4cbe:	d0 92 f3 46 	sts	0x46F3, r13	; 0x8046f3 <durationLow+0x1>
    4cc2:	e0 92 f4 46 	sts	0x46F4, r14	; 0x8046f4 <durationLow+0x2>
    4cc6:	f0 92 f5 46 	sts	0x46F5, r15	; 0x8046f5 <durationLow+0x3>
    4cca:	60 91 f6 46 	lds	r22, 0x46F6	; 0x8046f6 <durationHigh>
    4cce:	70 91 f7 46 	lds	r23, 0x46F7	; 0x8046f7 <durationHigh+0x1>
    4cd2:	80 91 f8 46 	lds	r24, 0x46F8	; 0x8046f8 <durationHigh+0x2>
    4cd6:	90 91 f9 46 	lds	r25, 0x46F9	; 0x8046f9 <durationHigh+0x3>
    4cda:	61 15       	cp	r22, r1
    4cdc:	71 05       	cpc	r23, r1
    4cde:	81 05       	cpc	r24, r1
    4ce0:	91 05       	cpc	r25, r1
    4ce2:	31 f1       	breq	.+76     	; 0x4d30 <main+0x212>
    4ce4:	10 92 f1 46 	sts	0x46F1, r1	; 0x8046f1 <charging>
    4ce8:	10 92 f0 46 	sts	0x46F0, r1	; 0x8046f0 <panic>
    4cec:	49 82       	std	Y+1, r4	; 0x01
    4cee:	5a 82       	std	Y+2, r5	; 0x02
    4cf0:	6b 82       	std	Y+3, r6	; 0x03
    4cf2:	7c 82       	std	Y+4, r7	; 0x04
    4cf4:	7d d3       	rcall	.+1786   	; 0x53f0 <__floatunsisf>
    4cf6:	6d 83       	std	Y+5, r22	; 0x05
    4cf8:	7e 83       	std	Y+6, r23	; 0x06
    4cfa:	8f 83       	std	Y+7, r24	; 0x07
    4cfc:	98 87       	std	Y+8, r25	; 0x08
    4cfe:	ce 01       	movw	r24, r28
    4d00:	01 96       	adiw	r24, 0x01	; 1
    4d02:	0e 94 1b 14 	call	0x2836	; 0x2836 <KNNClassifier::classify(float const*, int) [clone .constprop.9]>
    4d06:	8c 01       	movw	r16, r24
    4d08:	2f e1       	ldi	r18, 0x1F	; 31
    4d0a:	35 e8       	ldi	r19, 0x85	; 133
    4d0c:	4b e2       	ldi	r20, 0x2B	; 43
    4d0e:	5f e3       	ldi	r21, 0x3F	; 63
    4d10:	60 91 d7 4e 	lds	r22, 0x4ED7	; 0x804ed7 <anomKNN+0x6>
    4d14:	70 91 d8 4e 	lds	r23, 0x4ED8	; 0x804ed8 <anomKNN+0x7>
    4d18:	80 91 d9 4e 	lds	r24, 0x4ED9	; 0x804ed9 <anomKNN+0x8>
    4d1c:	90 91 da 4e 	lds	r25, 0x4EDA	; 0x804eda <anomKNN+0x9>
    4d20:	63 d3       	rcall	.+1734   	; 0x53e8 <__cmpsf2>
    4d22:	87 fd       	sbrc	r24, 7
    4d24:	07 c0       	rjmp	.+14     	; 0x4d34 <main+0x216>
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	89 87       	std	Y+9, r24	; 0x09
    4d2a:	00 32       	cpi	r16, 0x20	; 32
    4d2c:	13 40       	sbci	r17, 0x03	; 3
    4d2e:	21 f4       	brne	.+8      	; 0x4d38 <main+0x21a>
main():
    4d30:	19 86       	std	Y+9, r1	; 0x09
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <main+0x21a>
    4d34:	21 e0       	ldi	r18, 0x01	; 1
    4d36:	29 87       	std	Y+9, r18	; 0x09
loop():
    4d38:	c1 14       	cp	r12, r1
    4d3a:	d1 04       	cpc	r13, r1
    4d3c:	e1 04       	cpc	r14, r1
    4d3e:	f1 04       	cpc	r15, r1
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <main+0x226>
    4d42:	50 c0       	rjmp	.+160    	; 0x4de4 <main+0x2c6>
    4d44:	10 92 f1 46 	sts	0x46F1, r1	; 0x8046f1 <charging>
    4d48:	10 92 f0 46 	sts	0x46F0, r1	; 0x8046f0 <panic>
    4d4c:	19 82       	std	Y+1, r1	; 0x01
    4d4e:	1a 82       	std	Y+2, r1	; 0x02
    4d50:	1b 82       	std	Y+3, r1	; 0x03
    4d52:	1c 82       	std	Y+4, r1	; 0x04
    4d54:	c7 01       	movw	r24, r14
    4d56:	b6 01       	movw	r22, r12
    4d58:	4b d3       	rcall	.+1686   	; 0x53f0 <__floatunsisf>
    4d5a:	6d 83       	std	Y+5, r22	; 0x05
    4d5c:	7e 83       	std	Y+6, r23	; 0x06
    4d5e:	8f 83       	std	Y+7, r24	; 0x07
    4d60:	98 87       	std	Y+8, r25	; 0x08
    4d62:	ce 01       	movw	r24, r28
    4d64:	01 96       	adiw	r24, 0x01	; 1
    4d66:	0e 94 1b 14 	call	0x2836	; 0x2836 <KNNClassifier::classify(float const*, int) [clone .constprop.9]>
confidence():
    4d6a:	c0 90 d7 4e 	lds	r12, 0x4ED7	; 0x804ed7 <anomKNN+0x6>
    4d6e:	d0 90 d8 4e 	lds	r13, 0x4ED8	; 0x804ed8 <anomKNN+0x7>
    4d72:	e0 90 d9 4e 	lds	r14, 0x4ED9	; 0x804ed9 <anomKNN+0x8>
    4d76:	f0 90 da 4e 	lds	r15, 0x4EDA	; 0x804eda <anomKNN+0x9>
loop():
    4d7a:	8e 3b       	cpi	r24, 0xBE	; 190
    4d7c:	91 05       	cpc	r25, r1
    4d7e:	09 f4       	brne	.+2      	; 0x4d82 <main+0x264>
    4d80:	c2 c0       	rjmp	.+388    	; 0x4f06 <main+0x3e8>
    4d82:	89 85       	ldd	r24, Y+9	; 0x09
    4d84:	88 23       	and	r24, r24
    4d86:	71 f1       	breq	.+92     	; 0x4de4 <main+0x2c6>
    4d88:	91 e0       	ldi	r25, 0x01	; 1
    4d8a:	90 93 f0 46 	sts	0x46F0, r25	; 0x8046f0 <panic>
    4d8e:	41 e0       	ldi	r20, 0x01	; 1
    4d90:	50 e0       	ldi	r21, 0x00	; 0
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	60 e0       	ldi	r22, 0x00	; 0
    4d96:	8c e4       	ldi	r24, 0x4C	; 76
    4d98:	92 e4       	ldi	r25, 0x42	; 66
    4d9a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]>
    4d9e:	29 83       	std	Y+1, r18	; 0x01
    4da0:	3a 83       	std	Y+2, r19	; 0x02
    4da2:	4b 83       	std	Y+3, r20	; 0x03
    4da4:	5c 83       	std	Y+4, r21	; 0x04
    4da6:	6d 83       	std	Y+5, r22	; 0x05
    4da8:	7e 83       	std	Y+6, r23	; 0x06
    4daa:	8f 83       	std	Y+7, r24	; 0x07
    4dac:	98 87       	std	Y+8, r25	; 0x08
    4dae:	7f 93       	push	r23
    4db0:	8d 81       	ldd	r24, Y+5	; 0x05
    4db2:	8f 93       	push	r24
    4db4:	8c 81       	ldd	r24, Y+4	; 0x04
    4db6:	8f 93       	push	r24
    4db8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dba:	8f 93       	push	r24
    4dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbe:	8f 93       	push	r24
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	8f 93       	push	r24
    4dc4:	8d e7       	ldi	r24, 0x7D	; 125
    4dc6:	97 e0       	ldi	r25, 0x07	; 7
    4dc8:	9f 93       	push	r25
    4dca:	8f 93       	push	r24
    4dcc:	3f 92       	push	r3
    4dce:	2f 92       	push	r2
    4dd0:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    4dd4:	60 e8       	ldi	r22, 0x80	; 128
    4dd6:	7e ee       	ldi	r23, 0xEE	; 238
    4dd8:	86 e3       	ldi	r24, 0x36	; 54
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <delay>
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	80 91 f6 46 	lds	r24, 0x46F6	; 0x8046f6 <durationHigh>
    4de8:	90 91 f7 46 	lds	r25, 0x46F7	; 0x8046f7 <durationHigh+0x1>
    4dec:	a0 91 f8 46 	lds	r26, 0x46F8	; 0x8046f8 <durationHigh+0x2>
    4df0:	b0 91 f9 46 	lds	r27, 0x46F9	; 0x8046f9 <durationHigh+0x3>
    4df4:	89 2b       	or	r24, r25
    4df6:	8a 2b       	or	r24, r26
    4df8:	8b 2b       	or	r24, r27
    4dfa:	f1 f5       	brne	.+124    	; 0x4e78 <main+0x35a>
    4dfc:	80 91 f2 46 	lds	r24, 0x46F2	; 0x8046f2 <durationLow>
    4e00:	90 91 f3 46 	lds	r25, 0x46F3	; 0x8046f3 <durationLow+0x1>
    4e04:	a0 91 f4 46 	lds	r26, 0x46F4	; 0x8046f4 <durationLow+0x2>
    4e08:	b0 91 f5 46 	lds	r27, 0x46F5	; 0x8046f5 <durationLow+0x3>
    4e0c:	89 2b       	or	r24, r25
    4e0e:	8a 2b       	or	r24, r26
    4e10:	8b 2b       	or	r24, r27
    4e12:	91 f5       	brne	.+100    	; 0x4e78 <main+0x35a>
    4e14:	80 91 f1 46 	lds	r24, 0x46F1	; 0x8046f1 <charging>
    4e18:	81 11       	cpse	r24, r1
    4e1a:	2e c0       	rjmp	.+92     	; 0x4e78 <main+0x35a>
    4e1c:	91 e0       	ldi	r25, 0x01	; 1
    4e1e:	90 93 f1 46 	sts	0x46F1, r25	; 0x8046f1 <charging>
    4e22:	41 e0       	ldi	r20, 0x01	; 1
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	80 e7       	ldi	r24, 0x70	; 112
    4e2c:	92 e4       	ldi	r25, 0x42	; 66
    4e2e:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]>
    4e32:	29 83       	std	Y+1, r18	; 0x01
    4e34:	3a 83       	std	Y+2, r19	; 0x02
    4e36:	4b 83       	std	Y+3, r20	; 0x03
    4e38:	5c 83       	std	Y+4, r21	; 0x04
    4e3a:	6d 83       	std	Y+5, r22	; 0x05
    4e3c:	7e 83       	std	Y+6, r23	; 0x06
    4e3e:	8f 83       	std	Y+7, r24	; 0x07
    4e40:	98 87       	std	Y+8, r25	; 0x08
    4e42:	7f 93       	push	r23
    4e44:	8d 81       	ldd	r24, Y+5	; 0x05
    4e46:	8f 93       	push	r24
    4e48:	8c 81       	ldd	r24, Y+4	; 0x04
    4e4a:	8f 93       	push	r24
    4e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4e:	8f 93       	push	r24
    4e50:	8a 81       	ldd	r24, Y+2	; 0x02
    4e52:	8f 93       	push	r24
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	8f 93       	push	r24
    4e58:	80 e5       	ldi	r24, 0x50	; 80
    4e5a:	97 e0       	ldi	r25, 0x07	; 7
    4e5c:	9f 93       	push	r25
    4e5e:	8f 93       	push	r24
    4e60:	3f 92       	push	r3
    4e62:	2f 92       	push	r2
    4e64:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	74 e7       	ldi	r23, 0x74	; 116
    4e6c:	87 eb       	ldi	r24, 0xB7	; 183
    4e6e:	91 e0       	ldi	r25, 0x01	; 1
    4e70:	0e 94 8d 06 	call	0xd1a	; 0xd1a <delay>
    4e74:	cd bf       	out	0x3d, r28	; 61
    4e76:	de bf       	out	0x3e, r29	; 62
    4e78:	80 91 f6 46 	lds	r24, 0x46F6	; 0x8046f6 <durationHigh>
    4e7c:	90 91 f7 46 	lds	r25, 0x46F7	; 0x8046f7 <durationHigh+0x1>
    4e80:	a0 91 f8 46 	lds	r26, 0x46F8	; 0x8046f8 <durationHigh+0x2>
    4e84:	b0 91 f9 46 	lds	r27, 0x46F9	; 0x8046f9 <durationHigh+0x3>
    4e88:	89 2b       	or	r24, r25
    4e8a:	8a 2b       	or	r24, r26
    4e8c:	8b 2b       	or	r24, r27
    4e8e:	09 f0       	breq	.+2      	; 0x4e92 <main+0x374>
    4e90:	cb ce       	rjmp	.-618    	; 0x4c28 <main+0x10a>
    4e92:	80 91 f2 46 	lds	r24, 0x46F2	; 0x8046f2 <durationLow>
    4e96:	90 91 f3 46 	lds	r25, 0x46F3	; 0x8046f3 <durationLow+0x1>
    4e9a:	a0 91 f4 46 	lds	r26, 0x46F4	; 0x8046f4 <durationLow+0x2>
    4e9e:	b0 91 f5 46 	lds	r27, 0x46F5	; 0x8046f5 <durationLow+0x3>
    4ea2:	89 2b       	or	r24, r25
    4ea4:	8a 2b       	or	r24, r26
    4ea6:	8b 2b       	or	r24, r27
    4ea8:	09 f0       	breq	.+2      	; 0x4eac <main+0x38e>
    4eaa:	be ce       	rjmp	.-644    	; 0x4c28 <main+0x10a>
    4eac:	80 91 f1 46 	lds	r24, 0x46F1	; 0x8046f1 <charging>
    4eb0:	88 23       	and	r24, r24
    4eb2:	09 f4       	brne	.+2      	; 0x4eb6 <main+0x398>
    4eb4:	b9 ce       	rjmp	.-654    	; 0x4c28 <main+0x10a>
    4eb6:	10 92 f1 46 	sts	0x46F1, r1	; 0x8046f1 <charging>
    4eba:	41 e0       	ldi	r20, 0x01	; 1
    4ebc:	50 e0       	ldi	r21, 0x00	; 0
    4ebe:	70 e0       	ldi	r23, 0x00	; 0
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	8a e9       	ldi	r24, 0x9A	; 154
    4ec4:	92 e4       	ldi	r25, 0x42	; 66
    4ec6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <HttpClientClass::post(char const*, char const*, char const*, HttpClientClass::ContentType, unsigned long) [clone .constprop.39]>
    4eca:	29 83       	std	Y+1, r18	; 0x01
    4ecc:	3a 83       	std	Y+2, r19	; 0x02
    4ece:	4b 83       	std	Y+3, r20	; 0x03
    4ed0:	5c 83       	std	Y+4, r21	; 0x04
    4ed2:	6d 83       	std	Y+5, r22	; 0x05
    4ed4:	7e 83       	std	Y+6, r23	; 0x06
    4ed6:	8f 83       	std	Y+7, r24	; 0x07
    4ed8:	98 87       	std	Y+8, r25	; 0x08
    4eda:	7f 93       	push	r23
    4edc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ede:	8f 93       	push	r24
    4ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ee2:	8f 93       	push	r24
    4ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ee6:	8f 93       	push	r24
    4ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eea:	8f 93       	push	r24
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	8f 93       	push	r24
    4ef0:	83 e2       	ldi	r24, 0x23	; 35
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	9f 93       	push	r25
    4ef6:	8f 93       	push	r24
    4ef8:	3f 92       	push	r3
    4efa:	2f 92       	push	r2
    4efc:	0e 94 03 0a 	call	0x1406	; 0x1406 <LogClass::infof(__FlashStringHelper const*, ...) [clone .constprop.79]>
    4f00:	cd bf       	out	0x3d, r28	; 61
    4f02:	de bf       	out	0x3e, r29	; 62
    4f04:	91 ce       	rjmp	.-734    	; 0x4c28 <main+0x10a>
    4f06:	2f e1       	ldi	r18, 0x1F	; 31
    4f08:	35 e8       	ldi	r19, 0x85	; 133
    4f0a:	4b e2       	ldi	r20, 0x2B	; 43
    4f0c:	5f e3       	ldi	r21, 0x3F	; 63
    4f0e:	c7 01       	movw	r24, r14
    4f10:	b6 01       	movw	r22, r12
    4f12:	6a d2       	rcall	.+1236   	; 0x53e8 <__cmpsf2>
    4f14:	87 ff       	sbrs	r24, 7
    4f16:	66 cf       	rjmp	.-308    	; 0x4de4 <main+0x2c6>
    4f18:	34 cf       	rjmp	.-408    	; 0x4d82 <main+0x264>

00004f1a <_GLOBAL__sub_D_pin>:
_GLOBAL__sub_D_pin():
    4f1a:	81 ed       	ldi	r24, 0xD1	; 209
    4f1c:	9e e4       	ldi	r25, 0x4E	; 78
    4f1e:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <KNNClassifier::~KNNClassifier()>

00004f22 <atoi>:
atoi():
    4f22:	fc 01       	movw	r30, r24
    4f24:	88 27       	eor	r24, r24
    4f26:	99 27       	eor	r25, r25
    4f28:	e8 94       	clt
    4f2a:	21 91       	ld	r18, Z+
    4f2c:	20 32       	cpi	r18, 0x20	; 32
    4f2e:	e9 f3       	breq	.-6      	; 0x4f2a <atoi+0x8>
    4f30:	29 30       	cpi	r18, 0x09	; 9
    4f32:	10 f0       	brcs	.+4      	; 0x4f38 <atoi+0x16>
    4f34:	2e 30       	cpi	r18, 0x0E	; 14
    4f36:	c8 f3       	brcs	.-14     	; 0x4f2a <atoi+0x8>
    4f38:	2b 32       	cpi	r18, 0x2B	; 43
    4f3a:	39 f0       	breq	.+14     	; 0x4f4a <atoi+0x28>
    4f3c:	2d 32       	cpi	r18, 0x2D	; 45
    4f3e:	31 f4       	brne	.+12     	; 0x4f4c <atoi+0x2a>
    4f40:	68 94       	set
    4f42:	03 c0       	rjmp	.+6      	; 0x4f4a <atoi+0x28>
    4f44:	7b d1       	rcall	.+758    	; 0x523c <__mulhi_const_10>
    4f46:	82 0f       	add	r24, r18
    4f48:	91 1d       	adc	r25, r1
    4f4a:	21 91       	ld	r18, Z+
    4f4c:	20 53       	subi	r18, 0x30	; 48
    4f4e:	2a 30       	cpi	r18, 0x0A	; 10
    4f50:	c8 f3       	brcs	.-14     	; 0x4f44 <atoi+0x22>
    4f52:	1e f4       	brtc	.+6      	; 0x4f5a <atoi+0x38>
    4f54:	90 95       	com	r25
    4f56:	81 95       	neg	r24
    4f58:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5a:	08 95       	ret

00004f5c <__ftoa_engine>:
__ftoa_engine():
    4f5c:	28 30       	cpi	r18, 0x08	; 8
    4f5e:	08 f0       	brcs	.+2      	; 0x4f62 <__ftoa_engine+0x6>
    4f60:	27 e0       	ldi	r18, 0x07	; 7
    4f62:	33 27       	eor	r19, r19
    4f64:	da 01       	movw	r26, r20
    4f66:	99 0f       	add	r25, r25
    4f68:	31 1d       	adc	r19, r1
    4f6a:	87 fd       	sbrc	r24, 7
    4f6c:	91 60       	ori	r25, 0x01	; 1
    4f6e:	00 96       	adiw	r24, 0x00	; 0
    4f70:	61 05       	cpc	r22, r1
    4f72:	71 05       	cpc	r23, r1
    4f74:	39 f4       	brne	.+14     	; 0x4f84 <__ftoa_engine+0x28>
    4f76:	32 60       	ori	r19, 0x02	; 2
    4f78:	2e 5f       	subi	r18, 0xFE	; 254
    4f7a:	3d 93       	st	X+, r19
    4f7c:	30 e3       	ldi	r19, 0x30	; 48
    4f7e:	2a 95       	dec	r18
    4f80:	e1 f7       	brne	.-8      	; 0x4f7a <__ftoa_engine+0x1e>
    4f82:	08 95       	ret
    4f84:	9f 3f       	cpi	r25, 0xFF	; 255
    4f86:	30 f0       	brcs	.+12     	; 0x4f94 <__ftoa_engine+0x38>
    4f88:	80 38       	cpi	r24, 0x80	; 128
    4f8a:	71 05       	cpc	r23, r1
    4f8c:	61 05       	cpc	r22, r1
    4f8e:	09 f0       	breq	.+2      	; 0x4f92 <__ftoa_engine+0x36>
    4f90:	3c 5f       	subi	r19, 0xFC	; 252
    4f92:	3c 5f       	subi	r19, 0xFC	; 252
    4f94:	3d 93       	st	X+, r19
    4f96:	91 30       	cpi	r25, 0x01	; 1
    4f98:	08 f0       	brcs	.+2      	; 0x4f9c <__ftoa_engine+0x40>
    4f9a:	80 68       	ori	r24, 0x80	; 128
    4f9c:	91 1d       	adc	r25, r1
    4f9e:	df 93       	push	r29
    4fa0:	cf 93       	push	r28
    4fa2:	1f 93       	push	r17
    4fa4:	0f 93       	push	r16
    4fa6:	ff 92       	push	r15
    4fa8:	ef 92       	push	r14
    4faa:	19 2f       	mov	r17, r25
    4fac:	98 7f       	andi	r25, 0xF8	; 248
    4fae:	96 95       	lsr	r25
    4fb0:	e9 2f       	mov	r30, r25
    4fb2:	96 95       	lsr	r25
    4fb4:	96 95       	lsr	r25
    4fb6:	e9 0f       	add	r30, r25
    4fb8:	ff 27       	eor	r31, r31
    4fba:	ea 5a       	subi	r30, 0xAA	; 170
    4fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fbe:	99 27       	eor	r25, r25
    4fc0:	33 27       	eor	r19, r19
    4fc2:	ee 24       	eor	r14, r14
    4fc4:	ff 24       	eor	r15, r15
    4fc6:	a7 01       	movw	r20, r14
    4fc8:	e7 01       	movw	r28, r14
    4fca:	05 90       	lpm	r0, Z+
    4fcc:	08 94       	sec
    4fce:	07 94       	ror	r0
    4fd0:	28 f4       	brcc	.+10     	; 0x4fdc <__ftoa_engine+0x80>
    4fd2:	36 0f       	add	r19, r22
    4fd4:	e7 1e       	adc	r14, r23
    4fd6:	f8 1e       	adc	r15, r24
    4fd8:	49 1f       	adc	r20, r25
    4fda:	51 1d       	adc	r21, r1
    4fdc:	66 0f       	add	r22, r22
    4fde:	77 1f       	adc	r23, r23
    4fe0:	88 1f       	adc	r24, r24
    4fe2:	99 1f       	adc	r25, r25
    4fe4:	06 94       	lsr	r0
    4fe6:	a1 f7       	brne	.-24     	; 0x4fd0 <__ftoa_engine+0x74>
    4fe8:	05 90       	lpm	r0, Z+
    4fea:	07 94       	ror	r0
    4fec:	28 f4       	brcc	.+10     	; 0x4ff8 <__ftoa_engine+0x9c>
    4fee:	e7 0e       	add	r14, r23
    4ff0:	f8 1e       	adc	r15, r24
    4ff2:	49 1f       	adc	r20, r25
    4ff4:	56 1f       	adc	r21, r22
    4ff6:	c1 1d       	adc	r28, r1
    4ff8:	77 0f       	add	r23, r23
    4ffa:	88 1f       	adc	r24, r24
    4ffc:	99 1f       	adc	r25, r25
    4ffe:	66 1f       	adc	r22, r22
    5000:	06 94       	lsr	r0
    5002:	a1 f7       	brne	.-24     	; 0x4fec <__ftoa_engine+0x90>
    5004:	05 90       	lpm	r0, Z+
    5006:	07 94       	ror	r0
    5008:	28 f4       	brcc	.+10     	; 0x5014 <__ftoa_engine+0xb8>
    500a:	f8 0e       	add	r15, r24
    500c:	49 1f       	adc	r20, r25
    500e:	56 1f       	adc	r21, r22
    5010:	c7 1f       	adc	r28, r23
    5012:	d1 1d       	adc	r29, r1
    5014:	88 0f       	add	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	66 1f       	adc	r22, r22
    501a:	77 1f       	adc	r23, r23
    501c:	06 94       	lsr	r0
    501e:	a1 f7       	brne	.-24     	; 0x5008 <__ftoa_engine+0xac>
    5020:	05 90       	lpm	r0, Z+
    5022:	07 94       	ror	r0
    5024:	20 f4       	brcc	.+8      	; 0x502e <__ftoa_engine+0xd2>
    5026:	49 0f       	add	r20, r25
    5028:	56 1f       	adc	r21, r22
    502a:	c7 1f       	adc	r28, r23
    502c:	d8 1f       	adc	r29, r24
    502e:	99 0f       	add	r25, r25
    5030:	66 1f       	adc	r22, r22
    5032:	77 1f       	adc	r23, r23
    5034:	88 1f       	adc	r24, r24
    5036:	06 94       	lsr	r0
    5038:	a9 f7       	brne	.-22     	; 0x5024 <__ftoa_engine+0xc8>
    503a:	84 91       	lpm	r24, Z
    503c:	10 95       	com	r17
    503e:	17 70       	andi	r17, 0x07	; 7
    5040:	41 f0       	breq	.+16     	; 0x5052 <__ftoa_engine+0xf6>
    5042:	d6 95       	lsr	r29
    5044:	c7 95       	ror	r28
    5046:	57 95       	ror	r21
    5048:	47 95       	ror	r20
    504a:	f7 94       	ror	r15
    504c:	e7 94       	ror	r14
    504e:	1a 95       	dec	r17
    5050:	c1 f7       	brne	.-16     	; 0x5042 <__ftoa_engine+0xe6>
    5052:	ec ef       	ldi	r30, 0xFC	; 252
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	68 94       	set
    5058:	15 90       	lpm	r1, Z+
    505a:	15 91       	lpm	r17, Z+
    505c:	35 91       	lpm	r19, Z+
    505e:	65 91       	lpm	r22, Z+
    5060:	95 91       	lpm	r25, Z+
    5062:	05 90       	lpm	r0, Z+
    5064:	7f e2       	ldi	r23, 0x2F	; 47
    5066:	73 95       	inc	r23
    5068:	e1 18       	sub	r14, r1
    506a:	f1 0a       	sbc	r15, r17
    506c:	43 0b       	sbc	r20, r19
    506e:	56 0b       	sbc	r21, r22
    5070:	c9 0b       	sbc	r28, r25
    5072:	d0 09       	sbc	r29, r0
    5074:	c0 f7       	brcc	.-16     	; 0x5066 <__ftoa_engine+0x10a>
    5076:	e1 0c       	add	r14, r1
    5078:	f1 1e       	adc	r15, r17
    507a:	43 1f       	adc	r20, r19
    507c:	56 1f       	adc	r21, r22
    507e:	c9 1f       	adc	r28, r25
    5080:	d0 1d       	adc	r29, r0
    5082:	7e f4       	brtc	.+30     	; 0x50a2 <__ftoa_engine+0x146>
    5084:	70 33       	cpi	r23, 0x30	; 48
    5086:	11 f4       	brne	.+4      	; 0x508c <__ftoa_engine+0x130>
    5088:	8a 95       	dec	r24
    508a:	e6 cf       	rjmp	.-52     	; 0x5058 <__ftoa_engine+0xfc>
    508c:	e8 94       	clt
    508e:	01 50       	subi	r16, 0x01	; 1
    5090:	30 f0       	brcs	.+12     	; 0x509e <__ftoa_engine+0x142>
    5092:	08 0f       	add	r16, r24
    5094:	0a f4       	brpl	.+2      	; 0x5098 <__ftoa_engine+0x13c>
    5096:	00 27       	eor	r16, r16
    5098:	02 17       	cp	r16, r18
    509a:	08 f4       	brcc	.+2      	; 0x509e <__ftoa_engine+0x142>
    509c:	20 2f       	mov	r18, r16
    509e:	23 95       	inc	r18
    50a0:	02 2f       	mov	r16, r18
    50a2:	7a 33       	cpi	r23, 0x3A	; 58
    50a4:	28 f0       	brcs	.+10     	; 0x50b0 <__ftoa_engine+0x154>
    50a6:	79 e3       	ldi	r23, 0x39	; 57
    50a8:	7d 93       	st	X+, r23
    50aa:	2a 95       	dec	r18
    50ac:	e9 f7       	brne	.-6      	; 0x50a8 <__ftoa_engine+0x14c>
    50ae:	10 c0       	rjmp	.+32     	; 0x50d0 <__ftoa_engine+0x174>
    50b0:	7d 93       	st	X+, r23
    50b2:	2a 95       	dec	r18
    50b4:	89 f6       	brne	.-94     	; 0x5058 <__ftoa_engine+0xfc>
    50b6:	06 94       	lsr	r0
    50b8:	97 95       	ror	r25
    50ba:	67 95       	ror	r22
    50bc:	37 95       	ror	r19
    50be:	17 95       	ror	r17
    50c0:	17 94       	ror	r1
    50c2:	e1 18       	sub	r14, r1
    50c4:	f1 0a       	sbc	r15, r17
    50c6:	43 0b       	sbc	r20, r19
    50c8:	56 0b       	sbc	r21, r22
    50ca:	c9 0b       	sbc	r28, r25
    50cc:	d0 09       	sbc	r29, r0
    50ce:	98 f0       	brcs	.+38     	; 0x50f6 <__ftoa_engine+0x19a>
    50d0:	23 95       	inc	r18
    50d2:	7e 91       	ld	r23, -X
    50d4:	73 95       	inc	r23
    50d6:	7a 33       	cpi	r23, 0x3A	; 58
    50d8:	08 f0       	brcs	.+2      	; 0x50dc <__ftoa_engine+0x180>
    50da:	70 e3       	ldi	r23, 0x30	; 48
    50dc:	7c 93       	st	X, r23
    50de:	20 13       	cpse	r18, r16
    50e0:	b8 f7       	brcc	.-18     	; 0x50d0 <__ftoa_engine+0x174>
    50e2:	7e 91       	ld	r23, -X
    50e4:	70 61       	ori	r23, 0x10	; 16
    50e6:	7d 93       	st	X+, r23
    50e8:	30 f0       	brcs	.+12     	; 0x50f6 <__ftoa_engine+0x19a>
    50ea:	83 95       	inc	r24
    50ec:	71 e3       	ldi	r23, 0x31	; 49
    50ee:	7d 93       	st	X+, r23
    50f0:	70 e3       	ldi	r23, 0x30	; 48
    50f2:	2a 95       	dec	r18
    50f4:	e1 f7       	brne	.-8      	; 0x50ee <__ftoa_engine+0x192>
    50f6:	11 24       	eor	r1, r1
    50f8:	ef 90       	pop	r14
    50fa:	ff 90       	pop	r15
    50fc:	0f 91       	pop	r16
    50fe:	1f 91       	pop	r17
    5100:	cf 91       	pop	r28
    5102:	df 91       	pop	r29
    5104:	99 27       	eor	r25, r25
    5106:	87 fd       	sbrc	r24, 7
    5108:	90 95       	com	r25
    510a:	08 95       	ret

0000510c <memcmp_P>:
memcmp_P():
    510c:	fb 01       	movw	r30, r22
    510e:	dc 01       	movw	r26, r24
    5110:	04 c0       	rjmp	.+8      	; 0x511a <memcmp_P+0xe>
    5112:	8d 91       	ld	r24, X+
    5114:	05 90       	lpm	r0, Z+
    5116:	80 19       	sub	r24, r0
    5118:	21 f4       	brne	.+8      	; 0x5122 <memcmp_P+0x16>
    511a:	41 50       	subi	r20, 0x01	; 1
    511c:	50 40       	sbci	r21, 0x00	; 0
    511e:	c8 f7       	brcc	.-14     	; 0x5112 <memcmp_P+0x6>
    5120:	88 1b       	sub	r24, r24
    5122:	99 0b       	sbc	r25, r25
    5124:	08 95       	ret

00005126 <strcmp_P>:
strcmp_P():
    5126:	fb 01       	movw	r30, r22
    5128:	dc 01       	movw	r26, r24
    512a:	8d 91       	ld	r24, X+
    512c:	05 90       	lpm	r0, Z+
    512e:	80 19       	sub	r24, r0
    5130:	01 10       	cpse	r0, r1
    5132:	d9 f3       	breq	.-10     	; 0x512a <strcmp_P+0x4>
    5134:	99 0b       	sbc	r25, r25
    5136:	08 95       	ret

00005138 <strcpy_P>:
strcpy_P():
    5138:	fb 01       	movw	r30, r22
    513a:	dc 01       	movw	r26, r24
    513c:	05 90       	lpm	r0, Z+
    513e:	0d 92       	st	X+, r0
    5140:	00 20       	and	r0, r0
    5142:	e1 f7       	brne	.-8      	; 0x513c <strcpy_P+0x4>
    5144:	08 95       	ret

00005146 <__strlen_P>:
__strlen_P():
    5146:	fc 01       	movw	r30, r24
    5148:	05 90       	lpm	r0, Z+
    514a:	00 20       	and	r0, r0
    514c:	e9 f7       	brne	.-6      	; 0x5148 <__strlen_P+0x2>
    514e:	80 95       	com	r24
    5150:	90 95       	com	r25
    5152:	8e 0f       	add	r24, r30
    5154:	9f 1f       	adc	r25, r31
    5156:	08 95       	ret

00005158 <strncmp_P>:
strncmp_P():
    5158:	fb 01       	movw	r30, r22
    515a:	dc 01       	movw	r26, r24
    515c:	41 50       	subi	r20, 0x01	; 1
    515e:	50 40       	sbci	r21, 0x00	; 0
    5160:	30 f0       	brcs	.+12     	; 0x516e <strncmp_P+0x16>
    5162:	8d 91       	ld	r24, X+
    5164:	05 90       	lpm	r0, Z+
    5166:	80 19       	sub	r24, r0
    5168:	19 f4       	brne	.+6      	; 0x5170 <strncmp_P+0x18>
    516a:	00 20       	and	r0, r0
    516c:	b9 f7       	brne	.-18     	; 0x515c <strncmp_P+0x4>
    516e:	88 1b       	sub	r24, r24
    5170:	99 0b       	sbc	r25, r25
    5172:	08 95       	ret

00005174 <strnlen_P>:
strnlen_P():
    5174:	fc 01       	movw	r30, r24
    5176:	05 90       	lpm	r0, Z+
    5178:	61 50       	subi	r22, 0x01	; 1
    517a:	70 40       	sbci	r23, 0x00	; 0
    517c:	01 10       	cpse	r0, r1
    517e:	d8 f7       	brcc	.-10     	; 0x5176 <strnlen_P+0x2>
    5180:	80 95       	com	r24
    5182:	90 95       	com	r25
    5184:	8e 0f       	add	r24, r30
    5186:	9f 1f       	adc	r25, r31
    5188:	08 95       	ret

0000518a <strstr_P>:
strstr_P():
    518a:	fb 01       	movw	r30, r22
    518c:	55 91       	lpm	r21, Z+
    518e:	55 23       	and	r21, r21
    5190:	a9 f0       	breq	.+42     	; 0x51bc <strstr_P+0x32>
    5192:	bf 01       	movw	r22, r30
    5194:	dc 01       	movw	r26, r24
    5196:	4d 91       	ld	r20, X+
    5198:	45 17       	cp	r20, r21
    519a:	41 11       	cpse	r20, r1
    519c:	e1 f7       	brne	.-8      	; 0x5196 <strstr_P+0xc>
    519e:	59 f4       	brne	.+22     	; 0x51b6 <strstr_P+0x2c>
    51a0:	cd 01       	movw	r24, r26
    51a2:	05 90       	lpm	r0, Z+
    51a4:	00 20       	and	r0, r0
    51a6:	49 f0       	breq	.+18     	; 0x51ba <strstr_P+0x30>
    51a8:	4d 91       	ld	r20, X+
    51aa:	40 15       	cp	r20, r0
    51ac:	41 11       	cpse	r20, r1
    51ae:	c9 f3       	breq	.-14     	; 0x51a2 <strstr_P+0x18>
    51b0:	fb 01       	movw	r30, r22
    51b2:	41 11       	cpse	r20, r1
    51b4:	ef cf       	rjmp	.-34     	; 0x5194 <strstr_P+0xa>
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	01 97       	sbiw	r24, 0x01	; 1
    51bc:	08 95       	ret

000051be <strtok>:
strtok():
    51be:	4b ed       	ldi	r20, 0xDB	; 219
    51c0:	5e e4       	ldi	r21, 0x4E	; 78
    51c2:	0b c0       	rjmp	.+22     	; 0x51da <strtok_r>

000051c4 <strnlen>:
strnlen():
    51c4:	fc 01       	movw	r30, r24
    51c6:	61 50       	subi	r22, 0x01	; 1
    51c8:	70 40       	sbci	r23, 0x00	; 0
    51ca:	01 90       	ld	r0, Z+
    51cc:	01 10       	cpse	r0, r1
    51ce:	d8 f7       	brcc	.-10     	; 0x51c6 <strnlen+0x2>
    51d0:	80 95       	com	r24
    51d2:	90 95       	com	r25
    51d4:	8e 0f       	add	r24, r30
    51d6:	9f 1f       	adc	r25, r31
    51d8:	08 95       	ret

000051da <strtok_r>:
strtok_r():
    51da:	fa 01       	movw	r30, r20
    51dc:	a1 91       	ld	r26, Z+
    51de:	b0 81       	ld	r27, Z
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	19 f4       	brne	.+6      	; 0x51ea <strtok_r+0x10>
    51e4:	10 97       	sbiw	r26, 0x00	; 0
    51e6:	e1 f0       	breq	.+56     	; 0x5220 <strtok_r+0x46>
    51e8:	cd 01       	movw	r24, r26
    51ea:	dc 01       	movw	r26, r24
    51ec:	cd 01       	movw	r24, r26
    51ee:	0d 90       	ld	r0, X+
    51f0:	00 20       	and	r0, r0
    51f2:	11 f4       	brne	.+4      	; 0x51f8 <strtok_r+0x1e>
    51f4:	c0 01       	movw	r24, r0
    51f6:	13 c0       	rjmp	.+38     	; 0x521e <strtok_r+0x44>
    51f8:	fb 01       	movw	r30, r22
    51fa:	21 91       	ld	r18, Z+
    51fc:	22 23       	and	r18, r18
    51fe:	19 f0       	breq	.+6      	; 0x5206 <strtok_r+0x2c>
    5200:	20 15       	cp	r18, r0
    5202:	d9 f7       	brne	.-10     	; 0x51fa <strtok_r+0x20>
    5204:	f3 cf       	rjmp	.-26     	; 0x51ec <strtok_r+0x12>
    5206:	fb 01       	movw	r30, r22
    5208:	21 91       	ld	r18, Z+
    520a:	20 15       	cp	r18, r0
    520c:	19 f4       	brne	.+6      	; 0x5214 <strtok_r+0x3a>
    520e:	1e 92       	st	-X, r1
    5210:	11 96       	adiw	r26, 0x01	; 1
    5212:	06 c0       	rjmp	.+12     	; 0x5220 <strtok_r+0x46>
    5214:	22 23       	and	r18, r18
    5216:	c1 f7       	brne	.-16     	; 0x5208 <strtok_r+0x2e>
    5218:	0d 90       	ld	r0, X+
    521a:	00 20       	and	r0, r0
    521c:	a1 f7       	brne	.-24     	; 0x5206 <strtok_r+0x2c>
    521e:	d0 01       	movw	r26, r0
    5220:	fa 01       	movw	r30, r20
    5222:	a1 93       	st	Z+, r26
    5224:	b0 83       	st	Z, r27
    5226:	08 95       	ret

00005228 <__itoa_ncheck>:
__itoa_ncheck():
    5228:	bb 27       	eor	r27, r27
    522a:	4a 30       	cpi	r20, 0x0A	; 10
    522c:	31 f4       	brne	.+12     	; 0x523a <__itoa_ncheck+0x12>
    522e:	99 23       	and	r25, r25
    5230:	22 f4       	brpl	.+8      	; 0x523a <__itoa_ncheck+0x12>
    5232:	bd e2       	ldi	r27, 0x2D	; 45
    5234:	90 95       	com	r25
    5236:	81 95       	neg	r24
    5238:	9f 4f       	sbci	r25, 0xFF	; 255
    523a:	09 c0       	rjmp	.+18     	; 0x524e <__utoa_common>

0000523c <__mulhi_const_10>:
__mulhi_const_10():
    523c:	7a e0       	ldi	r23, 0x0A	; 10
    523e:	97 9f       	mul	r25, r23
    5240:	90 2d       	mov	r25, r0
    5242:	87 9f       	mul	r24, r23
    5244:	80 2d       	mov	r24, r0
    5246:	91 0d       	add	r25, r1
    5248:	11 24       	eor	r1, r1
    524a:	08 95       	ret

0000524c <__utoa_ncheck>:
__utoa_ncheck():
    524c:	bb 27       	eor	r27, r27

0000524e <__utoa_common>:
    524e:	fb 01       	movw	r30, r22
    5250:	55 27       	eor	r21, r21
    5252:	aa 27       	eor	r26, r26
    5254:	88 0f       	add	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	aa 1f       	adc	r26, r26
    525a:	a4 17       	cp	r26, r20
    525c:	10 f0       	brcs	.+4      	; 0x5262 <__utoa_common+0x14>
    525e:	a4 1b       	sub	r26, r20
    5260:	83 95       	inc	r24
    5262:	50 51       	subi	r21, 0x10	; 16
    5264:	b9 f7       	brne	.-18     	; 0x5254 <__utoa_common+0x6>
    5266:	a0 5d       	subi	r26, 0xD0	; 208
    5268:	aa 33       	cpi	r26, 0x3A	; 58
    526a:	08 f0       	brcs	.+2      	; 0x526e <__utoa_common+0x20>
    526c:	a9 5d       	subi	r26, 0xD9	; 217
    526e:	a1 93       	st	Z+, r26
    5270:	00 97       	sbiw	r24, 0x00	; 0
    5272:	79 f7       	brne	.-34     	; 0x5252 <__utoa_common+0x4>
    5274:	b1 11       	cpse	r27, r1
    5276:	b1 93       	st	Z+, r27
    5278:	11 92       	st	Z+, r1
    527a:	cb 01       	movw	r24, r22
    527c:	a5 c0       	rjmp	.+330    	; 0x53c8 <strrev>

0000527e <fputc>:
fputc():
    527e:	0f 93       	push	r16
    5280:	1f 93       	push	r17
    5282:	cf 93       	push	r28
    5284:	df 93       	push	r29
    5286:	18 2f       	mov	r17, r24
    5288:	09 2f       	mov	r16, r25
    528a:	eb 01       	movw	r28, r22
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	81 fd       	sbrc	r24, 1
    5290:	09 c0       	rjmp	.+18     	; 0x52a4 <fputc+0x26>
    5292:	1f ef       	ldi	r17, 0xFF	; 255
    5294:	0f ef       	ldi	r16, 0xFF	; 255
    5296:	81 2f       	mov	r24, r17
    5298:	90 2f       	mov	r25, r16
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	08 95       	ret
    52a4:	82 ff       	sbrs	r24, 2
    52a6:	14 c0       	rjmp	.+40     	; 0x52d0 <fputc+0x52>
    52a8:	2e 81       	ldd	r18, Y+6	; 0x06
    52aa:	3f 81       	ldd	r19, Y+7	; 0x07
    52ac:	8c 81       	ldd	r24, Y+4	; 0x04
    52ae:	9d 81       	ldd	r25, Y+5	; 0x05
    52b0:	28 17       	cp	r18, r24
    52b2:	39 07       	cpc	r19, r25
    52b4:	3c f4       	brge	.+14     	; 0x52c4 <fputc+0x46>
    52b6:	e8 81       	ld	r30, Y
    52b8:	f9 81       	ldd	r31, Y+1	; 0x01
    52ba:	cf 01       	movw	r24, r30
    52bc:	01 96       	adiw	r24, 0x01	; 1
    52be:	88 83       	st	Y, r24
    52c0:	99 83       	std	Y+1, r25	; 0x01
    52c2:	10 83       	st	Z, r17
    52c4:	8e 81       	ldd	r24, Y+6	; 0x06
    52c6:	9f 81       	ldd	r25, Y+7	; 0x07
    52c8:	01 96       	adiw	r24, 0x01	; 1
    52ca:	8e 83       	std	Y+6, r24	; 0x06
    52cc:	9f 83       	std	Y+7, r25	; 0x07
    52ce:	e3 cf       	rjmp	.-58     	; 0x5296 <fputc+0x18>
    52d0:	e8 85       	ldd	r30, Y+8	; 0x08
    52d2:	f9 85       	ldd	r31, Y+9	; 0x09
    52d4:	81 2f       	mov	r24, r17
    52d6:	09 95       	icall
    52d8:	89 2b       	or	r24, r25
    52da:	a1 f3       	breq	.-24     	; 0x52c4 <fputc+0x46>
    52dc:	da cf       	rjmp	.-76     	; 0x5292 <fputc+0x14>

000052de <vfprintf_P>:
vfprintf_P():
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	ec 01       	movw	r28, r24
    52e4:	8b 81       	ldd	r24, Y+3	; 0x03
    52e6:	88 60       	ori	r24, 0x08	; 8
    52e8:	8b 83       	std	Y+3, r24	; 0x03
    52ea:	ce 01       	movw	r24, r28
    52ec:	0e 94 63 21 	call	0x42c6	; 0x42c6 <vfprintf>
    52f0:	2b 81       	ldd	r18, Y+3	; 0x03
    52f2:	27 7f       	andi	r18, 0xF7	; 247
    52f4:	2b 83       	std	Y+3, r18	; 0x03
    52f6:	df 91       	pop	r29
    52f8:	cf 91       	pop	r28
    52fa:	08 95       	ret

000052fc <__ultoa_invert>:
__ultoa_invert():
    52fc:	fa 01       	movw	r30, r20
    52fe:	aa 27       	eor	r26, r26
    5300:	28 30       	cpi	r18, 0x08	; 8
    5302:	51 f1       	breq	.+84     	; 0x5358 <__ultoa_invert+0x5c>
    5304:	20 31       	cpi	r18, 0x10	; 16
    5306:	81 f1       	breq	.+96     	; 0x5368 <__ultoa_invert+0x6c>
    5308:	e8 94       	clt
    530a:	6f 93       	push	r22
    530c:	6e 7f       	andi	r22, 0xFE	; 254
    530e:	6e 5f       	subi	r22, 0xFE	; 254
    5310:	7f 4f       	sbci	r23, 0xFF	; 255
    5312:	8f 4f       	sbci	r24, 0xFF	; 255
    5314:	9f 4f       	sbci	r25, 0xFF	; 255
    5316:	af 4f       	sbci	r26, 0xFF	; 255
    5318:	b1 e0       	ldi	r27, 0x01	; 1
    531a:	3e d0       	rcall	.+124    	; 0x5398 <__ultoa_invert+0x9c>
    531c:	b4 e0       	ldi	r27, 0x04	; 4
    531e:	3c d0       	rcall	.+120    	; 0x5398 <__ultoa_invert+0x9c>
    5320:	67 0f       	add	r22, r23
    5322:	78 1f       	adc	r23, r24
    5324:	89 1f       	adc	r24, r25
    5326:	9a 1f       	adc	r25, r26
    5328:	a1 1d       	adc	r26, r1
    532a:	68 0f       	add	r22, r24
    532c:	79 1f       	adc	r23, r25
    532e:	8a 1f       	adc	r24, r26
    5330:	91 1d       	adc	r25, r1
    5332:	a1 1d       	adc	r26, r1
    5334:	6a 0f       	add	r22, r26
    5336:	71 1d       	adc	r23, r1
    5338:	81 1d       	adc	r24, r1
    533a:	91 1d       	adc	r25, r1
    533c:	a1 1d       	adc	r26, r1
    533e:	20 d0       	rcall	.+64     	; 0x5380 <__ultoa_invert+0x84>
    5340:	09 f4       	brne	.+2      	; 0x5344 <__ultoa_invert+0x48>
    5342:	68 94       	set
    5344:	3f 91       	pop	r19
    5346:	2a e0       	ldi	r18, 0x0A	; 10
    5348:	26 9f       	mul	r18, r22
    534a:	11 24       	eor	r1, r1
    534c:	30 19       	sub	r19, r0
    534e:	30 5d       	subi	r19, 0xD0	; 208
    5350:	31 93       	st	Z+, r19
    5352:	de f6       	brtc	.-74     	; 0x530a <__ultoa_invert+0xe>
    5354:	cf 01       	movw	r24, r30
    5356:	08 95       	ret
    5358:	46 2f       	mov	r20, r22
    535a:	47 70       	andi	r20, 0x07	; 7
    535c:	40 5d       	subi	r20, 0xD0	; 208
    535e:	41 93       	st	Z+, r20
    5360:	b3 e0       	ldi	r27, 0x03	; 3
    5362:	0f d0       	rcall	.+30     	; 0x5382 <__ultoa_invert+0x86>
    5364:	c9 f7       	brne	.-14     	; 0x5358 <__ultoa_invert+0x5c>
    5366:	f6 cf       	rjmp	.-20     	; 0x5354 <__ultoa_invert+0x58>
    5368:	46 2f       	mov	r20, r22
    536a:	4f 70       	andi	r20, 0x0F	; 15
    536c:	40 5d       	subi	r20, 0xD0	; 208
    536e:	4a 33       	cpi	r20, 0x3A	; 58
    5370:	18 f0       	brcs	.+6      	; 0x5378 <__ultoa_invert+0x7c>
    5372:	49 5d       	subi	r20, 0xD9	; 217
    5374:	31 fd       	sbrc	r19, 1
    5376:	40 52       	subi	r20, 0x20	; 32
    5378:	41 93       	st	Z+, r20
    537a:	02 d0       	rcall	.+4      	; 0x5380 <__ultoa_invert+0x84>
    537c:	a9 f7       	brne	.-22     	; 0x5368 <__ultoa_invert+0x6c>
    537e:	ea cf       	rjmp	.-44     	; 0x5354 <__ultoa_invert+0x58>
    5380:	b4 e0       	ldi	r27, 0x04	; 4
    5382:	a6 95       	lsr	r26
    5384:	97 95       	ror	r25
    5386:	87 95       	ror	r24
    5388:	77 95       	ror	r23
    538a:	67 95       	ror	r22
    538c:	ba 95       	dec	r27
    538e:	c9 f7       	brne	.-14     	; 0x5382 <__ultoa_invert+0x86>
    5390:	00 97       	sbiw	r24, 0x00	; 0
    5392:	61 05       	cpc	r22, r1
    5394:	71 05       	cpc	r23, r1
    5396:	08 95       	ret
    5398:	9b 01       	movw	r18, r22
    539a:	ac 01       	movw	r20, r24
    539c:	0a 2e       	mov	r0, r26
    539e:	06 94       	lsr	r0
    53a0:	57 95       	ror	r21
    53a2:	47 95       	ror	r20
    53a4:	37 95       	ror	r19
    53a6:	27 95       	ror	r18
    53a8:	ba 95       	dec	r27
    53aa:	c9 f7       	brne	.-14     	; 0x539e <__ultoa_invert+0xa2>
    53ac:	62 0f       	add	r22, r18
    53ae:	73 1f       	adc	r23, r19
    53b0:	84 1f       	adc	r24, r20
    53b2:	95 1f       	adc	r25, r21
    53b4:	a0 1d       	adc	r26, r0
    53b6:	08 95       	ret

000053b8 <isspace>:
isspace():
    53b8:	91 11       	cpse	r25, r1
    53ba:	de c0       	rjmp	.+444    	; 0x5578 <__ctype_isfalse>
    53bc:	80 32       	cpi	r24, 0x20	; 32
    53be:	19 f0       	breq	.+6      	; 0x53c6 <isspace+0xe>
    53c0:	89 50       	subi	r24, 0x09	; 9
    53c2:	85 50       	subi	r24, 0x05	; 5
    53c4:	d0 f7       	brcc	.-12     	; 0x53ba <isspace+0x2>
    53c6:	08 95       	ret

000053c8 <strrev>:
strrev():
    53c8:	dc 01       	movw	r26, r24
    53ca:	fc 01       	movw	r30, r24
    53cc:	67 2f       	mov	r22, r23
    53ce:	71 91       	ld	r23, Z+
    53d0:	77 23       	and	r23, r23
    53d2:	e1 f7       	brne	.-8      	; 0x53cc <strrev+0x4>
    53d4:	32 97       	sbiw	r30, 0x02	; 2
    53d6:	04 c0       	rjmp	.+8      	; 0x53e0 <strrev+0x18>
    53d8:	7c 91       	ld	r23, X
    53da:	6d 93       	st	X+, r22
    53dc:	70 83       	st	Z, r23
    53de:	62 91       	ld	r22, -Z
    53e0:	ae 17       	cp	r26, r30
    53e2:	bf 07       	cpc	r27, r31
    53e4:	c8 f3       	brcs	.-14     	; 0x53d8 <strrev+0x10>
    53e6:	08 95       	ret

000053e8 <__cmpsf2>:
__cmpsf2():
    53e8:	40 d0       	rcall	.+128    	; 0x546a <__fp_cmp>
    53ea:	08 f4       	brcc	.+2      	; 0x53ee <__cmpsf2+0x6>
    53ec:	81 e0       	ldi	r24, 0x01	; 1
    53ee:	08 95       	ret

000053f0 <__floatunsisf>:
__floatunsisf():
    53f0:	e8 94       	clt
    53f2:	09 c0       	rjmp	.+18     	; 0x5406 <__floatsisf+0x12>

000053f4 <__floatsisf>:
    53f4:	97 fb       	bst	r25, 7
    53f6:	3e f4       	brtc	.+14     	; 0x5406 <__floatsisf+0x12>
    53f8:	90 95       	com	r25
    53fa:	80 95       	com	r24
    53fc:	70 95       	com	r23
    53fe:	61 95       	neg	r22
    5400:	7f 4f       	sbci	r23, 0xFF	; 255
    5402:	8f 4f       	sbci	r24, 0xFF	; 255
    5404:	9f 4f       	sbci	r25, 0xFF	; 255
    5406:	99 23       	and	r25, r25
    5408:	a9 f0       	breq	.+42     	; 0x5434 <__floatsisf+0x40>
    540a:	f9 2f       	mov	r31, r25
    540c:	96 e9       	ldi	r25, 0x96	; 150
    540e:	bb 27       	eor	r27, r27
    5410:	93 95       	inc	r25
    5412:	f6 95       	lsr	r31
    5414:	87 95       	ror	r24
    5416:	77 95       	ror	r23
    5418:	67 95       	ror	r22
    541a:	b7 95       	ror	r27
    541c:	f1 11       	cpse	r31, r1
    541e:	f8 cf       	rjmp	.-16     	; 0x5410 <__floatsisf+0x1c>
    5420:	fa f4       	brpl	.+62     	; 0x5460 <__floatsisf+0x6c>
    5422:	bb 0f       	add	r27, r27
    5424:	11 f4       	brne	.+4      	; 0x542a <__floatsisf+0x36>
    5426:	60 ff       	sbrs	r22, 0
    5428:	1b c0       	rjmp	.+54     	; 0x5460 <__floatsisf+0x6c>
    542a:	6f 5f       	subi	r22, 0xFF	; 255
    542c:	7f 4f       	sbci	r23, 0xFF	; 255
    542e:	8f 4f       	sbci	r24, 0xFF	; 255
    5430:	9f 4f       	sbci	r25, 0xFF	; 255
    5432:	16 c0       	rjmp	.+44     	; 0x5460 <__floatsisf+0x6c>
    5434:	88 23       	and	r24, r24
    5436:	11 f0       	breq	.+4      	; 0x543c <__floatsisf+0x48>
    5438:	96 e9       	ldi	r25, 0x96	; 150
    543a:	11 c0       	rjmp	.+34     	; 0x545e <__floatsisf+0x6a>
    543c:	77 23       	and	r23, r23
    543e:	21 f0       	breq	.+8      	; 0x5448 <__floatsisf+0x54>
    5440:	9e e8       	ldi	r25, 0x8E	; 142
    5442:	87 2f       	mov	r24, r23
    5444:	76 2f       	mov	r23, r22
    5446:	05 c0       	rjmp	.+10     	; 0x5452 <__floatsisf+0x5e>
    5448:	66 23       	and	r22, r22
    544a:	71 f0       	breq	.+28     	; 0x5468 <__floatsisf+0x74>
    544c:	96 e8       	ldi	r25, 0x86	; 134
    544e:	86 2f       	mov	r24, r22
    5450:	70 e0       	ldi	r23, 0x00	; 0
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	2a f0       	brmi	.+10     	; 0x5460 <__floatsisf+0x6c>
    5456:	9a 95       	dec	r25
    5458:	66 0f       	add	r22, r22
    545a:	77 1f       	adc	r23, r23
    545c:	88 1f       	adc	r24, r24
    545e:	da f7       	brpl	.-10     	; 0x5456 <__floatsisf+0x62>
    5460:	88 0f       	add	r24, r24
    5462:	96 95       	lsr	r25
    5464:	87 95       	ror	r24
    5466:	97 f9       	bld	r25, 7
    5468:	08 95       	ret

0000546a <__fp_cmp>:
__fp_cmp():
    546a:	99 0f       	add	r25, r25
    546c:	00 08       	sbc	r0, r0
    546e:	55 0f       	add	r21, r21
    5470:	aa 0b       	sbc	r26, r26
    5472:	e0 e8       	ldi	r30, 0x80	; 128
    5474:	fe ef       	ldi	r31, 0xFE	; 254
    5476:	16 16       	cp	r1, r22
    5478:	17 06       	cpc	r1, r23
    547a:	e8 07       	cpc	r30, r24
    547c:	f9 07       	cpc	r31, r25
    547e:	c0 f0       	brcs	.+48     	; 0x54b0 <__fp_cmp+0x46>
    5480:	12 16       	cp	r1, r18
    5482:	13 06       	cpc	r1, r19
    5484:	e4 07       	cpc	r30, r20
    5486:	f5 07       	cpc	r31, r21
    5488:	98 f0       	brcs	.+38     	; 0x54b0 <__fp_cmp+0x46>
    548a:	62 1b       	sub	r22, r18
    548c:	73 0b       	sbc	r23, r19
    548e:	84 0b       	sbc	r24, r20
    5490:	95 0b       	sbc	r25, r21
    5492:	39 f4       	brne	.+14     	; 0x54a2 <__fp_cmp+0x38>
    5494:	0a 26       	eor	r0, r26
    5496:	61 f0       	breq	.+24     	; 0x54b0 <__fp_cmp+0x46>
    5498:	23 2b       	or	r18, r19
    549a:	24 2b       	or	r18, r20
    549c:	25 2b       	or	r18, r21
    549e:	21 f4       	brne	.+8      	; 0x54a8 <__fp_cmp+0x3e>
    54a0:	08 95       	ret
    54a2:	0a 26       	eor	r0, r26
    54a4:	09 f4       	brne	.+2      	; 0x54a8 <__fp_cmp+0x3e>
    54a6:	a1 40       	sbci	r26, 0x01	; 1
    54a8:	a6 95       	lsr	r26
    54aa:	8f ef       	ldi	r24, 0xFF	; 255
    54ac:	81 1d       	adc	r24, r1
    54ae:	81 1d       	adc	r24, r1
    54b0:	08 95       	ret

000054b2 <__mulsf3>:
__mulsf3():
    54b2:	0b d0       	rcall	.+22     	; 0x54ca <__mulsf3x>
    54b4:	7b c0       	rjmp	.+246    	; 0x55ac <__fp_round>
    54b6:	6c d0       	rcall	.+216    	; 0x5590 <__fp_pscA>
    54b8:	28 f0       	brcs	.+10     	; 0x54c4 <__mulsf3+0x12>
    54ba:	71 d0       	rcall	.+226    	; 0x559e <__fp_pscB>
    54bc:	18 f0       	brcs	.+6      	; 0x54c4 <__mulsf3+0x12>
    54be:	95 23       	and	r25, r21
    54c0:	09 f0       	breq	.+2      	; 0x54c4 <__mulsf3+0x12>
    54c2:	5d c0       	rjmp	.+186    	; 0x557e <__fp_inf>
    54c4:	62 c0       	rjmp	.+196    	; 0x558a <__fp_nan>
    54c6:	11 24       	eor	r1, r1
    54c8:	a5 c0       	rjmp	.+330    	; 0x5614 <__fp_szero>

000054ca <__mulsf3x>:
__mulsf3x():
    54ca:	81 d0       	rcall	.+258    	; 0x55ce <__fp_split3>
    54cc:	a0 f3       	brcs	.-24     	; 0x54b6 <__mulsf3+0x4>

000054ce <__mulsf3_pse>:
    54ce:	95 9f       	mul	r25, r21
    54d0:	d1 f3       	breq	.-12     	; 0x54c6 <__mulsf3+0x14>
    54d2:	95 0f       	add	r25, r21
    54d4:	50 e0       	ldi	r21, 0x00	; 0
    54d6:	55 1f       	adc	r21, r21
    54d8:	62 9f       	mul	r22, r18
    54da:	f0 01       	movw	r30, r0
    54dc:	72 9f       	mul	r23, r18
    54de:	bb 27       	eor	r27, r27
    54e0:	f0 0d       	add	r31, r0
    54e2:	b1 1d       	adc	r27, r1
    54e4:	63 9f       	mul	r22, r19
    54e6:	aa 27       	eor	r26, r26
    54e8:	f0 0d       	add	r31, r0
    54ea:	b1 1d       	adc	r27, r1
    54ec:	aa 1f       	adc	r26, r26
    54ee:	64 9f       	mul	r22, r20
    54f0:	66 27       	eor	r22, r22
    54f2:	b0 0d       	add	r27, r0
    54f4:	a1 1d       	adc	r26, r1
    54f6:	66 1f       	adc	r22, r22
    54f8:	82 9f       	mul	r24, r18
    54fa:	22 27       	eor	r18, r18
    54fc:	b0 0d       	add	r27, r0
    54fe:	a1 1d       	adc	r26, r1
    5500:	62 1f       	adc	r22, r18
    5502:	73 9f       	mul	r23, r19
    5504:	b0 0d       	add	r27, r0
    5506:	a1 1d       	adc	r26, r1
    5508:	62 1f       	adc	r22, r18
    550a:	83 9f       	mul	r24, r19
    550c:	a0 0d       	add	r26, r0
    550e:	61 1d       	adc	r22, r1
    5510:	22 1f       	adc	r18, r18
    5512:	74 9f       	mul	r23, r20
    5514:	33 27       	eor	r19, r19
    5516:	a0 0d       	add	r26, r0
    5518:	61 1d       	adc	r22, r1
    551a:	23 1f       	adc	r18, r19
    551c:	84 9f       	mul	r24, r20
    551e:	60 0d       	add	r22, r0
    5520:	21 1d       	adc	r18, r1
    5522:	82 2f       	mov	r24, r18
    5524:	76 2f       	mov	r23, r22
    5526:	6a 2f       	mov	r22, r26
    5528:	11 24       	eor	r1, r1
    552a:	9f 57       	subi	r25, 0x7F	; 127
    552c:	50 40       	sbci	r21, 0x00	; 0
    552e:	8a f0       	brmi	.+34     	; 0x5552 <__mulsf3_pse+0x84>
    5530:	e1 f0       	breq	.+56     	; 0x556a <__mulsf3_pse+0x9c>
    5532:	88 23       	and	r24, r24
    5534:	4a f0       	brmi	.+18     	; 0x5548 <__mulsf3_pse+0x7a>
    5536:	ee 0f       	add	r30, r30
    5538:	ff 1f       	adc	r31, r31
    553a:	bb 1f       	adc	r27, r27
    553c:	66 1f       	adc	r22, r22
    553e:	77 1f       	adc	r23, r23
    5540:	88 1f       	adc	r24, r24
    5542:	91 50       	subi	r25, 0x01	; 1
    5544:	50 40       	sbci	r21, 0x00	; 0
    5546:	a9 f7       	brne	.-22     	; 0x5532 <__mulsf3_pse+0x64>
    5548:	9e 3f       	cpi	r25, 0xFE	; 254
    554a:	51 05       	cpc	r21, r1
    554c:	70 f0       	brcs	.+28     	; 0x556a <__mulsf3_pse+0x9c>
    554e:	17 c0       	rjmp	.+46     	; 0x557e <__fp_inf>
    5550:	61 c0       	rjmp	.+194    	; 0x5614 <__fp_szero>
    5552:	5f 3f       	cpi	r21, 0xFF	; 255
    5554:	ec f3       	brlt	.-6      	; 0x5550 <__mulsf3_pse+0x82>
    5556:	98 3e       	cpi	r25, 0xE8	; 232
    5558:	dc f3       	brlt	.-10     	; 0x5550 <__mulsf3_pse+0x82>
    555a:	86 95       	lsr	r24
    555c:	77 95       	ror	r23
    555e:	67 95       	ror	r22
    5560:	b7 95       	ror	r27
    5562:	f7 95       	ror	r31
    5564:	e7 95       	ror	r30
    5566:	9f 5f       	subi	r25, 0xFF	; 255
    5568:	c1 f7       	brne	.-16     	; 0x555a <__mulsf3_pse+0x8c>
    556a:	fe 2b       	or	r31, r30
    556c:	88 0f       	add	r24, r24
    556e:	91 1d       	adc	r25, r1
    5570:	96 95       	lsr	r25
    5572:	87 95       	ror	r24
    5574:	97 f9       	bld	r25, 7
    5576:	08 95       	ret

00005578 <__ctype_isfalse>:
    5578:	99 27       	eor	r25, r25
    557a:	88 27       	eor	r24, r24

0000557c <__ctype_istrue>:
    557c:	08 95       	ret

0000557e <__fp_inf>:
    557e:	97 f9       	bld	r25, 7
    5580:	9f 67       	ori	r25, 0x7F	; 127
    5582:	80 e8       	ldi	r24, 0x80	; 128
    5584:	70 e0       	ldi	r23, 0x00	; 0
    5586:	60 e0       	ldi	r22, 0x00	; 0
    5588:	08 95       	ret

0000558a <__fp_nan>:
    558a:	9f ef       	ldi	r25, 0xFF	; 255
    558c:	80 ec       	ldi	r24, 0xC0	; 192
    558e:	08 95       	ret

00005590 <__fp_pscA>:
    5590:	00 24       	eor	r0, r0
    5592:	0a 94       	dec	r0
    5594:	16 16       	cp	r1, r22
    5596:	17 06       	cpc	r1, r23
    5598:	18 06       	cpc	r1, r24
    559a:	09 06       	cpc	r0, r25
__fp_pscA():
    559c:	08 95       	ret

0000559e <__fp_pscB>:
__fp_pscB():
    559e:	00 24       	eor	r0, r0
    55a0:	0a 94       	dec	r0
    55a2:	12 16       	cp	r1, r18
    55a4:	13 06       	cpc	r1, r19
    55a6:	14 06       	cpc	r1, r20
    55a8:	05 06       	cpc	r0, r21
    55aa:	08 95       	ret

000055ac <__fp_round>:
__fp_round():
    55ac:	09 2e       	mov	r0, r25
    55ae:	03 94       	inc	r0
    55b0:	00 0c       	add	r0, r0
    55b2:	11 f4       	brne	.+4      	; 0x55b8 <__fp_round+0xc>
    55b4:	88 23       	and	r24, r24
    55b6:	52 f0       	brmi	.+20     	; 0x55cc <__fp_round+0x20>
    55b8:	bb 0f       	add	r27, r27
    55ba:	40 f4       	brcc	.+16     	; 0x55cc <__fp_round+0x20>
    55bc:	bf 2b       	or	r27, r31
    55be:	11 f4       	brne	.+4      	; 0x55c4 <__fp_round+0x18>
    55c0:	60 ff       	sbrs	r22, 0
    55c2:	04 c0       	rjmp	.+8      	; 0x55cc <__fp_round+0x20>
    55c4:	6f 5f       	subi	r22, 0xFF	; 255
    55c6:	7f 4f       	sbci	r23, 0xFF	; 255
    55c8:	8f 4f       	sbci	r24, 0xFF	; 255
    55ca:	9f 4f       	sbci	r25, 0xFF	; 255
    55cc:	08 95       	ret

000055ce <__fp_split3>:
__fp_split3():
    55ce:	57 fd       	sbrc	r21, 7
    55d0:	90 58       	subi	r25, 0x80	; 128
    55d2:	44 0f       	add	r20, r20
    55d4:	55 1f       	adc	r21, r21
    55d6:	59 f0       	breq	.+22     	; 0x55ee <__fp_splitA+0x10>
    55d8:	5f 3f       	cpi	r21, 0xFF	; 255
    55da:	71 f0       	breq	.+28     	; 0x55f8 <__fp_splitA+0x1a>
    55dc:	47 95       	ror	r20

000055de <__fp_splitA>:
    55de:	88 0f       	add	r24, r24
    55e0:	97 fb       	bst	r25, 7
    55e2:	99 1f       	adc	r25, r25
    55e4:	61 f0       	breq	.+24     	; 0x55fe <__fp_splitA+0x20>
    55e6:	9f 3f       	cpi	r25, 0xFF	; 255
    55e8:	79 f0       	breq	.+30     	; 0x5608 <__fp_splitA+0x2a>
    55ea:	87 95       	ror	r24
    55ec:	08 95       	ret
    55ee:	12 16       	cp	r1, r18
    55f0:	13 06       	cpc	r1, r19
    55f2:	14 06       	cpc	r1, r20
    55f4:	55 1f       	adc	r21, r21
    55f6:	f2 cf       	rjmp	.-28     	; 0x55dc <__fp_split3+0xe>
    55f8:	46 95       	lsr	r20
    55fa:	f1 df       	rcall	.-30     	; 0x55de <__fp_splitA>
    55fc:	08 c0       	rjmp	.+16     	; 0x560e <__fp_splitA+0x30>
    55fe:	16 16       	cp	r1, r22
    5600:	17 06       	cpc	r1, r23
    5602:	18 06       	cpc	r1, r24
    5604:	99 1f       	adc	r25, r25
    5606:	f1 cf       	rjmp	.-30     	; 0x55ea <__fp_splitA+0xc>
    5608:	86 95       	lsr	r24
    560a:	71 05       	cpc	r23, r1
    560c:	61 05       	cpc	r22, r1
    560e:	08 94       	sec
    5610:	08 95       	ret

00005612 <__fp_zero>:
__fp_zero():
    5612:	e8 94       	clt

00005614 <__fp_szero>:
    5614:	bb 27       	eor	r27, r27
    5616:	66 27       	eor	r22, r22
    5618:	77 27       	eor	r23, r23
    561a:	cb 01       	movw	r24, r22
    561c:	97 f9       	bld	r25, 7
    561e:	08 95       	ret

00005620 <__muluhisi3>:
__muluhisi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5620:	09 d0       	rcall	.+18     	; 0x5634 <__umulhisi3>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5622:	a5 9f       	mul	r26, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5624:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    5626:	b4 9f       	mul	r27, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    5628:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    562a:	a4 9f       	mul	r26, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    562c:	80 0d       	add	r24, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    562e:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5630:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5632:	08 95       	ret

00005634 <__umulhisi3>:
__umulhisi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5634:	a2 9f       	mul	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5636:	b0 01       	movw	r22, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5638:	b3 9f       	mul	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    563a:	c0 01       	movw	r24, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    563c:	a3 9f       	mul	r26, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    563e:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5640:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5642:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5644:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    5646:	b2 9f       	mul	r27, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    5648:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    564a:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    564c:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    564e:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5650:	08 95       	ret

00005652 <__subsf3>:
__subsf3():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:822
    5652:	50 58       	subi	r21, 0x80	; 128

00005654 <__addsf3>:
    5654:	bb 27       	eor	r27, r27
    5656:	aa 27       	eor	r26, r26
    5658:	0e d0       	rcall	.+28     	; 0x5676 <__addsf3x>
    565a:	a8 cf       	rjmp	.-176    	; 0x55ac <__fp_round>
__addsf3():
    565c:	99 df       	rcall	.-206    	; 0x5590 <__fp_pscA>
    565e:	30 f0       	brcs	.+12     	; 0x566c <__addsf3+0x18>
    5660:	9e df       	rcall	.-196    	; 0x559e <__fp_pscB>
    5662:	20 f0       	brcs	.+8      	; 0x566c <__addsf3+0x18>
    5664:	31 f4       	brne	.+12     	; 0x5672 <__addsf3+0x1e>
    5666:	9f 3f       	cpi	r25, 0xFF	; 255
    5668:	11 f4       	brne	.+4      	; 0x566e <__addsf3+0x1a>
    566a:	1e f4       	brtc	.+6      	; 0x5672 <__addsf3+0x1e>
    566c:	8e cf       	rjmp	.-228    	; 0x558a <__fp_nan>
    566e:	0e f4       	brtc	.+2      	; 0x5672 <__addsf3+0x1e>
    5670:	e0 95       	com	r30
    5672:	e7 fb       	bst	r30, 7
    5674:	84 cf       	rjmp	.-248    	; 0x557e <__fp_inf>

00005676 <__addsf3x>:
__addsf3x():
    5676:	e9 2f       	mov	r30, r25
    5678:	aa df       	rcall	.-172    	; 0x55ce <__fp_split3>
    567a:	80 f3       	brcs	.-32     	; 0x565c <__addsf3+0x8>
    567c:	ba 17       	cp	r27, r26
    567e:	62 07       	cpc	r22, r18
    5680:	73 07       	cpc	r23, r19
    5682:	84 07       	cpc	r24, r20
    5684:	95 07       	cpc	r25, r21
    5686:	18 f0       	brcs	.+6      	; 0x568e <__addsf3x+0x18>
    5688:	71 f4       	brne	.+28     	; 0x56a6 <__addsf3x+0x30>
    568a:	9e f5       	brtc	.+102    	; 0x56f2 <__addsf3x+0x7c>
    568c:	c2 cf       	rjmp	.-124    	; 0x5612 <__fp_zero>
    568e:	0e f4       	brtc	.+2      	; 0x5692 <__addsf3x+0x1c>
    5690:	e0 95       	com	r30
    5692:	0b 2e       	mov	r0, r27
    5694:	ba 2f       	mov	r27, r26
    5696:	a0 2d       	mov	r26, r0
    5698:	0b 01       	movw	r0, r22
    569a:	b9 01       	movw	r22, r18
    569c:	90 01       	movw	r18, r0
    569e:	0c 01       	movw	r0, r24
    56a0:	ca 01       	movw	r24, r20
    56a2:	a0 01       	movw	r20, r0
    56a4:	11 24       	eor	r1, r1
    56a6:	ff 27       	eor	r31, r31
    56a8:	59 1b       	sub	r21, r25
    56aa:	99 f0       	breq	.+38     	; 0x56d2 <__addsf3x+0x5c>
    56ac:	59 3f       	cpi	r21, 0xF9	; 249
    56ae:	50 f4       	brcc	.+20     	; 0x56c4 <__addsf3x+0x4e>
    56b0:	50 3e       	cpi	r21, 0xE0	; 224
    56b2:	68 f1       	brcs	.+90     	; 0x570e <__addsf3x+0x98>
    56b4:	1a 16       	cp	r1, r26
    56b6:	f0 40       	sbci	r31, 0x00	; 0
    56b8:	a2 2f       	mov	r26, r18
    56ba:	23 2f       	mov	r18, r19
    56bc:	34 2f       	mov	r19, r20
    56be:	44 27       	eor	r20, r20
    56c0:	58 5f       	subi	r21, 0xF8	; 248
    56c2:	f3 cf       	rjmp	.-26     	; 0x56aa <__addsf3x+0x34>
    56c4:	46 95       	lsr	r20
    56c6:	37 95       	ror	r19
    56c8:	27 95       	ror	r18
    56ca:	a7 95       	ror	r26
    56cc:	f0 40       	sbci	r31, 0x00	; 0
    56ce:	53 95       	inc	r21
    56d0:	c9 f7       	brne	.-14     	; 0x56c4 <__addsf3x+0x4e>
    56d2:	7e f4       	brtc	.+30     	; 0x56f2 <__addsf3x+0x7c>
    56d4:	1f 16       	cp	r1, r31
    56d6:	ba 0b       	sbc	r27, r26
    56d8:	62 0b       	sbc	r22, r18
    56da:	73 0b       	sbc	r23, r19
    56dc:	84 0b       	sbc	r24, r20
    56de:	ba f0       	brmi	.+46     	; 0x570e <__addsf3x+0x98>
    56e0:	91 50       	subi	r25, 0x01	; 1
    56e2:	a1 f0       	breq	.+40     	; 0x570c <__addsf3x+0x96>
    56e4:	ff 0f       	add	r31, r31
    56e6:	bb 1f       	adc	r27, r27
    56e8:	66 1f       	adc	r22, r22
    56ea:	77 1f       	adc	r23, r23
    56ec:	88 1f       	adc	r24, r24
    56ee:	c2 f7       	brpl	.-16     	; 0x56e0 <__addsf3x+0x6a>
    56f0:	0e c0       	rjmp	.+28     	; 0x570e <__addsf3x+0x98>
    56f2:	ba 0f       	add	r27, r26
    56f4:	62 1f       	adc	r22, r18
    56f6:	73 1f       	adc	r23, r19
    56f8:	84 1f       	adc	r24, r20
    56fa:	48 f4       	brcc	.+18     	; 0x570e <__addsf3x+0x98>
    56fc:	87 95       	ror	r24
    56fe:	77 95       	ror	r23
    5700:	67 95       	ror	r22
    5702:	b7 95       	ror	r27
    5704:	f7 95       	ror	r31
    5706:	9e 3f       	cpi	r25, 0xFE	; 254
    5708:	08 f0       	brcs	.+2      	; 0x570c <__addsf3x+0x96>
    570a:	b3 cf       	rjmp	.-154    	; 0x5672 <__addsf3+0x1e>
    570c:	93 95       	inc	r25
    570e:	88 0f       	add	r24, r24
    5710:	08 f0       	brcs	.+2      	; 0x5714 <__addsf3x+0x9e>
    5712:	99 27       	eor	r25, r25
    5714:	ee 0f       	add	r30, r30
    5716:	97 95       	ror	r25
    5718:	87 95       	ror	r24
    571a:	08 95       	ret
    571c:	11 f4       	brne	.+4      	; 0x5722 <__addsf3x+0xac>
    571e:	0e f4       	brtc	.+2      	; 0x5722 <__addsf3x+0xac>
    5720:	34 cf       	rjmp	.-408    	; 0x558a <__fp_nan>
    5722:	3e c0       	rjmp	.+124    	; 0x57a0 <__fp_mpack>

00005724 <sqrt>:
    5724:	5c df       	rcall	.-328    	; 0x55de <__fp_splitA>
    5726:	d0 f3       	brcs	.-12     	; 0x571c <__addsf3x+0xa6>
    5728:	99 23       	and	r25, r25
    572a:	d9 f3       	breq	.-10     	; 0x5722 <__addsf3x+0xac>
    572c:	ce f3       	brts	.-14     	; 0x5720 <__addsf3x+0xaa>
    572e:	9f 57       	subi	r25, 0x7F	; 127
    5730:	55 0b       	sbc	r21, r21
    5732:	87 ff       	sbrs	r24, 7
    5734:	43 d0       	rcall	.+134    	; 0x57bc <__fp_norm2>
    5736:	00 24       	eor	r0, r0
    5738:	a0 e6       	ldi	r26, 0x60	; 96
    573a:	40 ea       	ldi	r20, 0xA0	; 160
    573c:	90 01       	movw	r18, r0
    573e:	80 58       	subi	r24, 0x80	; 128
    5740:	56 95       	lsr	r21
sqrt():
    5742:	97 95       	ror	r25
    5744:	28 f4       	brcc	.+10     	; 0x5750 <sqrt+0x2c>
    5746:	80 5c       	subi	r24, 0xC0	; 192
    5748:	66 0f       	add	r22, r22
    574a:	77 1f       	adc	r23, r23
    574c:	88 1f       	adc	r24, r24
    574e:	20 f0       	brcs	.+8      	; 0x5758 <sqrt+0x34>
    5750:	26 17       	cp	r18, r22
    5752:	37 07       	cpc	r19, r23
    5754:	48 07       	cpc	r20, r24
    5756:	30 f4       	brcc	.+12     	; 0x5764 <sqrt+0x40>
    5758:	62 1b       	sub	r22, r18
    575a:	73 0b       	sbc	r23, r19
    575c:	84 0b       	sbc	r24, r20
    575e:	20 29       	or	r18, r0
    5760:	31 29       	or	r19, r1
    5762:	4a 2b       	or	r20, r26
    5764:	a6 95       	lsr	r26
    5766:	17 94       	ror	r1
    5768:	07 94       	ror	r0
    576a:	20 25       	eor	r18, r0
    576c:	31 25       	eor	r19, r1
    576e:	4a 27       	eor	r20, r26
    5770:	58 f7       	brcc	.-42     	; 0x5748 <sqrt+0x24>
    5772:	66 0f       	add	r22, r22
    5774:	77 1f       	adc	r23, r23
    5776:	88 1f       	adc	r24, r24
    5778:	20 f0       	brcs	.+8      	; 0x5782 <sqrt+0x5e>
    577a:	26 17       	cp	r18, r22
    577c:	37 07       	cpc	r19, r23
    577e:	48 07       	cpc	r20, r24
    5780:	30 f4       	brcc	.+12     	; 0x578e <sqrt+0x6a>
    5782:	62 0b       	sbc	r22, r18
    5784:	73 0b       	sbc	r23, r19
    5786:	84 0b       	sbc	r24, r20
    5788:	20 0d       	add	r18, r0
    578a:	31 1d       	adc	r19, r1
    578c:	41 1d       	adc	r20, r1
    578e:	a0 95       	com	r26
    5790:	81 f7       	brne	.-32     	; 0x5772 <sqrt+0x4e>
    5792:	b9 01       	movw	r22, r18
    5794:	84 2f       	mov	r24, r20
    5796:	91 58       	subi	r25, 0x81	; 129
    5798:	88 0f       	add	r24, r24
    579a:	96 95       	lsr	r25
    579c:	87 95       	ror	r24
    579e:	08 95       	ret

000057a0 <__fp_mpack>:
    57a0:	9f 3f       	cpi	r25, 0xFF	; 255
    57a2:	31 f0       	breq	.+12     	; 0x57b0 <__fp_mpack_finite+0xc>

000057a4 <__fp_mpack_finite>:
    57a4:	91 50       	subi	r25, 0x01	; 1
    57a6:	20 f4       	brcc	.+8      	; 0x57b0 <__fp_mpack_finite+0xc>
    57a8:	87 95       	ror	r24
    57aa:	77 95       	ror	r23
    57ac:	67 95       	ror	r22
    57ae:	b7 95       	ror	r27
__fp_mpack_finite():
    57b0:	88 0f       	add	r24, r24
    57b2:	91 1d       	adc	r25, r1
    57b4:	96 95       	lsr	r25
    57b6:	87 95       	ror	r24
    57b8:	97 f9       	bld	r25, 7
    57ba:	08 95       	ret

000057bc <__fp_norm2>:
__fp_norm2():
    57bc:	91 50       	subi	r25, 0x01	; 1
    57be:	50 40       	sbci	r21, 0x00	; 0
    57c0:	66 0f       	add	r22, r22
    57c2:	77 1f       	adc	r23, r23
    57c4:	88 1f       	adc	r24, r24
    57c6:	d2 f7       	brpl	.-12     	; 0x57bc <__fp_norm2>
    57c8:	08 95       	ret

000057ca <__udivmodsi4>:
__udivmodsi4():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    57ca:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    57cc:	1a 2e       	mov	r1, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    57ce:	aa 1b       	sub	r26, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    57d0:	bb 1b       	sub	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    57d2:	fd 01       	movw	r30, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    57d4:	0d c0       	rjmp	.+26     	; 0x57f0 <__udivmodsi4_ep>

000057d6 <__udivmodsi4_loop>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    57d6:	aa 1f       	adc	r26, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    57d8:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    57da:	ee 1f       	adc	r30, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    57dc:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    57de:	a2 17       	cp	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    57e0:	b3 07       	cpc	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    57e2:	e4 07       	cpc	r30, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    57e4:	f5 07       	cpc	r31, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    57e6:	20 f0       	brcs	.+8      	; 0x57f0 <__udivmodsi4_ep>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    57e8:	a2 1b       	sub	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    57ea:	b3 0b       	sbc	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    57ec:	e4 0b       	sbc	r30, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    57ee:	f5 0b       	sbc	r31, r21

000057f0 <__udivmodsi4_ep>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    57f0:	66 1f       	adc	r22, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    57f2:	77 1f       	adc	r23, r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    57f4:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    57f6:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    57f8:	1a 94       	dec	r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    57fa:	69 f7       	brne	.-38     	; 0x57d6 <__udivmodsi4_loop>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    57fc:	60 95       	com	r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    57fe:	70 95       	com	r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5800:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5802:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5804:	9b 01       	movw	r18, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5806:	ac 01       	movw	r20, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5808:	bd 01       	movw	r22, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    580a:	cf 01       	movw	r24, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    580c:	08 95       	ret

0000580e <__tablejump2__>:
__tablejump2__():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    580e:	ee 0f       	add	r30, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5810:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    5812:	00 24       	eor	r0, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    5814:	00 1c       	adc	r0, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    5816:	0b be       	out	0x3b, r0	; 59
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    5818:	07 90       	elpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    581a:	f6 91       	elpm	r31, Z
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    581c:	e0 2d       	mov	r30, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    581e:	09 94       	ijmp

00005820 <malloc>:
malloc():
/home/mrmemory/Arduino/libraries/AVR-IoT-Cellular/src/sequans_controller.cpp:822
    5820:	0f 93       	push	r16
    5822:	1f 93       	push	r17
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	82 30       	cpi	r24, 0x02	; 2
    582a:	91 05       	cpc	r25, r1
    582c:	10 f4       	brcc	.+4      	; 0x5832 <malloc+0x12>
    582e:	82 e0       	ldi	r24, 0x02	; 2
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	e0 91 df 4e 	lds	r30, 0x4EDF	; 0x804edf <__flp>
    5836:	f0 91 e0 4e 	lds	r31, 0x4EE0	; 0x804ee0 <__flp+0x1>
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	b0 e0       	ldi	r27, 0x00	; 0
    5840:	a0 e0       	ldi	r26, 0x00	; 0
    5842:	30 97       	sbiw	r30, 0x00	; 0
    5844:	99 f4       	brne	.+38     	; 0x586c <malloc+0x4c>
    5846:	21 15       	cp	r18, r1
    5848:	31 05       	cpc	r19, r1
    584a:	09 f4       	brne	.+2      	; 0x584e <malloc+0x2e>
    584c:	4a c0       	rjmp	.+148    	; 0x58e2 <malloc+0xc2>
    584e:	28 1b       	sub	r18, r24
    5850:	39 0b       	sbc	r19, r25
    5852:	24 30       	cpi	r18, 0x04	; 4
    5854:	31 05       	cpc	r19, r1
    5856:	d8 f5       	brcc	.+118    	; 0x58ce <malloc+0xae>
    5858:	8a 81       	ldd	r24, Y+2	; 0x02
    585a:	9b 81       	ldd	r25, Y+3	; 0x03
    585c:	61 15       	cp	r22, r1
    585e:	71 05       	cpc	r23, r1
    5860:	89 f1       	breq	.+98     	; 0x58c4 <malloc+0xa4>
    5862:	fb 01       	movw	r30, r22
    5864:	82 83       	std	Z+2, r24	; 0x02
    5866:	93 83       	std	Z+3, r25	; 0x03
    5868:	fe 01       	movw	r30, r28
    586a:	11 c0       	rjmp	.+34     	; 0x588e <malloc+0x6e>
    586c:	40 81       	ld	r20, Z
    586e:	51 81       	ldd	r21, Z+1	; 0x01
    5870:	02 81       	ldd	r16, Z+2	; 0x02
    5872:	13 81       	ldd	r17, Z+3	; 0x03
    5874:	48 17       	cp	r20, r24
    5876:	59 07       	cpc	r21, r25
    5878:	e0 f0       	brcs	.+56     	; 0x58b2 <malloc+0x92>
    587a:	48 17       	cp	r20, r24
    587c:	59 07       	cpc	r21, r25
    587e:	99 f4       	brne	.+38     	; 0x58a6 <malloc+0x86>
    5880:	10 97       	sbiw	r26, 0x00	; 0
    5882:	61 f0       	breq	.+24     	; 0x589c <malloc+0x7c>
    5884:	12 96       	adiw	r26, 0x02	; 2
    5886:	0c 93       	st	X, r16
    5888:	12 97       	sbiw	r26, 0x02	; 2
    588a:	13 96       	adiw	r26, 0x03	; 3
    588c:	1c 93       	st	X, r17
    588e:	32 96       	adiw	r30, 0x02	; 2
    5890:	cf 01       	movw	r24, r30
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	1f 91       	pop	r17
    5898:	0f 91       	pop	r16
    589a:	08 95       	ret
    589c:	00 93 df 4e 	sts	0x4EDF, r16	; 0x804edf <__flp>
    58a0:	10 93 e0 4e 	sts	0x4EE0, r17	; 0x804ee0 <__flp+0x1>
    58a4:	f4 cf       	rjmp	.-24     	; 0x588e <malloc+0x6e>
    58a6:	21 15       	cp	r18, r1
    58a8:	31 05       	cpc	r19, r1
    58aa:	51 f0       	breq	.+20     	; 0x58c0 <malloc+0xa0>
    58ac:	42 17       	cp	r20, r18
    58ae:	53 07       	cpc	r21, r19
    58b0:	38 f0       	brcs	.+14     	; 0x58c0 <malloc+0xa0>
    58b2:	a9 01       	movw	r20, r18
    58b4:	db 01       	movw	r26, r22
    58b6:	9a 01       	movw	r18, r20
    58b8:	bd 01       	movw	r22, r26
    58ba:	df 01       	movw	r26, r30
    58bc:	f8 01       	movw	r30, r16
    58be:	c1 cf       	rjmp	.-126    	; 0x5842 <malloc+0x22>
    58c0:	ef 01       	movw	r28, r30
    58c2:	f9 cf       	rjmp	.-14     	; 0x58b6 <malloc+0x96>
    58c4:	80 93 df 4e 	sts	0x4EDF, r24	; 0x804edf <__flp>
    58c8:	90 93 e0 4e 	sts	0x4EE0, r25	; 0x804ee0 <__flp+0x1>
    58cc:	cd cf       	rjmp	.-102    	; 0x5868 <malloc+0x48>
    58ce:	fe 01       	movw	r30, r28
    58d0:	e2 0f       	add	r30, r18
    58d2:	f3 1f       	adc	r31, r19
    58d4:	81 93       	st	Z+, r24
    58d6:	91 93       	st	Z+, r25
    58d8:	22 50       	subi	r18, 0x02	; 2
    58da:	31 09       	sbc	r19, r1
    58dc:	28 83       	st	Y, r18
    58de:	39 83       	std	Y+1, r19	; 0x01
    58e0:	d7 cf       	rjmp	.-82     	; 0x5890 <malloc+0x70>
    58e2:	20 91 dd 4e 	lds	r18, 0x4EDD	; 0x804edd <__brkval>
    58e6:	30 91 de 4e 	lds	r19, 0x4EDE	; 0x804ede <__brkval+0x1>
    58ea:	23 2b       	or	r18, r19
    58ec:	41 f4       	brne	.+16     	; 0x58fe <malloc+0xde>
    58ee:	20 91 12 40 	lds	r18, 0x4012	; 0x804012 <__malloc_heap_start>
    58f2:	30 91 13 40 	lds	r19, 0x4013	; 0x804013 <__malloc_heap_start+0x1>
    58f6:	20 93 dd 4e 	sts	0x4EDD, r18	; 0x804edd <__brkval>
    58fa:	30 93 de 4e 	sts	0x4EDE, r19	; 0x804ede <__brkval+0x1>
    58fe:	20 91 10 40 	lds	r18, 0x4010	; 0x804010 <__malloc_heap_end>
    5902:	30 91 11 40 	lds	r19, 0x4011	; 0x804011 <__malloc_heap_end+0x1>
    5906:	21 15       	cp	r18, r1
    5908:	31 05       	cpc	r19, r1
    590a:	41 f4       	brne	.+16     	; 0x591c <malloc+0xfc>
    590c:	2d b7       	in	r18, 0x3d	; 61
    590e:	3e b7       	in	r19, 0x3e	; 62
    5910:	40 91 14 40 	lds	r20, 0x4014	; 0x804014 <__malloc_margin>
    5914:	50 91 15 40 	lds	r21, 0x4015	; 0x804015 <__malloc_margin+0x1>
    5918:	24 1b       	sub	r18, r20
    591a:	35 0b       	sbc	r19, r21
    591c:	e0 91 dd 4e 	lds	r30, 0x4EDD	; 0x804edd <__brkval>
    5920:	f0 91 de 4e 	lds	r31, 0x4EDE	; 0x804ede <__brkval+0x1>
    5924:	e2 17       	cp	r30, r18
    5926:	f3 07       	cpc	r31, r19
    5928:	a0 f4       	brcc	.+40     	; 0x5952 <malloc+0x132>
    592a:	2e 1b       	sub	r18, r30
    592c:	3f 0b       	sbc	r19, r31
    592e:	28 17       	cp	r18, r24
    5930:	39 07       	cpc	r19, r25
    5932:	78 f0       	brcs	.+30     	; 0x5952 <malloc+0x132>
    5934:	ac 01       	movw	r20, r24
    5936:	4e 5f       	subi	r20, 0xFE	; 254
    5938:	5f 4f       	sbci	r21, 0xFF	; 255
    593a:	24 17       	cp	r18, r20
    593c:	35 07       	cpc	r19, r21
    593e:	48 f0       	brcs	.+18     	; 0x5952 <malloc+0x132>
    5940:	4e 0f       	add	r20, r30
    5942:	5f 1f       	adc	r21, r31
    5944:	40 93 dd 4e 	sts	0x4EDD, r20	; 0x804edd <__brkval>
    5948:	50 93 de 4e 	sts	0x4EDE, r21	; 0x804ede <__brkval+0x1>
    594c:	81 93       	st	Z+, r24
    594e:	91 93       	st	Z+, r25
    5950:	9f cf       	rjmp	.-194    	; 0x5890 <malloc+0x70>
    5952:	f0 e0       	ldi	r31, 0x00	; 0
    5954:	e0 e0       	ldi	r30, 0x00	; 0
    5956:	9c cf       	rjmp	.-200    	; 0x5890 <malloc+0x70>

00005958 <free>:
free():
    5958:	cf 93       	push	r28
    595a:	df 93       	push	r29
    595c:	00 97       	sbiw	r24, 0x00	; 0
    595e:	e9 f0       	breq	.+58     	; 0x599a <free+0x42>
    5960:	fc 01       	movw	r30, r24
    5962:	32 97       	sbiw	r30, 0x02	; 2
    5964:	12 82       	std	Z+2, r1	; 0x02
    5966:	13 82       	std	Z+3, r1	; 0x03
    5968:	a0 91 df 4e 	lds	r26, 0x4EDF	; 0x804edf <__flp>
    596c:	b0 91 e0 4e 	lds	r27, 0x4EE0	; 0x804ee0 <__flp+0x1>
    5970:	ed 01       	movw	r28, r26
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	20 e0       	ldi	r18, 0x00	; 0
    5976:	10 97       	sbiw	r26, 0x00	; 0
    5978:	a1 f4       	brne	.+40     	; 0x59a2 <free+0x4a>
    597a:	20 81       	ld	r18, Z
    597c:	31 81       	ldd	r19, Z+1	; 0x01
    597e:	82 0f       	add	r24, r18
    5980:	93 1f       	adc	r25, r19
    5982:	20 91 dd 4e 	lds	r18, 0x4EDD	; 0x804edd <__brkval>
    5986:	30 91 de 4e 	lds	r19, 0x4EDE	; 0x804ede <__brkval+0x1>
    598a:	28 17       	cp	r18, r24
    598c:	39 07       	cpc	r19, r25
    598e:	09 f0       	breq	.+2      	; 0x5992 <free+0x3a>
    5990:	61 c0       	rjmp	.+194    	; 0x5a54 <free+0xfc>
    5992:	e0 93 dd 4e 	sts	0x4EDD, r30	; 0x804edd <__brkval>
    5996:	f0 93 de 4e 	sts	0x4EDE, r31	; 0x804ede <__brkval+0x1>
    599a:	df 91       	pop	r29
    599c:	cf 91       	pop	r28
    599e:	08 95       	ret
    59a0:	ea 01       	movw	r28, r20
    59a2:	ce 17       	cp	r28, r30
    59a4:	df 07       	cpc	r29, r31
    59a6:	e8 f5       	brcc	.+122    	; 0x5a22 <free+0xca>
    59a8:	4a 81       	ldd	r20, Y+2	; 0x02
    59aa:	5b 81       	ldd	r21, Y+3	; 0x03
    59ac:	9e 01       	movw	r18, r28
    59ae:	41 15       	cp	r20, r1
    59b0:	51 05       	cpc	r21, r1
    59b2:	b1 f7       	brne	.-20     	; 0x59a0 <free+0x48>
    59b4:	e9 01       	movw	r28, r18
    59b6:	ea 83       	std	Y+2, r30	; 0x02
    59b8:	fb 83       	std	Y+3, r31	; 0x03
    59ba:	49 91       	ld	r20, Y+
    59bc:	59 91       	ld	r21, Y+
    59be:	c4 0f       	add	r28, r20
    59c0:	d5 1f       	adc	r29, r21
    59c2:	ec 17       	cp	r30, r28
    59c4:	fd 07       	cpc	r31, r29
    59c6:	61 f4       	brne	.+24     	; 0x59e0 <free+0x88>
    59c8:	80 81       	ld	r24, Z
    59ca:	91 81       	ldd	r25, Z+1	; 0x01
    59cc:	02 96       	adiw	r24, 0x02	; 2
    59ce:	84 0f       	add	r24, r20
    59d0:	95 1f       	adc	r25, r21
    59d2:	e9 01       	movw	r28, r18
    59d4:	88 83       	st	Y, r24
    59d6:	99 83       	std	Y+1, r25	; 0x01
    59d8:	82 81       	ldd	r24, Z+2	; 0x02
    59da:	93 81       	ldd	r25, Z+3	; 0x03
    59dc:	8a 83       	std	Y+2, r24	; 0x02
    59de:	9b 83       	std	Y+3, r25	; 0x03
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	e0 e0       	ldi	r30, 0x00	; 0
    59e4:	12 96       	adiw	r26, 0x02	; 2
    59e6:	8d 91       	ld	r24, X+
    59e8:	9c 91       	ld	r25, X
    59ea:	13 97       	sbiw	r26, 0x03	; 3
    59ec:	00 97       	sbiw	r24, 0x00	; 0
    59ee:	b9 f5       	brne	.+110    	; 0x5a5e <free+0x106>
    59f0:	2d 91       	ld	r18, X+
    59f2:	3c 91       	ld	r19, X
    59f4:	11 97       	sbiw	r26, 0x01	; 1
    59f6:	cd 01       	movw	r24, r26
    59f8:	02 96       	adiw	r24, 0x02	; 2
    59fa:	82 0f       	add	r24, r18
    59fc:	93 1f       	adc	r25, r19
    59fe:	20 91 dd 4e 	lds	r18, 0x4EDD	; 0x804edd <__brkval>
    5a02:	30 91 de 4e 	lds	r19, 0x4EDE	; 0x804ede <__brkval+0x1>
    5a06:	28 17       	cp	r18, r24
    5a08:	39 07       	cpc	r19, r25
    5a0a:	39 f6       	brne	.-114    	; 0x599a <free+0x42>
    5a0c:	30 97       	sbiw	r30, 0x00	; 0
    5a0e:	51 f5       	brne	.+84     	; 0x5a64 <free+0x10c>
    5a10:	10 92 df 4e 	sts	0x4EDF, r1	; 0x804edf <__flp>
    5a14:	10 92 e0 4e 	sts	0x4EE0, r1	; 0x804ee0 <__flp+0x1>
    5a18:	a0 93 dd 4e 	sts	0x4EDD, r26	; 0x804edd <__brkval>
    5a1c:	b0 93 de 4e 	sts	0x4EDE, r27	; 0x804ede <__brkval+0x1>
    5a20:	bc cf       	rjmp	.-136    	; 0x599a <free+0x42>
    5a22:	c2 83       	std	Z+2, r28	; 0x02
    5a24:	d3 83       	std	Z+3, r29	; 0x03
    5a26:	40 81       	ld	r20, Z
    5a28:	51 81       	ldd	r21, Z+1	; 0x01
    5a2a:	84 0f       	add	r24, r20
    5a2c:	95 1f       	adc	r25, r21
    5a2e:	c8 17       	cp	r28, r24
    5a30:	d9 07       	cpc	r29, r25
    5a32:	61 f4       	brne	.+24     	; 0x5a4c <free+0xf4>
    5a34:	4e 5f       	subi	r20, 0xFE	; 254
    5a36:	5f 4f       	sbci	r21, 0xFF	; 255
    5a38:	88 81       	ld	r24, Y
    5a3a:	99 81       	ldd	r25, Y+1	; 0x01
    5a3c:	48 0f       	add	r20, r24
    5a3e:	59 1f       	adc	r21, r25
    5a40:	40 83       	st	Z, r20
    5a42:	51 83       	std	Z+1, r21	; 0x01
    5a44:	8a 81       	ldd	r24, Y+2	; 0x02
    5a46:	9b 81       	ldd	r25, Y+3	; 0x03
    5a48:	82 83       	std	Z+2, r24	; 0x02
    5a4a:	93 83       	std	Z+3, r25	; 0x03
    5a4c:	21 15       	cp	r18, r1
    5a4e:	31 05       	cpc	r19, r1
    5a50:	09 f0       	breq	.+2      	; 0x5a54 <free+0xfc>
    5a52:	b0 cf       	rjmp	.-160    	; 0x59b4 <free+0x5c>
    5a54:	e0 93 df 4e 	sts	0x4EDF, r30	; 0x804edf <__flp>
    5a58:	f0 93 e0 4e 	sts	0x4EE0, r31	; 0x804ee0 <__flp+0x1>
    5a5c:	9e cf       	rjmp	.-196    	; 0x599a <free+0x42>
    5a5e:	fd 01       	movw	r30, r26
    5a60:	dc 01       	movw	r26, r24
    5a62:	c0 cf       	rjmp	.-128    	; 0x59e4 <free+0x8c>
    5a64:	12 82       	std	Z+2, r1	; 0x02
    5a66:	13 82       	std	Z+3, r1	; 0x03
    5a68:	d7 cf       	rjmp	.-82     	; 0x5a18 <free+0xc0>

00005a6a <realloc>:
realloc():
    5a6a:	4f 92       	push	r4
    5a6c:	5f 92       	push	r5
    5a6e:	6f 92       	push	r6
    5a70:	7f 92       	push	r7
    5a72:	8f 92       	push	r8
    5a74:	9f 92       	push	r9
    5a76:	af 92       	push	r10
    5a78:	bf 92       	push	r11
    5a7a:	cf 92       	push	r12
    5a7c:	df 92       	push	r13
    5a7e:	ef 92       	push	r14
    5a80:	ff 92       	push	r15
    5a82:	0f 93       	push	r16
    5a84:	1f 93       	push	r17
    5a86:	cf 93       	push	r28
    5a88:	df 93       	push	r29
    5a8a:	8c 01       	movw	r16, r24
    5a8c:	00 97       	sbiw	r24, 0x00	; 0
    5a8e:	91 f4       	brne	.+36     	; 0x5ab4 <realloc+0x4a>
    5a90:	cb 01       	movw	r24, r22
    5a92:	df 91       	pop	r29
    5a94:	cf 91       	pop	r28
    5a96:	1f 91       	pop	r17
    5a98:	0f 91       	pop	r16
    5a9a:	ff 90       	pop	r15
    5a9c:	ef 90       	pop	r14
    5a9e:	df 90       	pop	r13
    5aa0:	cf 90       	pop	r12
    5aa2:	bf 90       	pop	r11
    5aa4:	af 90       	pop	r10
    5aa6:	9f 90       	pop	r9
    5aa8:	8f 90       	pop	r8
    5aaa:	7f 90       	pop	r7
    5aac:	6f 90       	pop	r6
    5aae:	5f 90       	pop	r5
    5ab0:	4f 90       	pop	r4
    5ab2:	b6 ce       	rjmp	.-660    	; 0x5820 <malloc>
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	e6 0f       	add	r30, r22
    5ab8:	f7 1f       	adc	r31, r23
    5aba:	9c 01       	movw	r18, r24
    5abc:	22 50       	subi	r18, 0x02	; 2
    5abe:	31 09       	sbc	r19, r1
    5ac0:	e2 17       	cp	r30, r18
    5ac2:	f3 07       	cpc	r31, r19
    5ac4:	08 f4       	brcc	.+2      	; 0x5ac8 <realloc+0x5e>
    5ac6:	aa c0       	rjmp	.+340    	; 0x5c1c <realloc+0x1b2>
    5ac8:	d9 01       	movw	r26, r18
    5aca:	cd 91       	ld	r28, X+
    5acc:	dc 91       	ld	r29, X
    5ace:	11 97       	sbiw	r26, 0x01	; 1
    5ad0:	c6 17       	cp	r28, r22
    5ad2:	d7 07       	cpc	r29, r23
    5ad4:	18 f1       	brcs	.+70     	; 0x5b1c <realloc+0xb2>
    5ad6:	c5 30       	cpi	r28, 0x05	; 5
    5ad8:	d1 05       	cpc	r29, r1
    5ada:	70 f0       	brcs	.+28     	; 0x5af8 <realloc+0x8e>
    5adc:	ce 01       	movw	r24, r28
    5ade:	04 97       	sbiw	r24, 0x04	; 4
    5ae0:	86 17       	cp	r24, r22
    5ae2:	97 07       	cpc	r25, r23
    5ae4:	48 f0       	brcs	.+18     	; 0x5af8 <realloc+0x8e>
    5ae6:	c6 1b       	sub	r28, r22
    5ae8:	d7 0b       	sbc	r29, r23
    5aea:	22 97       	sbiw	r28, 0x02	; 2
    5aec:	c1 93       	st	Z+, r28
    5aee:	d1 93       	st	Z+, r29
    5af0:	6d 93       	st	X+, r22
    5af2:	7c 93       	st	X, r23
    5af4:	cf 01       	movw	r24, r30
    5af6:	30 df       	rcall	.-416    	; 0x5958 <free>
    5af8:	c8 01       	movw	r24, r16
    5afa:	df 91       	pop	r29
    5afc:	cf 91       	pop	r28
    5afe:	1f 91       	pop	r17
    5b00:	0f 91       	pop	r16
    5b02:	ff 90       	pop	r15
    5b04:	ef 90       	pop	r14
    5b06:	df 90       	pop	r13
    5b08:	cf 90       	pop	r12
    5b0a:	bf 90       	pop	r11
    5b0c:	af 90       	pop	r10
    5b0e:	9f 90       	pop	r9
    5b10:	8f 90       	pop	r8
    5b12:	7f 90       	pop	r7
    5b14:	6f 90       	pop	r6
    5b16:	5f 90       	pop	r5
    5b18:	4f 90       	pop	r4
    5b1a:	08 95       	ret
    5b1c:	5b 01       	movw	r10, r22
    5b1e:	ac 1a       	sub	r10, r28
    5b20:	bd 0a       	sbc	r11, r29
    5b22:	4c 01       	movw	r8, r24
    5b24:	8c 0e       	add	r8, r28
    5b26:	9d 1e       	adc	r9, r29
    5b28:	a0 91 df 4e 	lds	r26, 0x4EDF	; 0x804edf <__flp>
    5b2c:	b0 91 e0 4e 	lds	r27, 0x4EE0	; 0x804ee0 <__flp+0x1>
    5b30:	51 2c       	mov	r5, r1
    5b32:	41 2c       	mov	r4, r1
    5b34:	f1 2c       	mov	r15, r1
    5b36:	e1 2c       	mov	r14, r1
    5b38:	10 97       	sbiw	r26, 0x00	; 0
    5b3a:	31 f5       	brne	.+76     	; 0x5b88 <realloc+0x11e>
    5b3c:	80 91 dd 4e 	lds	r24, 0x4EDD	; 0x804edd <__brkval>
    5b40:	90 91 de 4e 	lds	r25, 0x4EDE	; 0x804ede <__brkval+0x1>
    5b44:	88 15       	cp	r24, r8
    5b46:	99 05       	cpc	r25, r9
    5b48:	09 f0       	breq	.+2      	; 0x5b4c <realloc+0xe2>
    5b4a:	5c c0       	rjmp	.+184    	; 0x5c04 <realloc+0x19a>
    5b4c:	46 16       	cp	r4, r22
    5b4e:	57 06       	cpc	r5, r23
    5b50:	08 f0       	brcs	.+2      	; 0x5b54 <realloc+0xea>
    5b52:	58 c0       	rjmp	.+176    	; 0x5c04 <realloc+0x19a>
    5b54:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__malloc_heap_end>
    5b58:	90 91 11 40 	lds	r25, 0x4011	; 0x804011 <__malloc_heap_end+0x1>
    5b5c:	00 97       	sbiw	r24, 0x00	; 0
    5b5e:	41 f4       	brne	.+16     	; 0x5b70 <realloc+0x106>
    5b60:	8d b7       	in	r24, 0x3d	; 61
    5b62:	9e b7       	in	r25, 0x3e	; 62
    5b64:	40 91 14 40 	lds	r20, 0x4014	; 0x804014 <__malloc_margin>
    5b68:	50 91 15 40 	lds	r21, 0x4015	; 0x804015 <__malloc_margin+0x1>
    5b6c:	84 1b       	sub	r24, r20
    5b6e:	95 0b       	sbc	r25, r21
    5b70:	e8 17       	cp	r30, r24
    5b72:	f9 07       	cpc	r31, r25
    5b74:	08 f0       	brcs	.+2      	; 0x5b78 <realloc+0x10e>
    5b76:	52 c0       	rjmp	.+164    	; 0x5c1c <realloc+0x1b2>
    5b78:	e0 93 dd 4e 	sts	0x4EDD, r30	; 0x804edd <__brkval>
    5b7c:	f0 93 de 4e 	sts	0x4EDE, r31	; 0x804ede <__brkval+0x1>
    5b80:	f9 01       	movw	r30, r18
    5b82:	60 83       	st	Z, r22
    5b84:	71 83       	std	Z+1, r23	; 0x01
    5b86:	b8 cf       	rjmp	.-144    	; 0x5af8 <realloc+0x8e>
    5b88:	8d 91       	ld	r24, X+
    5b8a:	9c 91       	ld	r25, X
    5b8c:	11 97       	sbiw	r26, 0x01	; 1
    5b8e:	12 96       	adiw	r26, 0x02	; 2
    5b90:	6c 90       	ld	r6, X
    5b92:	12 97       	sbiw	r26, 0x02	; 2
    5b94:	13 96       	adiw	r26, 0x03	; 3
    5b96:	7c 90       	ld	r7, X
    5b98:	13 97       	sbiw	r26, 0x03	; 3
    5b9a:	a8 15       	cp	r26, r8
    5b9c:	b9 05       	cpc	r27, r9
    5b9e:	59 f5       	brne	.+86     	; 0x5bf6 <realloc+0x18c>
    5ba0:	6c 01       	movw	r12, r24
    5ba2:	42 e0       	ldi	r20, 0x02	; 2
    5ba4:	c4 0e       	add	r12, r20
    5ba6:	d1 1c       	adc	r13, r1
    5ba8:	ca 14       	cp	r12, r10
    5baa:	db 04       	cpc	r13, r11
    5bac:	20 f1       	brcs	.+72     	; 0x5bf6 <realloc+0x18c>
    5bae:	ac 01       	movw	r20, r24
    5bb0:	4a 19       	sub	r20, r10
    5bb2:	5b 09       	sbc	r21, r11
    5bb4:	da 01       	movw	r26, r20
    5bb6:	12 96       	adiw	r26, 0x02	; 2
    5bb8:	15 97       	sbiw	r26, 0x05	; 5
    5bba:	80 f0       	brcs	.+32     	; 0x5bdc <realloc+0x172>
    5bbc:	62 82       	std	Z+2, r6	; 0x02
    5bbe:	73 82       	std	Z+3, r7	; 0x03
    5bc0:	40 83       	st	Z, r20
    5bc2:	51 83       	std	Z+1, r21	; 0x01
    5bc4:	d9 01       	movw	r26, r18
    5bc6:	6d 93       	st	X+, r22
    5bc8:	7c 93       	st	X, r23
    5bca:	e1 14       	cp	r14, r1
    5bcc:	f1 04       	cpc	r15, r1
    5bce:	71 f0       	breq	.+28     	; 0x5bec <realloc+0x182>
    5bd0:	d7 01       	movw	r26, r14
    5bd2:	12 96       	adiw	r26, 0x02	; 2
    5bd4:	ed 93       	st	X+, r30
    5bd6:	fc 93       	st	X, r31
    5bd8:	13 97       	sbiw	r26, 0x03	; 3
    5bda:	8e cf       	rjmp	.-228    	; 0x5af8 <realloc+0x8e>
    5bdc:	22 96       	adiw	r28, 0x02	; 2
    5bde:	8c 0f       	add	r24, r28
    5be0:	9d 1f       	adc	r25, r29
    5be2:	f9 01       	movw	r30, r18
    5be4:	80 83       	st	Z, r24
    5be6:	91 83       	std	Z+1, r25	; 0x01
    5be8:	f3 01       	movw	r30, r6
    5bea:	ef cf       	rjmp	.-34     	; 0x5bca <realloc+0x160>
    5bec:	e0 93 df 4e 	sts	0x4EDF, r30	; 0x804edf <__flp>
    5bf0:	f0 93 e0 4e 	sts	0x4EE0, r31	; 0x804ee0 <__flp+0x1>
    5bf4:	81 cf       	rjmp	.-254    	; 0x5af8 <realloc+0x8e>
    5bf6:	48 16       	cp	r4, r24
    5bf8:	59 06       	cpc	r5, r25
    5bfa:	08 f4       	brcc	.+2      	; 0x5bfe <realloc+0x194>
    5bfc:	2c 01       	movw	r4, r24
    5bfe:	7d 01       	movw	r14, r26
    5c00:	d3 01       	movw	r26, r6
    5c02:	9a cf       	rjmp	.-204    	; 0x5b38 <realloc+0xce>
    5c04:	cb 01       	movw	r24, r22
    5c06:	0c de       	rcall	.-1000   	; 0x5820 <malloc>
    5c08:	7c 01       	movw	r14, r24
    5c0a:	00 97       	sbiw	r24, 0x00	; 0
    5c0c:	39 f0       	breq	.+14     	; 0x5c1c <realloc+0x1b2>
    5c0e:	ae 01       	movw	r20, r28
    5c10:	b8 01       	movw	r22, r16
    5c12:	14 d0       	rcall	.+40     	; 0x5c3c <memcpy>
    5c14:	c8 01       	movw	r24, r16
    5c16:	a0 de       	rcall	.-704    	; 0x5958 <free>
    5c18:	87 01       	movw	r16, r14
    5c1a:	6e cf       	rjmp	.-292    	; 0x5af8 <realloc+0x8e>
    5c1c:	10 e0       	ldi	r17, 0x00	; 0
    5c1e:	00 e0       	ldi	r16, 0x00	; 0
    5c20:	6b cf       	rjmp	.-298    	; 0x5af8 <realloc+0x8e>

00005c22 <memcmp>:
memcmp():
    5c22:	fb 01       	movw	r30, r22
    5c24:	dc 01       	movw	r26, r24
    5c26:	04 c0       	rjmp	.+8      	; 0x5c30 <memcmp+0xe>
    5c28:	8d 91       	ld	r24, X+
    5c2a:	01 90       	ld	r0, Z+
    5c2c:	80 19       	sub	r24, r0
    5c2e:	21 f4       	brne	.+8      	; 0x5c38 <memcmp+0x16>
    5c30:	41 50       	subi	r20, 0x01	; 1
    5c32:	50 40       	sbci	r21, 0x00	; 0
    5c34:	c8 f7       	brcc	.-14     	; 0x5c28 <memcmp+0x6>
    5c36:	88 1b       	sub	r24, r24
    5c38:	99 0b       	sbc	r25, r25
    5c3a:	08 95       	ret

00005c3c <memcpy>:
memcpy():
    5c3c:	fb 01       	movw	r30, r22
    5c3e:	dc 01       	movw	r26, r24
    5c40:	02 c0       	rjmp	.+4      	; 0x5c46 <memcpy+0xa>
    5c42:	01 90       	ld	r0, Z+
    5c44:	0d 92       	st	X+, r0
    5c46:	41 50       	subi	r20, 0x01	; 1
    5c48:	50 40       	sbci	r21, 0x00	; 0
    5c4a:	d8 f7       	brcc	.-10     	; 0x5c42 <memcpy+0x6>
    5c4c:	08 95       	ret

00005c4e <strchr>:
strchr():
    5c4e:	fc 01       	movw	r30, r24
    5c50:	81 91       	ld	r24, Z+
    5c52:	86 17       	cp	r24, r22
    5c54:	21 f0       	breq	.+8      	; 0x5c5e <strchr+0x10>
    5c56:	88 23       	and	r24, r24
    5c58:	d9 f7       	brne	.-10     	; 0x5c50 <strchr+0x2>
    5c5a:	99 27       	eor	r25, r25
    5c5c:	08 95       	ret
    5c5e:	31 97       	sbiw	r30, 0x01	; 1
    5c60:	cf 01       	movw	r24, r30
    5c62:	08 95       	ret

00005c64 <strcmp>:
strcmp():
    5c64:	fb 01       	movw	r30, r22
    5c66:	dc 01       	movw	r26, r24
    5c68:	8d 91       	ld	r24, X+
    5c6a:	01 90       	ld	r0, Z+
    5c6c:	80 19       	sub	r24, r0
    5c6e:	01 10       	cpse	r0, r1
    5c70:	d9 f3       	breq	.-10     	; 0x5c68 <strcmp+0x4>
    5c72:	99 0b       	sbc	r25, r25
    5c74:	08 95       	ret

00005c76 <strcpy>:
strcpy():
    5c76:	fb 01       	movw	r30, r22
    5c78:	dc 01       	movw	r26, r24
    5c7a:	01 90       	ld	r0, Z+
    5c7c:	0d 92       	st	X+, r0
    5c7e:	00 20       	and	r0, r0
    5c80:	e1 f7       	brne	.-8      	; 0x5c7a <strcpy+0x4>
    5c82:	08 95       	ret

00005c84 <strncpy>:
strncpy():
    5c84:	fb 01       	movw	r30, r22
    5c86:	dc 01       	movw	r26, r24
    5c88:	41 50       	subi	r20, 0x01	; 1
    5c8a:	50 40       	sbci	r21, 0x00	; 0
    5c8c:	48 f0       	brcs	.+18     	; 0x5ca0 <strncpy+0x1c>
    5c8e:	01 90       	ld	r0, Z+
    5c90:	0d 92       	st	X+, r0
    5c92:	00 20       	and	r0, r0
    5c94:	c9 f7       	brne	.-14     	; 0x5c88 <strncpy+0x4>
    5c96:	01 c0       	rjmp	.+2      	; 0x5c9a <strncpy+0x16>
    5c98:	1d 92       	st	X+, r1
    5c9a:	41 50       	subi	r20, 0x01	; 1
    5c9c:	50 40       	sbci	r21, 0x00	; 0
    5c9e:	e0 f7       	brcc	.-8      	; 0x5c98 <strncpy+0x14>
    5ca0:	08 95       	ret

00005ca2 <fputs>:
fputs():
    5ca2:	ef 92       	push	r14
    5ca4:	ff 92       	push	r15
    5ca6:	0f 93       	push	r16
    5ca8:	1f 93       	push	r17
    5caa:	cf 93       	push	r28
    5cac:	df 93       	push	r29
    5cae:	fb 01       	movw	r30, r22
    5cb0:	23 81       	ldd	r18, Z+3	; 0x03
    5cb2:	21 ff       	sbrs	r18, 1
    5cb4:	1b c0       	rjmp	.+54     	; 0x5cec <fputs+0x4a>
    5cb6:	eb 01       	movw	r28, r22
    5cb8:	8c 01       	movw	r16, r24
    5cba:	f1 2c       	mov	r15, r1
    5cbc:	e1 2c       	mov	r14, r1
    5cbe:	f8 01       	movw	r30, r16
    5cc0:	81 91       	ld	r24, Z+
    5cc2:	8f 01       	movw	r16, r30
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	08 c0       	rjmp	.+16     	; 0x5cd8 <fputs+0x36>
    5cc8:	c7 01       	movw	r24, r14
    5cca:	df 91       	pop	r29
    5ccc:	cf 91       	pop	r28
    5cce:	1f 91       	pop	r17
    5cd0:	0f 91       	pop	r16
    5cd2:	ff 90       	pop	r15
    5cd4:	ef 90       	pop	r14
    5cd6:	08 95       	ret
    5cd8:	e8 85       	ldd	r30, Y+8	; 0x08
    5cda:	f9 85       	ldd	r31, Y+9	; 0x09
    5cdc:	be 01       	movw	r22, r28
    5cde:	09 95       	icall
    5ce0:	89 2b       	or	r24, r25
    5ce2:	69 f3       	breq	.-38     	; 0x5cbe <fputs+0x1c>
    5ce4:	ee 24       	eor	r14, r14
    5ce6:	ea 94       	dec	r14
    5ce8:	fe 2c       	mov	r15, r14
    5cea:	e9 cf       	rjmp	.-46     	; 0x5cbe <fputs+0x1c>
    5cec:	ee 24       	eor	r14, r14
    5cee:	ea 94       	dec	r14
    5cf0:	fe 2c       	mov	r15, r14
    5cf2:	ea cf       	rjmp	.-44     	; 0x5cc8 <fputs+0x26>

00005cf4 <sscanf>:
sscanf():
    5cf4:	cf 93       	push	r28
    5cf6:	df 93       	push	r29
    5cf8:	cd b7       	in	r28, 0x3d	; 61
    5cfa:	de b7       	in	r29, 0x3e	; 62
    5cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    5cfe:	cd bf       	out	0x3d, r28	; 61
    5d00:	de bf       	out	0x3e, r29	; 62
    5d02:	85 e0       	ldi	r24, 0x05	; 5
    5d04:	8c 83       	std	Y+4, r24	; 0x04
    5d06:	8b 89       	ldd	r24, Y+19	; 0x13
    5d08:	9c 89       	ldd	r25, Y+20	; 0x14
    5d0a:	89 83       	std	Y+1, r24	; 0x01
    5d0c:	9a 83       	std	Y+2, r25	; 0x02
    5d0e:	ae 01       	movw	r20, r28
    5d10:	49 5e       	subi	r20, 0xE9	; 233
    5d12:	5f 4f       	sbci	r21, 0xFF	; 255
    5d14:	6d 89       	ldd	r22, Y+21	; 0x15
    5d16:	7e 89       	ldd	r23, Y+22	; 0x16
    5d18:	ce 01       	movw	r24, r28
    5d1a:	01 96       	adiw	r24, 0x01	; 1
    5d1c:	9d d1       	rcall	.+826    	; 0x6058 <vfscanf>
    5d1e:	2e 96       	adiw	r28, 0x0e	; 14
    5d20:	cd bf       	out	0x3d, r28	; 61
    5d22:	de bf       	out	0x3e, r29	; 62
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	08 95       	ret

00005d2a <putval>:
putval():
    5d2a:	20 fd       	sbrc	r18, 0
    5d2c:	09 c0       	rjmp	.+18     	; 0x5d40 <putval+0x16>
    5d2e:	fc 01       	movw	r30, r24
    5d30:	23 fd       	sbrc	r18, 3
    5d32:	05 c0       	rjmp	.+10     	; 0x5d3e <putval+0x14>
    5d34:	22 ff       	sbrs	r18, 2
    5d36:	02 c0       	rjmp	.+4      	; 0x5d3c <putval+0x12>
    5d38:	73 83       	std	Z+3, r23	; 0x03
    5d3a:	62 83       	std	Z+2, r22	; 0x02
    5d3c:	51 83       	std	Z+1, r21	; 0x01
    5d3e:	40 83       	st	Z, r20
    5d40:	08 95       	ret

00005d42 <mulacc>:
mulacc():
    5d42:	44 fd       	sbrc	r20, 4
    5d44:	17 c0       	rjmp	.+46     	; 0x5d74 <mulacc+0x32>
    5d46:	46 fd       	sbrc	r20, 6
    5d48:	1d c0       	rjmp	.+58     	; 0x5d84 <mulacc+0x42>
    5d4a:	db 01       	movw	r26, r22
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	aa 0f       	add	r26, r26
    5d50:	bb 1f       	adc	r27, r27
    5d52:	ee 1f       	adc	r30, r30
    5d54:	ff 1f       	adc	r31, r31
    5d56:	10 94       	com	r1
    5d58:	d1 f7       	brne	.-12     	; 0x5d4e <mulacc+0xc>
    5d5a:	6a 0f       	add	r22, r26
    5d5c:	7b 1f       	adc	r23, r27
    5d5e:	8e 1f       	adc	r24, r30
    5d60:	9f 1f       	adc	r25, r31
    5d62:	66 0f       	add	r22, r22
    5d64:	77 1f       	adc	r23, r23
    5d66:	88 1f       	adc	r24, r24
    5d68:	99 1f       	adc	r25, r25
    5d6a:	62 0f       	add	r22, r18
    5d6c:	71 1d       	adc	r23, r1
    5d6e:	81 1d       	adc	r24, r1
    5d70:	91 1d       	adc	r25, r1
    5d72:	08 95       	ret
    5d74:	33 e0       	ldi	r19, 0x03	; 3
    5d76:	66 0f       	add	r22, r22
    5d78:	77 1f       	adc	r23, r23
    5d7a:	88 1f       	adc	r24, r24
    5d7c:	99 1f       	adc	r25, r25
    5d7e:	31 50       	subi	r19, 0x01	; 1
    5d80:	d1 f7       	brne	.-12     	; 0x5d76 <mulacc+0x34>
    5d82:	f3 cf       	rjmp	.-26     	; 0x5d6a <mulacc+0x28>
    5d84:	34 e0       	ldi	r19, 0x04	; 4
    5d86:	f7 cf       	rjmp	.-18     	; 0x5d76 <mulacc+0x34>

00005d88 <skip_spaces>:
skip_spaces():
    5d88:	0f 93       	push	r16
    5d8a:	1f 93       	push	r17
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	8c 01       	movw	r16, r24
    5d92:	c8 01       	movw	r24, r16
    5d94:	77 d2       	rcall	.+1262   	; 0x6284 <fgetc>
    5d96:	ec 01       	movw	r28, r24
    5d98:	97 fd       	sbrc	r25, 7
    5d9a:	06 c0       	rjmp	.+12     	; 0x5da8 <skip_spaces+0x20>
    5d9c:	0d db       	rcall	.-2534   	; 0x53b8 <isspace>
    5d9e:	89 2b       	or	r24, r25
    5da0:	c1 f7       	brne	.-16     	; 0x5d92 <skip_spaces+0xa>
    5da2:	b8 01       	movw	r22, r16
    5da4:	ce 01       	movw	r24, r28
    5da6:	aa d2       	rcall	.+1364   	; 0x62fc <ungetc>
    5da8:	ce 01       	movw	r24, r28
    5daa:	df 91       	pop	r29
    5dac:	cf 91       	pop	r28
    5dae:	1f 91       	pop	r17
    5db0:	0f 91       	pop	r16
    5db2:	08 95       	ret

00005db4 <conv_int>:
conv_int():
    5db4:	8f 92       	push	r8
    5db6:	9f 92       	push	r9
    5db8:	af 92       	push	r10
    5dba:	bf 92       	push	r11
    5dbc:	ef 92       	push	r14
    5dbe:	ff 92       	push	r15
    5dc0:	0f 93       	push	r16
    5dc2:	1f 93       	push	r17
    5dc4:	cf 93       	push	r28
    5dc6:	df 93       	push	r29
    5dc8:	8c 01       	movw	r16, r24
    5dca:	d6 2f       	mov	r29, r22
    5dcc:	7a 01       	movw	r14, r20
    5dce:	b2 2e       	mov	r11, r18
    5dd0:	59 d2       	rcall	.+1202   	; 0x6284 <fgetc>
    5dd2:	9c 01       	movw	r18, r24
    5dd4:	33 27       	eor	r19, r19
    5dd6:	2b 32       	cpi	r18, 0x2B	; 43
    5dd8:	31 05       	cpc	r19, r1
    5dda:	29 f0       	breq	.+10     	; 0x5de6 <conv_int+0x32>
    5ddc:	2d 32       	cpi	r18, 0x2D	; 45
    5dde:	31 05       	cpc	r19, r1
    5de0:	a1 f4       	brne	.+40     	; 0x5e0a <conv_int+0x56>
    5de2:	68 94       	set
    5de4:	b7 f8       	bld	r11, 7
    5de6:	d1 50       	subi	r29, 0x01	; 1
    5de8:	61 f4       	brne	.+24     	; 0x5e02 <conv_int+0x4e>
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	df 91       	pop	r29
    5dee:	cf 91       	pop	r28
    5df0:	1f 91       	pop	r17
    5df2:	0f 91       	pop	r16
    5df4:	ff 90       	pop	r15
    5df6:	ef 90       	pop	r14
    5df8:	bf 90       	pop	r11
    5dfa:	af 90       	pop	r10
    5dfc:	9f 90       	pop	r9
    5dfe:	8f 90       	pop	r8
    5e00:	08 95       	ret
    5e02:	c8 01       	movw	r24, r16
    5e04:	3f d2       	rcall	.+1150   	; 0x6284 <fgetc>
    5e06:	97 fd       	sbrc	r25, 7
    5e08:	f0 cf       	rjmp	.-32     	; 0x5dea <conv_int+0x36>
    5e0a:	cb 2d       	mov	r28, r11
    5e0c:	cd 7f       	andi	r28, 0xFD	; 253
    5e0e:	2b 2d       	mov	r18, r11
    5e10:	20 73       	andi	r18, 0x30	; 48
    5e12:	e9 f4       	brne	.+58     	; 0x5e4e <conv_int+0x9a>
    5e14:	80 33       	cpi	r24, 0x30	; 48
    5e16:	d9 f4       	brne	.+54     	; 0x5e4e <conv_int+0x9a>
    5e18:	aa 24       	eor	r10, r10
    5e1a:	aa 94       	dec	r10
    5e1c:	ad 0e       	add	r10, r29
    5e1e:	79 f0       	breq	.+30     	; 0x5e3e <conv_int+0x8a>
    5e20:	c8 01       	movw	r24, r16
    5e22:	30 d2       	rcall	.+1120   	; 0x6284 <fgetc>
    5e24:	97 fd       	sbrc	r25, 7
    5e26:	0b c0       	rjmp	.+22     	; 0x5e3e <conv_int+0x8a>
    5e28:	28 2f       	mov	r18, r24
    5e2a:	2f 7d       	andi	r18, 0xDF	; 223
    5e2c:	28 35       	cpi	r18, 0x58	; 88
    5e2e:	59 f4       	brne	.+22     	; 0x5e46 <conv_int+0x92>
    5e30:	c2 64       	ori	r28, 0x42	; 66
    5e32:	d2 50       	subi	r29, 0x02	; 2
    5e34:	21 f0       	breq	.+8      	; 0x5e3e <conv_int+0x8a>
    5e36:	c8 01       	movw	r24, r16
    5e38:	25 d2       	rcall	.+1098   	; 0x6284 <fgetc>
    5e3a:	97 ff       	sbrs	r25, 7
    5e3c:	08 c0       	rjmp	.+16     	; 0x5e4e <conv_int+0x9a>
    5e3e:	81 2c       	mov	r8, r1
    5e40:	91 2c       	mov	r9, r1
    5e42:	54 01       	movw	r10, r8
    5e44:	1a c0       	rjmp	.+52     	; 0x5e7a <conv_int+0xc6>
    5e46:	b6 fe       	sbrs	r11, 6
    5e48:	29 c0       	rjmp	.+82     	; 0x5e9c <conv_int+0xe8>
    5e4a:	c2 60       	ori	r28, 0x02	; 2
    5e4c:	da 2d       	mov	r29, r10
    5e4e:	81 2c       	mov	r8, r1
    5e50:	91 2c       	mov	r9, r1
    5e52:	54 01       	movw	r10, r8
    5e54:	20 ed       	ldi	r18, 0xD0	; 208
    5e56:	28 0f       	add	r18, r24
    5e58:	28 30       	cpi	r18, 0x08	; 8
    5e5a:	18 f1       	brcs	.+70     	; 0x5ea2 <conv_int+0xee>
    5e5c:	c4 fd       	sbrc	r28, 4
    5e5e:	09 c0       	rjmp	.+18     	; 0x5e72 <conv_int+0xbe>
    5e60:	2a 30       	cpi	r18, 0x0A	; 10
    5e62:	f8 f0       	brcs	.+62     	; 0x5ea2 <conv_int+0xee>
    5e64:	c6 ff       	sbrs	r28, 6
    5e66:	05 c0       	rjmp	.+10     	; 0x5e72 <conv_int+0xbe>
    5e68:	2f 7d       	andi	r18, 0xDF	; 223
    5e6a:	3f ee       	ldi	r19, 0xEF	; 239
    5e6c:	32 0f       	add	r19, r18
    5e6e:	36 30       	cpi	r19, 0x06	; 6
    5e70:	b8 f0       	brcs	.+46     	; 0x5ea0 <conv_int+0xec>
    5e72:	b8 01       	movw	r22, r16
    5e74:	43 d2       	rcall	.+1158   	; 0x62fc <ungetc>
    5e76:	c1 ff       	sbrs	r28, 1
    5e78:	b8 cf       	rjmp	.-144    	; 0x5dea <conv_int+0x36>
    5e7a:	c7 ff       	sbrs	r28, 7
    5e7c:	08 c0       	rjmp	.+16     	; 0x5e8e <conv_int+0xda>
    5e7e:	b0 94       	com	r11
    5e80:	a0 94       	com	r10
    5e82:	90 94       	com	r9
    5e84:	80 94       	com	r8
    5e86:	81 1c       	adc	r8, r1
    5e88:	91 1c       	adc	r9, r1
    5e8a:	a1 1c       	adc	r10, r1
    5e8c:	b1 1c       	adc	r11, r1
    5e8e:	2c 2f       	mov	r18, r28
    5e90:	b5 01       	movw	r22, r10
    5e92:	a4 01       	movw	r20, r8
    5e94:	c7 01       	movw	r24, r14
    5e96:	49 df       	rcall	.-366    	; 0x5d2a <putval>
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	a8 cf       	rjmp	.-176    	; 0x5dec <conv_int+0x38>
    5e9c:	c2 61       	ori	r28, 0x12	; 18
    5e9e:	d6 cf       	rjmp	.-84     	; 0x5e4c <conv_int+0x98>
    5ea0:	27 50       	subi	r18, 0x07	; 7
    5ea2:	4c 2f       	mov	r20, r28
    5ea4:	c5 01       	movw	r24, r10
    5ea6:	b4 01       	movw	r22, r8
    5ea8:	4c df       	rcall	.-360    	; 0x5d42 <mulacc>
    5eaa:	4b 01       	movw	r8, r22
    5eac:	5c 01       	movw	r10, r24
    5eae:	c2 60       	ori	r28, 0x02	; 2
    5eb0:	d1 50       	subi	r29, 0x01	; 1
    5eb2:	19 f3       	breq	.-58     	; 0x5e7a <conv_int+0xc6>
    5eb4:	c8 01       	movw	r24, r16
    5eb6:	e6 d1       	rcall	.+972    	; 0x6284 <fgetc>
    5eb8:	97 ff       	sbrs	r25, 7
    5eba:	cc cf       	rjmp	.-104    	; 0x5e54 <conv_int+0xa0>
    5ebc:	dc cf       	rjmp	.-72     	; 0x5e76 <conv_int+0xc2>

00005ebe <conv_brk>:
conv_brk():
    5ebe:	7f 92       	push	r7
    5ec0:	8f 92       	push	r8
    5ec2:	9f 92       	push	r9
    5ec4:	af 92       	push	r10
    5ec6:	bf 92       	push	r11
    5ec8:	cf 92       	push	r12
    5eca:	df 92       	push	r13
    5ecc:	ef 92       	push	r14
    5ece:	ff 92       	push	r15
    5ed0:	0f 93       	push	r16
    5ed2:	1f 93       	push	r17
    5ed4:	cf 93       	push	r28
    5ed6:	df 93       	push	r29
    5ed8:	cd b7       	in	r28, 0x3d	; 61
    5eda:	de b7       	in	r29, 0x3e	; 62
    5edc:	a0 97       	sbiw	r28, 0x20	; 32
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	5c 01       	movw	r10, r24
    5ee4:	96 2e       	mov	r9, r22
    5ee6:	7a 01       	movw	r14, r20
    5ee8:	ce 01       	movw	r24, r28
    5eea:	01 96       	adiw	r24, 0x01	; 1
    5eec:	6c 01       	movw	r12, r24
    5eee:	80 e2       	ldi	r24, 0x20	; 32
    5ef0:	f6 01       	movw	r30, r12
    5ef2:	11 92       	st	Z+, r1
    5ef4:	8a 95       	dec	r24
    5ef6:	e9 f7       	brne	.-6      	; 0x5ef2 <conv_brk+0x34>
    5ef8:	f5 01       	movw	r30, r10
    5efa:	b3 81       	ldd	r27, Z+3	; 0x03
    5efc:	89 01       	movw	r16, r18
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	20 e0       	ldi	r18, 0x00	; 0
    5f02:	71 2c       	mov	r7, r1
    5f04:	81 2c       	mov	r8, r1
    5f06:	a0 e0       	ldi	r26, 0x00	; 0
    5f08:	41 e0       	ldi	r20, 0x01	; 1
    5f0a:	50 e0       	ldi	r21, 0x00	; 0
    5f0c:	f8 01       	movw	r30, r16
    5f0e:	b3 fd       	sbrc	r27, 3
    5f10:	85 91       	lpm	r24, Z+
    5f12:	b3 ff       	sbrs	r27, 3
    5f14:	81 91       	ld	r24, Z+
    5f16:	98 2f       	mov	r25, r24
    5f18:	8f 01       	movw	r16, r30
    5f1a:	81 11       	cpse	r24, r1
    5f1c:	14 c0       	rjmp	.+40     	; 0x5f46 <conv_brk+0x88>
    5f1e:	10 e0       	ldi	r17, 0x00	; 0
    5f20:	00 e0       	ldi	r16, 0x00	; 0
    5f22:	c8 01       	movw	r24, r16
    5f24:	a0 96       	adiw	r28, 0x20	; 32
    5f26:	cd bf       	out	0x3d, r28	; 61
    5f28:	de bf       	out	0x3e, r29	; 62
    5f2a:	df 91       	pop	r29
    5f2c:	cf 91       	pop	r28
    5f2e:	1f 91       	pop	r17
    5f30:	0f 91       	pop	r16
    5f32:	ff 90       	pop	r15
    5f34:	ef 90       	pop	r14
    5f36:	df 90       	pop	r13
    5f38:	cf 90       	pop	r12
    5f3a:	bf 90       	pop	r11
    5f3c:	af 90       	pop	r10
    5f3e:	9f 90       	pop	r9
    5f40:	8f 90       	pop	r8
    5f42:	7f 90       	pop	r7
    5f44:	08 95       	ret
    5f46:	8e 35       	cpi	r24, 0x5E	; 94
    5f48:	19 f4       	brne	.+6      	; 0x5f50 <conv_brk+0x92>
    5f4a:	21 15       	cp	r18, r1
    5f4c:	31 05       	cpc	r19, r1
    5f4e:	41 f1       	breq	.+80     	; 0x5fa0 <conv_brk+0xe2>
    5f50:	a2 17       	cp	r26, r18
    5f52:	13 06       	cpc	r1, r19
    5f54:	4c f4       	brge	.+18     	; 0x5f68 <conv_brk+0xaa>
    5f56:	8d 35       	cpi	r24, 0x5D	; 93
    5f58:	49 f1       	breq	.+82     	; 0x5fac <conv_brk+0xee>
    5f5a:	8d 32       	cpi	r24, 0x2D	; 45
    5f5c:	29 f4       	brne	.+10     	; 0x5f68 <conv_brk+0xaa>
    5f5e:	81 10       	cpse	r8, r1
    5f60:	06 c0       	rjmp	.+12     	; 0x5f6e <conv_brk+0xb0>
    5f62:	88 24       	eor	r8, r8
    5f64:	83 94       	inc	r8
    5f66:	1d c0       	rjmp	.+58     	; 0x5fa2 <conv_brk+0xe4>
    5f68:	88 20       	and	r8, r8
    5f6a:	09 f4       	brne	.+2      	; 0x5f6e <conv_brk+0xb0>
    5f6c:	62 c0       	rjmp	.+196    	; 0x6032 <conv_brk+0x174>
    5f6e:	e9 2f       	mov	r30, r25
    5f70:	e6 95       	lsr	r30
    5f72:	e6 95       	lsr	r30
    5f74:	e6 95       	lsr	r30
    5f76:	ec 0d       	add	r30, r12
    5f78:	fd 2d       	mov	r31, r13
    5f7a:	f1 1d       	adc	r31, r1
    5f7c:	89 2f       	mov	r24, r25
    5f7e:	87 70       	andi	r24, 0x07	; 7
    5f80:	ba 01       	movw	r22, r20
    5f82:	01 c0       	rjmp	.+2      	; 0x5f86 <conv_brk+0xc8>
    5f84:	66 0f       	add	r22, r22
    5f86:	8a 95       	dec	r24
    5f88:	ea f7       	brpl	.-6      	; 0x5f84 <conv_brk+0xc6>
    5f8a:	80 81       	ld	r24, Z
    5f8c:	68 2b       	or	r22, r24
    5f8e:	60 83       	st	Z, r22
    5f90:	79 16       	cp	r7, r25
    5f92:	51 f0       	breq	.+20     	; 0x5fa8 <conv_brk+0xea>
    5f94:	97 15       	cp	r25, r7
    5f96:	10 f4       	brcc	.+4      	; 0x5f9c <conv_brk+0xde>
    5f98:	9f 5f       	subi	r25, 0xFF	; 255
    5f9a:	e9 cf       	rjmp	.-46     	; 0x5f6e <conv_brk+0xb0>
    5f9c:	91 50       	subi	r25, 0x01	; 1
    5f9e:	e7 cf       	rjmp	.-50     	; 0x5f6e <conv_brk+0xb0>
    5fa0:	a1 e0       	ldi	r26, 0x01	; 1
    5fa2:	2f 5f       	subi	r18, 0xFF	; 255
    5fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa6:	b2 cf       	rjmp	.-156    	; 0x5f0c <conv_brk+0x4e>
    5fa8:	81 2c       	mov	r8, r1
    5faa:	fb cf       	rjmp	.-10     	; 0x5fa2 <conv_brk+0xe4>
    5fac:	88 20       	and	r8, r8
    5fae:	19 f0       	breq	.+6      	; 0x5fb6 <conv_brk+0xf8>
    5fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    5fb2:	80 62       	ori	r24, 0x20	; 32
    5fb4:	8e 83       	std	Y+6, r24	; 0x06
    5fb6:	aa 23       	and	r26, r26
    5fb8:	59 f0       	breq	.+22     	; 0x5fd0 <conv_brk+0x112>
    5fba:	f6 01       	movw	r30, r12
    5fbc:	9e 01       	movw	r18, r28
    5fbe:	2f 5d       	subi	r18, 0xDF	; 223
    5fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fc2:	80 81       	ld	r24, Z
    5fc4:	80 95       	com	r24
    5fc6:	80 83       	st	Z, r24
    5fc8:	31 96       	adiw	r30, 0x01	; 1
    5fca:	e2 17       	cp	r30, r18
    5fcc:	f3 07       	cpc	r31, r19
    5fce:	c9 f7       	brne	.-14     	; 0x5fc2 <conv_brk+0x104>
    5fd0:	88 24       	eor	r8, r8
    5fd2:	83 94       	inc	r8
    5fd4:	c5 01       	movw	r24, r10
    5fd6:	56 d1       	rcall	.+684    	; 0x6284 <fgetc>
    5fd8:	97 fd       	sbrc	r25, 7
    5fda:	15 c0       	rjmp	.+42     	; 0x6006 <conv_brk+0x148>
    5fdc:	e8 2f       	mov	r30, r24
    5fde:	e6 95       	lsr	r30
    5fe0:	e6 95       	lsr	r30
    5fe2:	e6 95       	lsr	r30
    5fe4:	ec 0d       	add	r30, r12
    5fe6:	fd 2d       	mov	r31, r13
    5fe8:	f1 1d       	adc	r31, r1
    5fea:	20 81       	ld	r18, Z
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	ac 01       	movw	r20, r24
    5ff0:	47 70       	andi	r20, 0x07	; 7
    5ff2:	55 27       	eor	r21, r21
    5ff4:	02 c0       	rjmp	.+4      	; 0x5ffa <conv_brk+0x13c>
    5ff6:	35 95       	asr	r19
    5ff8:	27 95       	ror	r18
    5ffa:	4a 95       	dec	r20
    5ffc:	e2 f7       	brpl	.-8      	; 0x5ff6 <conv_brk+0x138>
    5ffe:	20 fd       	sbrc	r18, 0
    6000:	05 c0       	rjmp	.+10     	; 0x600c <conv_brk+0x14e>
    6002:	b5 01       	movw	r22, r10
    6004:	7b d1       	rcall	.+758    	; 0x62fc <ungetc>
    6006:	88 20       	and	r8, r8
    6008:	69 f0       	breq	.+26     	; 0x6024 <conv_brk+0x166>
    600a:	89 cf       	rjmp	.-238    	; 0x5f1e <conv_brk+0x60>
    600c:	e1 14       	cp	r14, r1
    600e:	f1 04       	cpc	r15, r1
    6010:	29 f0       	breq	.+10     	; 0x601c <conv_brk+0x15e>
    6012:	f7 01       	movw	r30, r14
    6014:	80 83       	st	Z, r24
    6016:	c7 01       	movw	r24, r14
    6018:	01 96       	adiw	r24, 0x01	; 1
    601a:	7c 01       	movw	r14, r24
    601c:	9a 94       	dec	r9
    601e:	81 2c       	mov	r8, r1
    6020:	91 10       	cpse	r9, r1
    6022:	d8 cf       	rjmp	.-80     	; 0x5fd4 <conv_brk+0x116>
    6024:	e1 14       	cp	r14, r1
    6026:	f1 04       	cpc	r15, r1
    6028:	09 f4       	brne	.+2      	; 0x602c <conv_brk+0x16e>
    602a:	7b cf       	rjmp	.-266    	; 0x5f22 <conv_brk+0x64>
    602c:	f7 01       	movw	r30, r14
    602e:	10 82       	st	Z, r1
    6030:	78 cf       	rjmp	.-272    	; 0x5f22 <conv_brk+0x64>
    6032:	e8 2f       	mov	r30, r24
    6034:	e6 95       	lsr	r30
    6036:	e6 95       	lsr	r30
    6038:	e6 95       	lsr	r30
    603a:	ec 0d       	add	r30, r12
    603c:	fd 2d       	mov	r31, r13
    603e:	f1 1d       	adc	r31, r1
    6040:	98 2f       	mov	r25, r24
    6042:	97 70       	andi	r25, 0x07	; 7
    6044:	ba 01       	movw	r22, r20
    6046:	01 c0       	rjmp	.+2      	; 0x604a <conv_brk+0x18c>
    6048:	66 0f       	add	r22, r22
    604a:	9a 95       	dec	r25
    604c:	ea f7       	brpl	.-6      	; 0x6048 <conv_brk+0x18a>
    604e:	90 81       	ld	r25, Z
    6050:	69 2b       	or	r22, r25
    6052:	60 83       	st	Z, r22
    6054:	78 2e       	mov	r7, r24
    6056:	a5 cf       	rjmp	.-182    	; 0x5fa2 <conv_brk+0xe4>

00006058 <vfscanf>:
vfscanf():
    6058:	5f 92       	push	r5
    605a:	6f 92       	push	r6
    605c:	7f 92       	push	r7
    605e:	8f 92       	push	r8
    6060:	9f 92       	push	r9
    6062:	af 92       	push	r10
    6064:	bf 92       	push	r11
    6066:	cf 92       	push	r12
    6068:	df 92       	push	r13
    606a:	ef 92       	push	r14
    606c:	ff 92       	push	r15
    606e:	0f 93       	push	r16
    6070:	1f 93       	push	r17
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
    6076:	6c 01       	movw	r12, r24
    6078:	eb 01       	movw	r28, r22
    607a:	5a 01       	movw	r10, r20
    607c:	fc 01       	movw	r30, r24
    607e:	16 82       	std	Z+6, r1	; 0x06
    6080:	17 82       	std	Z+7, r1	; 0x07
    6082:	51 2c       	mov	r5, r1
    6084:	f6 01       	movw	r30, r12
    6086:	e3 80       	ldd	r14, Z+3	; 0x03
    6088:	fe 01       	movw	r30, r28
    608a:	e3 fc       	sbrc	r14, 3
    608c:	85 91       	lpm	r24, Z+
    608e:	e3 fe       	sbrs	r14, 3
    6090:	81 91       	ld	r24, Z+
    6092:	18 2f       	mov	r17, r24
    6094:	ef 01       	movw	r28, r30
    6096:	88 23       	and	r24, r24
    6098:	c9 f0       	breq	.+50     	; 0x60cc <vfscanf+0x74>
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	8d d9       	rcall	.-3302   	; 0x53b8 <isspace>
    609e:	89 2b       	or	r24, r25
    60a0:	19 f0       	breq	.+6      	; 0x60a8 <vfscanf+0x50>
    60a2:	c6 01       	movw	r24, r12
    60a4:	71 de       	rcall	.-798    	; 0x5d88 <skip_spaces>
    60a6:	ee cf       	rjmp	.-36     	; 0x6084 <vfscanf+0x2c>
    60a8:	15 32       	cpi	r17, 0x25	; 37
    60aa:	41 f4       	brne	.+16     	; 0x60bc <vfscanf+0x64>
    60ac:	fe 01       	movw	r30, r28
    60ae:	e3 fc       	sbrc	r14, 3
    60b0:	15 91       	lpm	r17, Z+
    60b2:	e3 fe       	sbrs	r14, 3
    60b4:	11 91       	ld	r17, Z+
    60b6:	ef 01       	movw	r28, r30
    60b8:	15 32       	cpi	r17, 0x25	; 37
    60ba:	59 f4       	brne	.+22     	; 0x60d2 <vfscanf+0x7a>
    60bc:	c6 01       	movw	r24, r12
    60be:	e2 d0       	rcall	.+452    	; 0x6284 <fgetc>
    60c0:	97 fd       	sbrc	r25, 7
    60c2:	88 c0       	rjmp	.+272    	; 0x61d4 <vfscanf+0x17c>
    60c4:	18 17       	cp	r17, r24
    60c6:	f1 f2       	breq	.-68     	; 0x6084 <vfscanf+0x2c>
    60c8:	b6 01       	movw	r22, r12
    60ca:	18 d1       	rcall	.+560    	; 0x62fc <ungetc>
    60cc:	85 2d       	mov	r24, r5
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	85 c0       	rjmp	.+266    	; 0x61dc <vfscanf+0x184>
    60d2:	00 e0       	ldi	r16, 0x00	; 0
    60d4:	1a 32       	cpi	r17, 0x2A	; 42
    60d6:	31 f4       	brne	.+12     	; 0x60e4 <vfscanf+0x8c>
    60d8:	e3 fc       	sbrc	r14, 3
    60da:	15 91       	lpm	r17, Z+
    60dc:	e3 fe       	sbrs	r14, 3
    60de:	11 91       	ld	r17, Z+
    60e0:	ef 01       	movw	r28, r30
    60e2:	01 e0       	ldi	r16, 0x01	; 1
    60e4:	f1 2c       	mov	r15, r1
    60e6:	20 ed       	ldi	r18, 0xD0	; 208
    60e8:	21 0f       	add	r18, r17
    60ea:	2a 30       	cpi	r18, 0x0A	; 10
    60ec:	38 f1       	brcs	.+78     	; 0x613c <vfscanf+0xe4>
    60ee:	01 ff       	sbrs	r16, 1
    60f0:	34 c0       	rjmp	.+104    	; 0x615a <vfscanf+0x102>
    60f2:	ff 20       	and	r15, r15
    60f4:	59 f3       	breq	.-42     	; 0x60cc <vfscanf+0x74>
    60f6:	18 36       	cpi	r17, 0x68	; 104
    60f8:	99 f1       	breq	.+102    	; 0x6160 <vfscanf+0x108>
    60fa:	1c 36       	cpi	r17, 0x6C	; 108
    60fc:	09 f4       	brne	.+2      	; 0x6100 <vfscanf+0xa8>
    60fe:	3a c0       	rjmp	.+116    	; 0x6174 <vfscanf+0x11c>
    6100:	11 23       	and	r17, r17
    6102:	21 f3       	breq	.-56     	; 0x60cc <vfscanf+0x74>
    6104:	61 2f       	mov	r22, r17
    6106:	70 e0       	ldi	r23, 0x00	; 0
    6108:	86 ef       	ldi	r24, 0xF6	; 246
    610a:	91 e0       	ldi	r25, 0x01	; 1
    610c:	b0 d0       	rcall	.+352    	; 0x626e <strchr_P>
    610e:	89 2b       	or	r24, r25
    6110:	e9 f2       	breq	.-70     	; 0x60cc <vfscanf+0x74>
    6112:	91 2c       	mov	r9, r1
    6114:	81 2c       	mov	r8, r1
    6116:	00 fd       	sbrc	r16, 0
    6118:	06 c0       	rjmp	.+12     	; 0x6126 <vfscanf+0xce>
    611a:	f5 01       	movw	r30, r10
    611c:	80 80       	ld	r8, Z
    611e:	91 80       	ldd	r9, Z+1	; 0x01
    6120:	c5 01       	movw	r24, r10
    6122:	02 96       	adiw	r24, 0x02	; 2
    6124:	5c 01       	movw	r10, r24
    6126:	1e 36       	cpi	r17, 0x6E	; 110
    6128:	69 f5       	brne	.+90     	; 0x6184 <vfscanf+0x12c>
    612a:	f6 01       	movw	r30, r12
    612c:	46 81       	ldd	r20, Z+6	; 0x06
    612e:	57 81       	ldd	r21, Z+7	; 0x07
    6130:	70 e0       	ldi	r23, 0x00	; 0
    6132:	60 e0       	ldi	r22, 0x00	; 0
    6134:	20 2f       	mov	r18, r16
    6136:	c4 01       	movw	r24, r8
    6138:	f8 dd       	rcall	.-1040   	; 0x5d2a <putval>
    613a:	a4 cf       	rjmp	.-184    	; 0x6084 <vfscanf+0x2c>
    613c:	02 60       	ori	r16, 0x02	; 2
    613e:	6f 2d       	mov	r22, r15
    6140:	70 e0       	ldi	r23, 0x00	; 0
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	40 e2       	ldi	r20, 0x20	; 32
    6148:	fc dd       	rcall	.-1032   	; 0x5d42 <mulacc>
    614a:	f6 2e       	mov	r15, r22
    614c:	fe 01       	movw	r30, r28
    614e:	e3 fc       	sbrc	r14, 3
    6150:	15 91       	lpm	r17, Z+
    6152:	e3 fe       	sbrs	r14, 3
    6154:	11 91       	ld	r17, Z+
    6156:	ef 01       	movw	r28, r30
    6158:	c6 cf       	rjmp	.-116    	; 0x60e6 <vfscanf+0x8e>
    615a:	ff 24       	eor	r15, r15
    615c:	fa 94       	dec	r15
    615e:	cb cf       	rjmp	.-106    	; 0x60f6 <vfscanf+0x9e>
    6160:	fe 01       	movw	r30, r28
    6162:	e3 fc       	sbrc	r14, 3
    6164:	15 91       	lpm	r17, Z+
    6166:	e3 fe       	sbrs	r14, 3
    6168:	11 91       	ld	r17, Z+
    616a:	ef 01       	movw	r28, r30
    616c:	18 36       	cpi	r17, 0x68	; 104
    616e:	09 f0       	breq	.+2      	; 0x6172 <vfscanf+0x11a>
    6170:	c7 cf       	rjmp	.-114    	; 0x6100 <vfscanf+0xa8>
    6172:	08 60       	ori	r16, 0x08	; 8
    6174:	04 60       	ori	r16, 0x04	; 4
    6176:	fe 01       	movw	r30, r28
    6178:	e3 fc       	sbrc	r14, 3
    617a:	15 91       	lpm	r17, Z+
    617c:	e3 fe       	sbrs	r14, 3
    617e:	11 91       	ld	r17, Z+
    6180:	ef 01       	movw	r28, r30
    6182:	be cf       	rjmp	.-132    	; 0x6100 <vfscanf+0xa8>
    6184:	13 36       	cpi	r17, 0x63	; 99
    6186:	b9 f4       	brne	.+46     	; 0x61b6 <vfscanf+0x15e>
    6188:	01 fd       	sbrc	r16, 1
    618a:	02 c0       	rjmp	.+4      	; 0x6190 <vfscanf+0x138>
    618c:	ff 24       	eor	r15, r15
    618e:	f3 94       	inc	r15
    6190:	c6 01       	movw	r24, r12
    6192:	78 d0       	rcall	.+240    	; 0x6284 <fgetc>
    6194:	97 fd       	sbrc	r25, 7
    6196:	1e c0       	rjmp	.+60     	; 0x61d4 <vfscanf+0x17c>
    6198:	81 14       	cp	r8, r1
    619a:	91 04       	cpc	r9, r1
    619c:	29 f0       	breq	.+10     	; 0x61a8 <vfscanf+0x150>
    619e:	f4 01       	movw	r30, r8
    61a0:	80 83       	st	Z, r24
    61a2:	c4 01       	movw	r24, r8
    61a4:	01 96       	adiw	r24, 0x01	; 1
    61a6:	4c 01       	movw	r8, r24
    61a8:	fa 94       	dec	r15
    61aa:	f1 10       	cpse	r15, r1
    61ac:	f1 cf       	rjmp	.-30     	; 0x6190 <vfscanf+0x138>
    61ae:	00 fd       	sbrc	r16, 0
    61b0:	69 cf       	rjmp	.-302    	; 0x6084 <vfscanf+0x2c>
    61b2:	53 94       	inc	r5
    61b4:	67 cf       	rjmp	.-306    	; 0x6084 <vfscanf+0x2c>
    61b6:	1b 35       	cpi	r17, 0x5B	; 91
    61b8:	09 f5       	brne	.+66     	; 0x61fc <vfscanf+0x1a4>
    61ba:	9e 01       	movw	r18, r28
    61bc:	a4 01       	movw	r20, r8
    61be:	6f 2d       	mov	r22, r15
    61c0:	c6 01       	movw	r24, r12
    61c2:	7d de       	rcall	.-774    	; 0x5ebe <conv_brk>
    61c4:	ec 01       	movw	r28, r24
    61c6:	89 2b       	or	r24, r25
    61c8:	91 f7       	brne	.-28     	; 0x61ae <vfscanf+0x156>
    61ca:	f6 01       	movw	r30, r12
    61cc:	83 81       	ldd	r24, Z+3	; 0x03
    61ce:	80 73       	andi	r24, 0x30	; 48
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <vfscanf+0x17c>
    61d2:	7c cf       	rjmp	.-264    	; 0x60cc <vfscanf+0x74>
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	9f ef       	ldi	r25, 0xFF	; 255
    61d8:	51 10       	cpse	r5, r1
    61da:	78 cf       	rjmp	.-272    	; 0x60cc <vfscanf+0x74>
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
    61e0:	1f 91       	pop	r17
    61e2:	0f 91       	pop	r16
    61e4:	ff 90       	pop	r15
    61e6:	ef 90       	pop	r14
    61e8:	df 90       	pop	r13
    61ea:	cf 90       	pop	r12
    61ec:	bf 90       	pop	r11
    61ee:	af 90       	pop	r10
    61f0:	9f 90       	pop	r9
    61f2:	8f 90       	pop	r8
    61f4:	7f 90       	pop	r7
    61f6:	6f 90       	pop	r6
    61f8:	5f 90       	pop	r5
    61fa:	08 95       	ret
    61fc:	c6 01       	movw	r24, r12
    61fe:	c4 dd       	rcall	.-1144   	; 0x5d88 <skip_spaces>
    6200:	97 fd       	sbrc	r25, 7
    6202:	e8 cf       	rjmp	.-48     	; 0x61d4 <vfscanf+0x17c>
    6204:	1f 36       	cpi	r17, 0x6F	; 111
    6206:	89 f1       	breq	.+98     	; 0x626a <vfscanf+0x212>
    6208:	30 f4       	brcc	.+12     	; 0x6216 <vfscanf+0x1be>
    620a:	14 36       	cpi	r17, 0x64	; 100
    620c:	41 f0       	breq	.+16     	; 0x621e <vfscanf+0x1c6>
    620e:	19 36       	cpi	r17, 0x69	; 105
    6210:	39 f0       	breq	.+14     	; 0x6220 <vfscanf+0x1c8>
    6212:	00 64       	ori	r16, 0x40	; 64
    6214:	05 c0       	rjmp	.+10     	; 0x6220 <vfscanf+0x1c8>
    6216:	13 37       	cpi	r17, 0x73	; 115
    6218:	b1 f0       	breq	.+44     	; 0x6246 <vfscanf+0x1ee>
    621a:	15 37       	cpi	r17, 0x75	; 117
    621c:	d1 f7       	brne	.-12     	; 0x6212 <vfscanf+0x1ba>
    621e:	00 62       	ori	r16, 0x20	; 32
    6220:	20 2f       	mov	r18, r16
    6222:	a4 01       	movw	r20, r8
    6224:	6f 2d       	mov	r22, r15
    6226:	c6 01       	movw	r24, r12
    6228:	c5 dd       	rcall	.-1142   	; 0x5db4 <conv_int>
    622a:	81 11       	cpse	r24, r1
    622c:	c0 cf       	rjmp	.-128    	; 0x61ae <vfscanf+0x156>
    622e:	cd cf       	rjmp	.-102    	; 0x61ca <vfscanf+0x172>
    6230:	81 14       	cp	r8, r1
    6232:	91 04       	cpc	r9, r1
    6234:	29 f0       	breq	.+10     	; 0x6240 <vfscanf+0x1e8>
    6236:	f4 01       	movw	r30, r8
    6238:	60 82       	st	Z, r6
    623a:	c4 01       	movw	r24, r8
    623c:	01 96       	adiw	r24, 0x01	; 1
    623e:	4c 01       	movw	r8, r24
    6240:	fa 94       	dec	r15
    6242:	ff 20       	and	r15, r15
    6244:	59 f0       	breq	.+22     	; 0x625c <vfscanf+0x204>
    6246:	c6 01       	movw	r24, r12
    6248:	1d d0       	rcall	.+58     	; 0x6284 <fgetc>
    624a:	3c 01       	movw	r6, r24
    624c:	97 fd       	sbrc	r25, 7
    624e:	06 c0       	rjmp	.+12     	; 0x625c <vfscanf+0x204>
    6250:	b3 d8       	rcall	.-3738   	; 0x53b8 <isspace>
    6252:	89 2b       	or	r24, r25
    6254:	69 f3       	breq	.-38     	; 0x6230 <vfscanf+0x1d8>
    6256:	b6 01       	movw	r22, r12
    6258:	c3 01       	movw	r24, r6
    625a:	50 d0       	rcall	.+160    	; 0x62fc <ungetc>
    625c:	81 14       	cp	r8, r1
    625e:	91 04       	cpc	r9, r1
    6260:	09 f4       	brne	.+2      	; 0x6264 <vfscanf+0x20c>
    6262:	a5 cf       	rjmp	.-182    	; 0x61ae <vfscanf+0x156>
    6264:	f4 01       	movw	r30, r8
    6266:	10 82       	st	Z, r1
    6268:	a2 cf       	rjmp	.-188    	; 0x61ae <vfscanf+0x156>
    626a:	00 61       	ori	r16, 0x10	; 16
    626c:	d9 cf       	rjmp	.-78     	; 0x6220 <vfscanf+0x1c8>

0000626e <strchr_P>:
strchr_P():
    626e:	fc 01       	movw	r30, r24
    6270:	05 90       	lpm	r0, Z+
    6272:	06 16       	cp	r0, r22
    6274:	21 f0       	breq	.+8      	; 0x627e <strchr_P+0x10>
    6276:	00 20       	and	r0, r0
    6278:	d9 f7       	brne	.-10     	; 0x6270 <strchr_P+0x2>
    627a:	c0 01       	movw	r24, r0
    627c:	08 95       	ret
    627e:	31 97       	sbiw	r30, 0x01	; 1
    6280:	cf 01       	movw	r24, r30
    6282:	08 95       	ret

00006284 <fgetc>:
fgetc():
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	ec 01       	movw	r28, r24
    628a:	2b 81       	ldd	r18, Y+3	; 0x03
    628c:	20 ff       	sbrs	r18, 0
    628e:	1a c0       	rjmp	.+52     	; 0x62c4 <fgetc+0x40>
    6290:	26 ff       	sbrs	r18, 6
    6292:	0c c0       	rjmp	.+24     	; 0x62ac <fgetc+0x28>
    6294:	2f 7b       	andi	r18, 0xBF	; 191
    6296:	2b 83       	std	Y+3, r18	; 0x03
    6298:	8e 81       	ldd	r24, Y+6	; 0x06
    629a:	9f 81       	ldd	r25, Y+7	; 0x07
    629c:	01 96       	adiw	r24, 0x01	; 1
    629e:	8e 83       	std	Y+6, r24	; 0x06
    62a0:	9f 83       	std	Y+7, r25	; 0x07
    62a2:	8a 81       	ldd	r24, Y+2	; 0x02
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	df 91       	pop	r29
    62a8:	cf 91       	pop	r28
    62aa:	08 95       	ret
    62ac:	22 ff       	sbrs	r18, 2
    62ae:	18 c0       	rjmp	.+48     	; 0x62e0 <fgetc+0x5c>
    62b0:	e8 81       	ld	r30, Y
    62b2:	f9 81       	ldd	r31, Y+1	; 0x01
    62b4:	80 81       	ld	r24, Z
    62b6:	08 2e       	mov	r0, r24
    62b8:	00 0c       	add	r0, r0
    62ba:	99 0b       	sbc	r25, r25
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	29 f4       	brne	.+10     	; 0x62ca <fgetc+0x46>
    62c0:	20 62       	ori	r18, 0x20	; 32
    62c2:	2b 83       	std	Y+3, r18	; 0x03
    62c4:	8f ef       	ldi	r24, 0xFF	; 255
    62c6:	9f ef       	ldi	r25, 0xFF	; 255
    62c8:	ee cf       	rjmp	.-36     	; 0x62a6 <fgetc+0x22>
    62ca:	31 96       	adiw	r30, 0x01	; 1
    62cc:	e8 83       	st	Y, r30
    62ce:	f9 83       	std	Y+1, r31	; 0x01
    62d0:	2e 81       	ldd	r18, Y+6	; 0x06
    62d2:	3f 81       	ldd	r19, Y+7	; 0x07
    62d4:	2f 5f       	subi	r18, 0xFF	; 255
    62d6:	3f 4f       	sbci	r19, 0xFF	; 255
    62d8:	2e 83       	std	Y+6, r18	; 0x06
    62da:	3f 83       	std	Y+7, r19	; 0x07
    62dc:	99 27       	eor	r25, r25
    62de:	e3 cf       	rjmp	.-58     	; 0x62a6 <fgetc+0x22>
    62e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    62e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    62e4:	09 95       	icall
    62e6:	97 ff       	sbrs	r25, 7
    62e8:	f3 cf       	rjmp	.-26     	; 0x62d0 <fgetc+0x4c>
    62ea:	2b 81       	ldd	r18, Y+3	; 0x03
    62ec:	01 96       	adiw	r24, 0x01	; 1
    62ee:	21 f0       	breq	.+8      	; 0x62f8 <fgetc+0x74>
    62f0:	80 e2       	ldi	r24, 0x20	; 32
    62f2:	82 2b       	or	r24, r18
    62f4:	8b 83       	std	Y+3, r24	; 0x03
    62f6:	e6 cf       	rjmp	.-52     	; 0x62c4 <fgetc+0x40>
    62f8:	80 e1       	ldi	r24, 0x10	; 16
    62fa:	fb cf       	rjmp	.-10     	; 0x62f2 <fgetc+0x6e>

000062fc <ungetc>:
ungetc():
    62fc:	fb 01       	movw	r30, r22
    62fe:	23 81       	ldd	r18, Z+3	; 0x03
    6300:	20 ff       	sbrs	r18, 0
    6302:	11 c0       	rjmp	.+34     	; 0x6326 <ungetc+0x2a>
    6304:	26 fd       	sbrc	r18, 6
    6306:	0f c0       	rjmp	.+30     	; 0x6326 <ungetc+0x2a>
    6308:	8f 3f       	cpi	r24, 0xFF	; 255
    630a:	98 07       	cpc	r25, r24
    630c:	71 f0       	breq	.+28     	; 0x632a <ungetc+0x2e>
    630e:	82 83       	std	Z+2, r24	; 0x02
    6310:	2f 7d       	andi	r18, 0xDF	; 223
    6312:	20 64       	ori	r18, 0x40	; 64
    6314:	23 83       	std	Z+3, r18	; 0x03
    6316:	26 81       	ldd	r18, Z+6	; 0x06
    6318:	37 81       	ldd	r19, Z+7	; 0x07
    631a:	21 50       	subi	r18, 0x01	; 1
    631c:	31 09       	sbc	r19, r1
    631e:	26 83       	std	Z+6, r18	; 0x06
    6320:	37 83       	std	Z+7, r19	; 0x07
    6322:	99 27       	eor	r25, r25
    6324:	08 95       	ret
    6326:	8f ef       	ldi	r24, 0xFF	; 255
    6328:	9f ef       	ldi	r25, 0xFF	; 255
    632a:	08 95       	ret

0000632c <__do_global_dtors>:
__do_global_dtors():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    632c:	15 e0       	ldi	r17, 0x05	; 5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    632e:	c9 ef       	ldi	r28, 0xF9	; 249
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    6330:	d5 e0       	ldi	r29, 0x05	; 5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    6332:	03 c0       	rjmp	.+6      	; 0x633a <__do_global_dtors+0xe>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    6334:	fe 01       	movw	r30, r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    6336:	6b da       	rcall	.-2858   	; 0x580e <__tablejump2__>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    6338:	21 96       	adiw	r28, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    633a:	ca 3f       	cpi	r28, 0xFA	; 250
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    633c:	d1 07       	cpc	r29, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    633e:	d1 f7       	brne	.-12     	; 0x6334 <__do_global_dtors+0x8>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    6340:	f8 94       	cli

00006342 <__stop_program>:
__stop_program():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    6342:	ff cf       	rjmp	.-2      	; 0x6342 <__stop_program>
